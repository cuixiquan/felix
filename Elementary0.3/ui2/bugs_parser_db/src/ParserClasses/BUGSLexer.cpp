/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g
 *     -                            On : 2013-05-06 12:10:39
 *     -                 for the lexer : BUGSLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSLexer.hpp"
/* ----------------------------------------- */



	namespace BUGS {


/** String literals used by BUGSLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x61, 0x62, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x61, 0x72, 0x63, 0x63, 0x6F, 0x73, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x61, 0x72, 0x63, 0x63, 0x6F, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x61, 0x72, 0x63, 0x73, 0x69, 0x6E, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x61, 0x72, 0x63, 0x73, 0x69, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x61, 0x72, 0x63, 0x74, 0x61, 0x6E, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x61, 0x72, 0x63, 0x74, 0x61, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x64, 0x62, 0x65, 0x72, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x64, 0x62, 0x65, 0x74, 0x61, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x64, 0x62, 0x69, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x64, 0x63, 0x61, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x43, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x49, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x64, 0x63, 0x68, 0x69, 0x73, 0x71, 0x72, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x63, 0x6C, 0x6F, 0x67, 0x6C, 0x6F, 0x67, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x63, 0x6F, 0x73, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x63, 0x6F, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x63, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x76, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x63, 0x75, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x64, 0x65, 0x6E, 0x73, 0x69, 0x74, 0x79, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x64, 0x65, 0x76, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x64, 0x64, 0x69, 0x72, 0x63, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x64, 0x64, 0x69, 0x72, 0x69, 0x63, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x64, 0x64, 0x65, 0x78, 0x70, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x65, 0x71, 0x75, 0x61, 0x6C, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x64, 0x65, 0x78, 0x70, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x65, 0x78, 0x70, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x64, 0x66, 0x6C, 0x61, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x64, 0x67, 0x61, 0x6D, 0x6D, 0x61, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x67, 0x61, 0x6D, 0x6D, 0x61, 0x70, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x64, 0x66, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x64, 0x67, 0x67, 0x61, 0x6D, 0x6D, 0x61, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x64, 0x6C, 0x6F, 0x67, 0x6C, 0x69, 0x6B, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x64, 0x67, 0x70, 0x61, 0x72, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x64, 0x67, 0x65, 0x76, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x69, 0x63, 0x6C, 0x6F, 0x67, 0x6C, 0x6F, 0x67, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x69, 0x6C, 0x6F, 0x67, 0x69, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x69, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x69, 0x6E, 0x70, 0x72, 0x6F, 0x64, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x69, 0x6E, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6C, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x69, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x3C, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x6C, 0x6F, 0x67, 0x66, 0x61, 0x63, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x6C, 0x6F, 0x67, 0x67, 0x61, 0x6D, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x64, 0x6C, 0x6F, 0x67, 0x69, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x6C, 0x6F, 0x67, 0x69, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x64, 0x6C, 0x6E, 0x6F, 0x72, 0x6D, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x6C, 0x6F, 0x67, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x6D, 0x61, 0x78, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x6D, 0x65, 0x61, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_52[]  = { 0x6D, 0x69, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_53[]  = { 0x6D, 0x6F, 0x64, 0x65, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_54[]  = { 0x64, 0x6D, 0x75, 0x6C, 0x74, 0x69, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_55[]  = { 0x64, 0x6D, 0x6E, 0x6F, 0x72, 0x6D, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_56[]  = { 0x64, 0x6D, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_57[]  = { 0x64, 0x68, 0x79, 0x70, 0x65, 0x72, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_58[]  = { 0x64, 0x6E, 0x65, 0x67, 0x62, 0x69, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_59[]  = { 0x64, 0x6E, 0x6F, 0x72, 0x6D, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_60[]  = { 0x64, 0x70, 0x61, 0x72, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_61[]  = { 0x70, 0x68, 0x69, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_62[]  = { 0x64, 0x70, 0x6F, 0x69, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_63[]  = { 0x70, 0x6F, 0x73, 0x74, 0x2E, 0x70, 0x2E, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_64[]  = { 0x70, 0x6F, 0x77, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_65[]  = { 0x70, 0x72, 0x69, 0x6F, 0x72, 0x2E, 0x70, 0x2E, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_66[]  = { 0x70, 0x72, 0x6F, 0x62, 0x69, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_67[]  = { 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2E, 0x70, 0x6F, 0x73, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_68[]  = { 0x72, 0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2E, 0x70, 0x72, 0x69, 0x6F, 0x72, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_69[]  = { 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_70[]  = { 0x73, 0x64, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_71[]  = { 0x73, 0x69, 0x6E, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_72[]  = { 0x73, 0x69, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_73[]  = { 0x73, 0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_74[]  = { 0x73, 0x71, 0x72, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_75[]  = { 0x73, 0x74, 0x65, 0x70, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_76[]  = { 0x64, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_77[]  = { 0x73, 0x75, 0x6D, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_78[]  = { 0x74, 0x61, 0x6E, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_79[]  = { 0x74, 0x61, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_80[]  = { 0x54, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_81[]  = { 0x74, 0x72, 0x75, 0x6E, 0x63, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_82[]  = { 0x64, 0x75, 0x6E, 0x69, 0x66, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_83[]  = { 0x64, 0x77, 0x65, 0x69, 0x62, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_84[]  = { 0x64, 0x77, 0x69, 0x73, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace BUGS {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



BUGSLexer::~BUGSLexer()
{
}

void
BUGSLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called BUGSLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pBUGSLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSLexer::BUGSLexer(StreamType* instream)
:BUGSLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called BUGSLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pBUGSLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSLexer::BUGSLexer(StreamType* instream, RecognizerSharedStateType* state)
:BUGSLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void BUGSLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in BUGSLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( ABSOPENBRACKET | ARCCOSHOPENBRACKET | ARCCOSOPENBRACKET | ARCSINHOPENBRACKET | ARCSINOPENBRACKET | ARCTANHOPENBRACKET | ARCTANOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | BINOMIALOPENBRACKET | CATEGORICALOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CHISQUAREDOPENBRACKET | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | COSHOPENBRACKET | COSOPENBRACKET | CUMULATIVEOPENBRACKET | CUTOPENBRACKET | DENSITYOPENBRACKET | DEVIANCEOPENBRACKET | DIRICHLET2OPENBRACKET | DIRICHLETOPENBRACKET | DIV | DOT | DOUBLEEXPONENTIALOPENBRACKET | EQUALSOPENBRACKET | EQUALTO | EXPONENTIALOPENBRACKET | EXPOPENBRACKET | FLATOPENBRACKET | FORSTART | GAMMAOPENBRACKET | GAMMAPOPENBRACKET | GENFOPENBRACKET | GENGAMMAOPENBRACKET | GENLOGLIKOPENBRACKET | GENPARETOOPENBRACKET | GEVOPENBRACKET | HASH | ICLOGLOGOPENBRACKET | ILOGITOPENBRACKET | IN | INPRODOPENBRACKET | INTEGRALOPENBRACKET | INVERSEOPENBRACKET | LEFTPOINTER | LOGFACTOPENBRACKET | LOGGAMOPENBRACKET | LOGISTICOPENBRACKET | LOGITOPENBRACKET | LOGNORMALOPENBRACKET | LOGOPENBRACKET | MAXOPENBRACKET | MEANOPENBRACKET | MINOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | MVNORMALOPENBRACKET | MVSTUDENTTOPENBRACKET | NCHGOPENBRACKET | NEGATIVEBINOMIALOPENBRACKET | NORMALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PARETOOPENBRACKET | PHIOPENBRACKET | PLUS | POISSONOPENBRACKET | POSTPVALUEOPENBRACKET | POWOPENBRACKET | PRIORPVALUEOPENBRACKET | PROBITOPENBRACKET | REPLICATEPOSTOPENBRACKET | REPLICATEPRIOROPENBRACKET | ROUNDOPENBRACKET | SDOPENBRACKET | SINHOPENBRACKET | SINOPENBRACKET | SOLUTIONOPENBRACKET | SQRTOPENBRACKET | STEPOPENBRACKET | STUDENTTOPENBRACKET | SUMOPENBRACKET | TANHOPENBRACKET | TANOPENBRACKET | TILDE | TRUNCATIONBEGIN | TRUNCOPENBRACKET | UNIFORMOPENBRACKET | WEIBULLOPENBRACKET | WISHARTOPENBRACKET | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE | NEWLINE );
 */
static const ANTLR_INT32 dfa22_eot[415] =
    {
	-1, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 59, 35, -1, 35, 35, -1, 
	35, -1, 35, 35, -1, -1, -1, 73, -1, 35, -1, 35, 35, 35, -1, 35, 88, -1, 
	-1, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	-1, -1, 35, 35, 35, -1, -1, 35, 35, 35, 35, 35, 35, 133, 35, 35, 35, 35, 
	35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	193, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, -1, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, -1, 35, -1, 35, -1, -1, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, -1, -1, 35, -1, 35, -1, 35, -1, 35, 35, 35, 35, 35, 
	-1, 35, 35, 35, -1, 35, -1, 35, 35, 35, 35, 35, 35, -1, -1, 35, 35, 35, 
	-1, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, 35, -1, 
	35, 35, 35, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, 
	321, 35, 35, 35, 35, 35, -1, 35, -1, -1, -1, 35, 35, 35, 35, -1, -1, 35, 
	35, 35, 35, 35, -1, -1, 35, 35, -1, 35, 35, 35, 35, 35, 35, 35, -1, -1, 
	-1, -1, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, 35, 35, 
	35, 35, -1, 35, -1, 35, -1, 35, -1, 35, -1, 35, 35, 35, -1, 35, -1, 35, 
	35, -1, -1, -1, -1, -1, 35, 35, 35, -1, -1, 35, -1, -1, 35, 35, 35, -1, 
	35, 35, -1, 35, 35, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, 35, 35, 
	35, -1, -1, 35, 35, 35, 35, -1, 35, -1, -1, 35, 35, 35, -1, 35, 35, 35, 
	35, -1, 35, 35, 35, 35, 35, 35, 35, -1, 35, 35, 35, -1, 35, 35, -1, 35, 
	-1
    };
static const ANTLR_INT32 dfa22_eof[415] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR_INT32 dfa22_min[415] =
    {
	9, 98, 98, 40, 40, 108, -1, -1, -1, -1, -1, -1, 48, 113, -1, 111, 97, -1, 
	99, -1, 111, 97, -1, -1, -1, 43, -1, 104, -1, 101, 100, 97, -1, 40, 46, 
	-1, -1, -1, 115, 99, 101, 97, 110, 101, 40, 97, 110, 110, 121, 101, 97, 
	40, 110, 101, -1, -1, 111, 115, 109, -1, -1, 117, 112, 114, 109, 108, 111, 
	46, 103, 120, 97, 110, 100, -1, 105, 115, 105, 112, 117, 40, 110, 108, 
	114, 101, 109, 110, 117, -1, -1, 40, 99, 114, 110, 116, 105, 115, 105, 
	112, 114, 120, 97, -1, 109, 97, 97, 118, 103, 111, 108, 111, 40, 112, 103, 
	114, 114, 105, -1, 105, 105, 115, 103, 40, 117, 40, 97, 40, 46, 109, 111, 
	103, 114, 101, 101, -1, 40, 40, 110, 40, 101, 40, 116, 40, 111, 98, 108, 
	110, -1, 40, 117, 116, 112, 40, 40, 110, -1, 111, 105, 97, 110, 97, 40, 
	40, 115, 105, 97, 40, 99, 112, 116, 109, 109, 114, 40, 105, 114, 116, 114, 
	-1, 101, 98, 109, 40, 115, 102, 98, 104, 108, 40, -1, 108, -1, 108, -1, 
	-1, 97, 103, 105, 111, 103, 114, 97, 97, 116, -1, -1, 40, -1, 108, -1, 
	46, -1, 114, 105, 105, 100, 40, -1, 116, 40, 40, -1, 40, -1, 99, 115, 110, 
	110, 40, 40, -1, -1, 113, 116, 110, -1, 104, 99, 40, 40, 97, 109, 40, -1, 
	105, 115, 109, 105, 109, 114, 105, 40, -1, 40, 40, 40, 40, 111, -1, 97, 
	115, 112, 108, 116, 100, 114, 115, 99, 109, 40, -1, 46, 112, 46, 116, 99, 
	40, -1, 105, -1, -1, -1, 40, 40, 40, 40, -1, -1, 114, 121, 99, 40, 104, 
	-1, -1, 40, 97, -1, 107, 40, 40, 40, 40, 40, 110, -1, -1, -1, -1, -1, 103, 
	116, 40, 40, 111, 40, 40, 97, 101, 116, 40, -1, -1, 46, 112, 40, 97, -1, 
	111, -1, 40, -1, 40, -1, 40, -1, 40, 40, 101, -1, 40, -1, 40, 40, -1, -1, 
	-1, -1, -1, 40, 40, 105, -1, -1, 103, -1, -1, 108, 40, 40, -1, 118, 46, 
	-1, 116, 110, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, 118, 40, 40, 
	-1, -1, 97, 118, 101, 40, -1, 101, -1, -1, 108, 97, 46, -1, 40, 117, 108, 
	112, -1, 101, 117, 111, 40, 101, 115, 105, -1, 40, 116, 111, -1, 40, 114, 
	-1, 40, -1
    };
static const ANTLR_INT32 dfa22_max[415] =
    {
	126, 114, 119, 40, 40, 117, -1, -1, -1, -1, -1, -1, 57, 120, -1, 111, 97, 
	-1, 110, -1, 111, 111, -1, -1, -1, 45, -1, 114, -1, 111, 117, 114, -1, 
	40, 69, -1, -1, -1, 115, 99, 105, 104, 120, 105, 108, 112, 111, 117, 121, 
	111, 111, 40, 110, 105, -1, -1, 111, 115, 116, -1, -1, 117, 112, 114, 109, 
	108, 111, 122, 103, 120, 97, 110, 100, -1, 105, 119, 111, 112, 117, 40, 
	110, 108, 114, 101, 109, 110, 117, -1, -1, 40, 116, 116, 110, 116, 105, 
	115, 105, 112, 114, 120, 97, -1, 109, 97, 97, 118, 103, 111, 108, 111, 
	40, 112, 103, 114, 114, 105, -1, 105, 105, 115, 103, 104, 117, 40, 97, 
	40, 122, 109, 111, 103, 114, 101, 101, -1, 105, 40, 110, 40, 101, 40, 116, 
	40, 111, 98, 108, 110, -1, 104, 117, 116, 112, 40, 104, 110, -1, 111, 105, 
	97, 110, 97, 40, 40, 115, 105, 97, 40, 105, 112, 116, 109, 109, 114, 40, 
	108, 114, 116, 114, -1, 101, 98, 109, 40, 115, 102, 98, 104, 108, 40, -1, 
	108, -1, 108, -1, -1, 97, 103, 105, 111, 103, 114, 97, 97, 116, -1, -1, 
	40, -1, 108, -1, 46, -1, 114, 105, 105, 100, 40, -1, 116, 40, 40, -1, 40, 
	-1, 99, 115, 110, 110, 40, 40, -1, -1, 113, 116, 110, -1, 104, 99, 40, 
	40, 97, 109, 40, -1, 105, 115, 109, 105, 109, 114, 105, 40, -1, 40, 40, 
	40, 40, 111, -1, 97, 115, 112, 108, 116, 100, 114, 115, 99, 109, 40, -1, 
	122, 112, 46, 116, 99, 40, -1, 105, -1, -1, -1, 40, 104, 104, 104, -1, 
	-1, 114, 121, 99, 40, 104, -1, -1, 40, 97, -1, 107, 40, 40, 40, 40, 40, 
	110, -1, -1, -1, -1, -1, 103, 116, 40, 40, 111, 40, 40, 97, 101, 116, 40, 
	-1, -1, 46, 112, 40, 97, -1, 111, -1, 40, -1, 40, -1, 40, -1, 40, 40, 101, 
	-1, 40, -1, 40, 40, -1, -1, -1, -1, -1, 40, 40, 105, -1, -1, 103, -1, -1, 
	108, 40, 40, -1, 118, 46, -1, 116, 110, -1, -1, -1, -1, -1, 40, -1, -1, 
	-1, -1, -1, 118, 40, 40, -1, -1, 97, 118, 101, 40, -1, 101, -1, -1, 108, 
	97, 46, -1, 40, 117, 108, 112, -1, 101, 117, 114, 40, 101, 115, 105, -1, 
	40, 116, 111, -1, 40, 114, -1, 40, -1
    };
static const ANTLR_INT32 dfa22_accept[415] =
    {
	-1, -1, -1, -1, -1, -1, 16, 17, 18, 19, 20, 29, -1, -1, 33, -1, -1, 45, 
	-1, 52, -1, -1, 62, 64, 71, -1, 73, -1, 76, -1, -1, -1, 95, -1, -1, 102, 
	104, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	12, 13, -1, -1, -1, 30, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, 101, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 85, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 24, -1, 35, 37, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 58, 59, -1, 61, -1, 75, -1, 79, -1, -1, -1, -1, -1, 
	87, -1, -1, -1, 92, -1, 94, -1, -1, -1, -1, -1, -1, 10, 11, -1, -1, -1, 
	34, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 74, 
	-1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 
	-1, -1, -1, -1, -1, -1, 86, -1, 89, 90, 93, -1, -1, -1, -1, 8, 9, -1, -1, 
	-1, -1, -1, 31, 36, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 70, 77, 98, 
	99, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 63, -1, -1, -1, 
	-1, 84, -1, 97, -1, 3, -1, 5, -1, 7, -1, -1, -1, 27, -1, 38, -1, -1, 55, 
	57, 65, 66, 68, -1, -1, -1, 32, 39, -1, 47, 49, -1, -1, -1, 54, -1, -1, 
	81, -1, -1, 2, 4, 6, 14, 25, -1, 28, 41, 42, 69, 15, -1, -1, -1, 51, 53, 
	-1, -1, -1, -1, 26, -1, 46, 50, -1, -1, -1, 88, -1, -1, -1, -1, 23, -1, 
	-1, -1, -1, -1, -1, -1, 78, -1, -1, -1, 80, -1, -1, 82, -1, 83
    };
static const ANTLR_INT32 dfa22_special[415] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa22_T_empty	 =   NULL;

static const ANTLR_INT32 dfa22_T0[] =
    {
	118, -1, -1, -1, 119
    };

static const ANTLR_INT32 dfa22_T1[] =
    {
	102, -1, -1, -1, 105, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, 104
    };

static const ANTLR_INT32 dfa22_T2[] =
    {
	35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 
	-1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 130, 35, 35, 35, 131, 35, 
	132, 35, 35, 35, 35
    };

static const ANTLR_INT32 dfa22_T3[] =
    {
	109, -1, -1, -1, -1, -1, 110, 108
    };

static const ANTLR_INT32 dfa22_T4[] =
    {
	95, -1, -1, -1, -1, -1, -1, -1, 96, -1, 97
    };

static const ANTLR_INT32 dfa22_T5[] =
    {
	244, -1, -1, 243
    };

static const ANTLR_INT32 dfa22_T6[] =
    {
	173
    };

static const ANTLR_INT32 dfa22_T7[] =
    {
	87
    };

static const ANTLR_INT32 dfa22_T8[] =
    {
	79, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, 81, -1, 82, -1, -1, 83, 84
    };

static const ANTLR_INT32 dfa22_T9[] =
    {
	54
    };

static const ANTLR_INT32 dfa22_T10[] =
    {
	55
    };

static const ANTLR_INT32 dfa22_T11[] =
    {
	40, 41, 43, 42, 44, 45, 48, -1, -1, -1, 46, 47, 49, -1, 50, -1, -1, -1, 
	51, 52, -1, 53
    };

static const ANTLR_INT32 dfa22_T12[] =
    {
	99, -1, -1, -1, 98
    };

static const ANTLR_INT32 dfa22_T13[] =
    {
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60
    };

static const ANTLR_INT32 dfa22_T14[] =
    {
	60, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 60
    };

static const ANTLR_INT32 dfa22_T15[] =
    {
	60, -1, 60
    };

static const ANTLR_INT32 dfa22_T16[] =
    {
	155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 156, 157
    };

static const ANTLR_INT32 dfa22_T17[] =
    {
	90
    };

static const ANTLR_INT32 dfa22_T18[] =
    {
	74, -1, -1, -1, -1, -1, -1, 75, -1, -1, 76
    };

static const ANTLR_INT32 dfa22_T19[] =
    {
	35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 
	-1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35
    };

static const ANTLR_INT32 dfa22_T20[] =
    {
	315
    };

static const ANTLR_INT32 dfa22_T21[] =
    {
	355
    };

static const ANTLR_INT32 dfa22_T22[] =
    {
	197
    };

static const ANTLR_INT32 dfa22_T23[] =
    {
	263
    };

static const ANTLR_INT32 dfa22_T24[] =
    {
	165
    };

static const ANTLR_INT32 dfa22_T25[] =
    {
	234
    };

static const ANTLR_INT32 dfa22_T26[] =
    {
	316
    };

static const ANTLR_INT32 dfa22_T27[] =
    {
	125
    };

static const ANTLR_INT32 dfa22_T28[] =
    {
	356
    };

static const ANTLR_INT32 dfa22_T29[] =
    {
	198
    };

static const ANTLR_INT32 dfa22_T30[] =
    {
	112, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113
    };

static const ANTLR_INT32 dfa22_T31[] =
    {
	264
    };

static const ANTLR_INT32 dfa22_T32[] =
    {
	192
    };

static const ANTLR_INT32 dfa22_T33[] =
    {
	168
    };

static const ANTLR_INT32 dfa22_T34[] =
    {
	225
    };

static const ANTLR_INT32 dfa22_T35[] =
    {
	293
    };

static const ANTLR_INT32 dfa22_T36[] =
    {
	388
    };

static const ANTLR_INT32 dfa22_T37[] =
    {
	238
    };

static const ANTLR_INT32 dfa22_T38[] =
    {
	378
    };

static const ANTLR_INT32 dfa22_T39[] =
    {
	126
    };

static const ANTLR_INT32 dfa22_T40[] =
    {
	332, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 331
    };

static const ANTLR_INT32 dfa22_T41[] =
    {
	283
    };

static const ANTLR_INT32 dfa22_T42[] =
    {
	379
    };

static const ANTLR_INT32 dfa22_T43[] =
    {
	357
    };

static const ANTLR_INT32 dfa22_T44[] =
    {
	317
    };

static const ANTLR_INT32 dfa22_T45[] =
    {
	265
    };

static const ANTLR_INT32 dfa22_T46[] =
    {
	199
    };

static const ANTLR_INT32 dfa22_T47[] =
    {
	169
    };

static const ANTLR_INT32 dfa22_T48[] =
    {
	239
    };

static const ANTLR_INT32 dfa22_T49[] =
    {
	294
    };

static const ANTLR_INT32 dfa22_T50[] =
    {
	93, -1, -1, -1, -1, -1, -1, 94
    };

static const ANTLR_INT32 dfa22_T51[] =
    {
	340
    };

static const ANTLR_INT32 dfa22_T52[] =
    {
	69, -1, -1, -1, 70, -1, -1, -1, 71, -1, -1, -1, -1, -1, 72
    };

static const ANTLR_INT32 dfa22_T53[] =
    {
	380
    };

static const ANTLR_INT32 dfa22_T54[] =
    {
	127
    };

static const ANTLR_INT32 dfa22_T55[] =
    {
	194
    };

static const ANTLR_INT32 dfa22_T56[] =
    {
	260
    };

static const ANTLR_INT32 dfa22_T57[] =
    {
	266
    };

static const ANTLR_INT32 dfa22_T58[] =
    {
	312
    };

static const ANTLR_INT32 dfa22_T59[] =
    {
	318
    };

static const ANTLR_INT32 dfa22_T60[] =
    {
	352
    };

static const ANTLR_INT32 dfa22_T61[] =
    {
	358
    };

static const ANTLR_INT32 dfa22_T62[] =
    {
	319
    };

static const ANTLR_INT32 dfa22_T63[] =
    {
	267
    };

static const ANTLR_INT32 dfa22_T64[] =
    {
	359
    };

static const ANTLR_INT32 dfa22_T65[] =
    {
	298
    };

static const ANTLR_INT32 dfa22_T66[] =
    {
	240
    };

static const ANTLR_INT32 dfa22_T67[] =
    {
	170
    };

static const ANTLR_INT32 dfa22_T68[] =
    {
	341
    };

static const ANTLR_INT32 dfa22_T69[] =
    {
	295
    };

static const ANTLR_INT32 dfa22_T70[] =
    {
	284
    };

static const ANTLR_INT32 dfa22_T71[] =
    {
	289
    };

static const ANTLR_INT32 dfa22_T72[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39
    };

static const ANTLR_INT32 dfa22_T73[] =
    {
	337
    };

static const ANTLR_INT32 dfa22_T74[] =
    {
	226
    };

static const ANTLR_INT32 dfa22_T75[] =
    {
	164
    };

static const ANTLR_INT32 dfa22_T76[] =
    {
	372
    };

static const ANTLR_INT32 dfa22_T77[] =
    {
	233
    };

static const ANTLR_INT32 dfa22_T78[] =
    {
	114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115
    };

static const ANTLR_INT32 dfa22_T79[] =
    {
	334, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 333
    };

static const ANTLR_INT32 dfa22_T80[] =
    {
	342
    };

static const ANTLR_INT32 dfa22_T81[] =
    {
	373
    };

static const ANTLR_INT32 dfa22_T82[] =
    {
	297
    };

static const ANTLR_INT32 dfa22_T83[] =
    {
	370
    };

static const ANTLR_INT32 dfa22_T84[] =
    {
	385
    };

static const ANTLR_INT32 dfa22_T85[] =
    {
	241
    };

static const ANTLR_INT32 dfa22_T86[] =
    {
	171
    };

static const ANTLR_INT32 dfa22_T87[] =
    {
	338
    };

static const ANTLR_INT32 dfa22_T88[] =
    {
	290
    };

static const ANTLR_INT32 dfa22_T89[] =
    {
	296
    };

static const ANTLR_INT32 dfa22_T90[] =
    {
	172
    };

static const ANTLR_INT32 dfa22_T91[] =
    {
	371
    };

static const ANTLR_INT32 dfa22_T92[] =
    {
	339
    };

static const ANTLR_INT32 dfa22_T93[] =
    {
	291
    };

static const ANTLR_INT32 dfa22_T94[] =
    {
	242
    };

static const ANTLR_INT32 dfa22_T95[] =
    {
	128
    };

static const ANTLR_INT32 dfa22_T96[] =
    {
	158, -1, 159
    };

static const ANTLR_INT32 dfa22_T97[] =
    {
	195
    };

static const ANTLR_INT32 dfa22_T98[] =
    {
	224
    };

static const ANTLR_INT32 dfa22_T99[] =
    {
	261
    };

static const ANTLR_INT32 dfa22_T100[] =
    {
	167
    };

static const ANTLR_INT32 dfa22_T101[] =
    {
	313
    };

static const ANTLR_INT32 dfa22_T102[] =
    {
	237
    };

static const ANTLR_INT32 dfa22_T103[] =
    {
	282
    };

static const ANTLR_INT32 dfa22_T104[] =
    {
	353
    };

static const ANTLR_INT32 dfa22_T105[] =
    {
	292
    };

static const ANTLR_INT32 dfa22_T106[] =
    {
	377
    };

static const ANTLR_INT32 dfa22_T107[] =
    {
	387
    };

static const ANTLR_INT32 dfa22_T108[] =
    {
	124
    };

static const ANTLR_INT32 dfa22_T109[] =
    {
	140, -1, -1, -1, 141
    };

static const ANTLR_INT32 dfa22_T110[] =
    {
	259
    };

static const ANTLR_INT32 dfa22_T111[] =
    {
	196
    };

static const ANTLR_INT32 dfa22_T112[] =
    {
	191
    };

static const ANTLR_INT32 dfa22_T113[] =
    {
	129
    };

static const ANTLR_INT32 dfa22_T114[] =
    {
	314
    };

static const ANTLR_INT32 dfa22_T115[] =
    {
	262
    };

static const ANTLR_INT32 dfa22_T116[] =
    {
	330, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 329
    };

static const ANTLR_INT32 dfa22_T117[] =
    {
	354
    };

static const ANTLR_INT32 dfa22_T118[] =
    {
	351
    };

static const ANTLR_INT32 dfa22_T119[] =
    {
	311
    };

static const ANTLR_INT32 dfa22_T120[] =
    {
	121
    };

static const ANTLR_INT32 dfa22_T121[] =
    {
	85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86
    };

static const ANTLR_INT32 dfa22_T122[] =
    {
	134
    };

static const ANTLR_INT32 dfa22_T123[] =
    {
	345
    };

static const ANTLR_INT32 dfa22_T124[] =
    {
	300
    };

static const ANTLR_INT32 dfa22_T125[] =
    {
	246
    };

static const ANTLR_INT32 dfa22_T126[] =
    {
	175
    };

static const ANTLR_INT32 dfa22_T127[] =
    {
	203, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 200, 201, -1, 202
    };

static const ANTLR_INT32 dfa22_T128[] =
    {
	177
    };

static const ANTLR_INT32 dfa22_T129[] =
    {
	346
    };

static const ANTLR_INT32 dfa22_T130[] =
    {
	257
    };

static const ANTLR_INT32 dfa22_T131[] =
    {
	247
    };

static const ANTLR_INT32 dfa22_T132[] =
    {
	301
    };

static const ANTLR_INT32 dfa22_T133[] =
    {
	188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187
    };

static const ANTLR_INT32 dfa22_T134[] =
    {
	176
    };

static const ANTLR_INT32 dfa22_T135[] =
    {
	249
    };

static const ANTLR_INT32 dfa22_T136[] =
    {
	386
    };

static const ANTLR_INT32 dfa22_T137[] =
    {
	179
    };

static const ANTLR_INT32 dfa22_T138[] =
    {
	376
    };

static const ANTLR_INT32 dfa22_T139[] =
    {
	397
    };

static const ANTLR_INT32 dfa22_T140[] =
    {
	348
    };

static const ANTLR_INT32 dfa22_T141[] =
    {
	393
    };

static const ANTLR_INT32 dfa22_T142[] =
    {
	303
    };

static const ANTLR_INT32 dfa22_T143[] =
    {
	347
    };

static const ANTLR_INT32 dfa22_T144[] =
    {
	302
    };

static const ANTLR_INT32 dfa22_T145[] =
    {
	258
    };

static const ANTLR_INT32 dfa22_T146[] =
    {
	111
    };

static const ANTLR_INT32 dfa22_T147[] =
    {
	189
    };

static const ANTLR_INT32 dfa22_T148[] =
    {
	142, -1, -1, -1, -1, -1, 143
    };

static const ANTLR_INT32 dfa22_T149[] =
    {
	248
    };

static const ANTLR_INT32 dfa22_T150[] =
    {
	350
    };

static const ANTLR_INT32 dfa22_T151[] =
    {
	178
    };

static const ANTLR_INT32 dfa22_T152[] =
    {
	310
    };

static const ANTLR_INT32 dfa22_T153[] =
    {
	163
    };

static const ANTLR_INT32 dfa22_T154[] =
    {
	232
    };

static const ANTLR_INT32 dfa22_T155[] =
    {
	288
    };

static const ANTLR_INT32 dfa22_T156[] =
    {
	250
    };

static const ANTLR_INT32 dfa22_T157[] =
    {
	336
    };

static const ANTLR_INT32 dfa22_T158[] =
    {
	304
    };

static const ANTLR_INT32 dfa22_T159[] =
    {
	369
    };

static const ANTLR_INT32 dfa22_T160[] =
    {
	190
    };

static const ANTLR_INT32 dfa22_T161[] =
    {
	180
    };

static const ANTLR_INT32 dfa22_T162[] =
    {
	374
    };

static const ANTLR_INT32 dfa22_T163[] =
    {
	122, -1, -1, -1, -1, -1, -1, 123
    };

static const ANTLR_INT32 dfa22_T164[] =
    {
	320
    };

static const ANTLR_INT32 dfa22_T165[] =
    {
	268
    };

static const ANTLR_INT32 dfa22_T166[] =
    {
	286
    };

static const ANTLR_INT32 dfa22_T167[] =
    {
	228
    };

static const ANTLR_INT32 dfa22_T168[] =
    {
	343
    };

static const ANTLR_INT32 dfa22_T169[] =
    {
	36, 37, -1, 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 36, -1, -1, 17, -1, -1, -1, -1, 25, 7, 23, 28, 10, 
	22, 12, 11, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 9, 36, 19, 14, -1, 
	-1, -1, 35, 35, 3, 35, 35, 35, 35, 35, 4, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 33, 35, 35, 35, 35, 35, 35, 26, -1, 8, -1, -1, -1, 1, 35, 5, 2, 
	13, 15, 16, 35, 18, 35, 35, 20, 21, 35, 35, 27, 35, 29, 30, 31, 35, 35, 
	35, 35, 35, 35, 24, -1, 6, 32
    };

static const ANTLR_INT32 dfa22_T170[] =
    {
	285
    };

static const ANTLR_INT32 dfa22_T171[] =
    {
	227
    };

static const ANTLR_INT32 dfa22_T172[] =
    {
	230
    };

static const ANTLR_INT32 dfa22_T173[] =
    {
	161
    };

static const ANTLR_INT32 dfa22_T174[] =
    {
	299
    };

static const ANTLR_INT32 dfa22_T175[] =
    {
	344
    };

static const ANTLR_INT32 dfa22_T176[] =
    {
	174
    };

static const ANTLR_INT32 dfa22_T177[] =
    {
	245
    };

static const ANTLR_INT32 dfa22_T178[] =
    {
	229
    };

static const ANTLR_INT32 dfa22_T179[] =
    {
	160
    };

static const ANTLR_INT32 dfa22_T180[] =
    {
	213
    };

static const ANTLR_INT32 dfa22_T181[] =
    {
	269
    };

static const ANTLR_INT32 dfa22_T182[] =
    {
	287
    };

static const ANTLR_INT32 dfa22_T183[] =
    {
	231
    };

static const ANTLR_INT32 dfa22_T184[] =
    {
	205
    };

static const ANTLR_INT32 dfa22_T185[] =
    {
	274
    };

static const ANTLR_INT32 dfa22_T186[] =
    {
	368
    };

static const ANTLR_INT32 dfa22_T187[] =
    {
	335
    };

static const ANTLR_INT32 dfa22_T188[] =
    {
	137
    };

static const ANTLR_INT32 dfa22_T189[] =
    {
	144
    };

static const ANTLR_INT32 dfa22_T190[] =
    {
	162
    };

static const ANTLR_INT32 dfa22_T191[] =
    {
	204
    };

static const ANTLR_INT32 dfa22_T192[] =
    {
	383
    };

static const ANTLR_INT32 dfa22_T193[] =
    {
	135
    };

static const ANTLR_INT32 dfa22_T194[] =
    {
	391
    };

static const ANTLR_INT32 dfa22_T195[] =
    {
	64
    };

static const ANTLR_INT32 dfa22_T196[] =
    {
	325
    };

static const ANTLR_INT32 dfa22_T197[] =
    {
	136
    };

static const ANTLR_INT32 dfa22_T198[] =
    {
	363
    };

static const ANTLR_INT32 dfa22_T199[] =
    {
	403, -1, -1, 404
    };

static const ANTLR_INT32 dfa22_T200[] =
    {
	138
    };

static const ANTLR_INT32 dfa22_T201[] =
    {
	207
    };

static const ANTLR_INT32 dfa22_T202[] =
    {
	270
    };

static const ANTLR_INT32 dfa22_T203[] =
    {
	309
    };

static const ANTLR_INT32 dfa22_T204[] =
    {
	396
    };

static const ANTLR_INT32 dfa22_T205[] =
    {
	349
    };

static const ANTLR_INT32 dfa22_T206[] =
    {
	375
    };

static const ANTLR_INT32 dfa22_T207[] =
    {
	400
    };

static const ANTLR_INT32 dfa22_T208[] =
    {
	206
    };

static const ANTLR_INT32 dfa22_T209[] =
    {
	120
    };

static const ANTLR_INT32 dfa22_T210[] =
    {
	186
    };

static const ANTLR_INT32 dfa22_T211[] =
    {
	256
    };

static const ANTLR_INT32 dfa22_T212[] =
    {
	63
    };

static const ANTLR_INT32 dfa22_T213[] =
    {
	56, -1, -1, 57, -1, -1, -1, -1, -1, 58
    };

static const ANTLR_INT32 dfa22_T214[] =
    {
	273
    };

static const ANTLR_INT32 dfa22_T215[] =
    {
	212
    };

static const ANTLR_INT32 dfa22_T216[] =
    {
	91, -1, -1, -1, 92
    };

static const ANTLR_INT32 dfa22_T217[] =
    {
	362
    };

static const ANTLR_INT32 dfa22_T218[] =
    {
	324
    };

static const ANTLR_INT32 dfa22_T219[] =
    {
	366
    };

static const ANTLR_INT32 dfa22_T220[] =
    {
	390
    };

static const ANTLR_INT32 dfa22_T221[] =
    {
	395
    };

static const ANTLR_INT32 dfa22_T222[] =
    {
	399
    };

static const ANTLR_INT32 dfa22_T223[] =
    {
	402
    };

static const ANTLR_INT32 dfa22_T224[] =
    {
	272
    };

static const ANTLR_INT32 dfa22_T225[] =
    {
	365
    };

static const ANTLR_INT32 dfa22_T226[] =
    {
	323
    };

static const ANTLR_INT32 dfa22_T227[] =
    {
	361
    };

static const ANTLR_INT32 dfa22_T228[] =
    {
	382
    };

static const ANTLR_INT32 dfa22_T229[] =
    {
	406
    };

static const ANTLR_INT32 dfa22_T230[] =
    {
	409
    };

static const ANTLR_INT32 dfa22_T231[] =
    {
	166
    };

static const ANTLR_INT32 dfa22_T232[] =
    {
	235, -1, -1, -1, -1, -1, 236
    };

static const ANTLR_INT32 dfa22_T233[] =
    {
	413
    };

static const ANTLR_INT32 dfa22_T234[] =
    {
	411
    };

static const ANTLR_INT32 dfa22_T235[] =
    {
	408
    };

static const ANTLR_INT32 dfa22_T236[] =
    {
	214
    };

static const ANTLR_INT32 dfa22_T237[] =
    {
	145
    };

static const ANTLR_INT32 dfa22_T238[] =
    {
	414
    };

static const ANTLR_INT32 dfa22_T239[] =
    {
	410
    };

static const ANTLR_INT32 dfa22_T240[] =
    {
	412
    };

static const ANTLR_INT32 dfa22_T241[] =
    {
	407
    };

static const ANTLR_INT32 dfa22_T242[] =
    {
	367
    };

static const ANTLR_INT32 dfa22_T243[] =
    {
	61, -1, -1, -1, -1, -1, -1, 62
    };

static const ANTLR_INT32 dfa22_T244[] =
    {
	139
    };

static const ANTLR_INT32 dfa22_T245[] =
    {
	208
    };

static const ANTLR_INT32 dfa22_T246[] =
    {
	182
    };

static const ANTLR_INT32 dfa22_T247[] =
    {
	107, 106
    };

static const ANTLR_INT32 dfa22_T248[] =
    {
	181
    };

static const ANTLR_INT32 dfa22_T249[] =
    {
	251
    };

static const ANTLR_INT32 dfa22_T250[] =
    {
	147
    };

static const ANTLR_INT32 dfa22_T251[] =
    {
	216, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215
    };

static const ANTLR_INT32 dfa22_T252[] =
    {
	405
    };

static const ANTLR_INT32 dfa22_T253[] =
    {
	401
    };

static const ANTLR_INT32 dfa22_T254[] =
    {
	210
    };

static const ANTLR_INT32 dfa22_T255[] =
    {
	211
    };

static const ANTLR_INT32 dfa22_T256[] =
    {
	154
    };

static const ANTLR_INT32 dfa22_T257[] =
    {
	89
    };

static const ANTLR_INT32 dfa22_T258[] =
    {
	65, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, 67
    };

static const ANTLR_INT32 dfa22_T259[] =
    {
	252
    };

static const ANTLR_INT32 dfa22_T260[] =
    {
	305
    };

static const ANTLR_INT32 dfa22_T261[] =
    {
	322
    };

static const ANTLR_INT32 dfa22_T262[] =
    {
	360
    };

static const ANTLR_INT32 dfa22_T263[] =
    {
	209
    };

static const ANTLR_INT32 dfa22_T264[] =
    {
	271
    };

static const ANTLR_INT32 dfa22_T265[] =
    {
	394
    };

static const ANTLR_INT32 dfa22_T266[] =
    {
	398
    };

static const ANTLR_INT32 dfa22_T267[] =
    {
	381
    };

static const ANTLR_INT32 dfa22_T268[] =
    {
	389
    };

static const ANTLR_INT32 dfa22_T269[] =
    {
	153
    };

static const ANTLR_INT32 dfa22_T270[] =
    {
	223
    };

static const ANTLR_INT32 dfa22_T271[] =
    {
	281
    };

static const ANTLR_INT32 dfa22_T272[] =
    {
	280
    };

static const ANTLR_INT32 dfa22_T273[] =
    {
	222, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221
    };

static const ANTLR_INT32 dfa22_T274[] =
    {
	152
    };

static const ANTLR_INT32 dfa22_T275[] =
    {
	255
    };

static const ANTLR_INT32 dfa22_T276[] =
    {
	308
    };

static const ANTLR_INT32 dfa22_T277[] =
    {
	185
    };

static const ANTLR_INT32 dfa22_T278[] =
    {
	307
    };

static const ANTLR_INT32 dfa22_T279[] =
    {
	184
    };

static const ANTLR_INT32 dfa22_T280[] =
    {
	254
    };

static const ANTLR_INT32 dfa22_T281[] =
    {
	306
    };

static const ANTLR_INT32 dfa22_T282[] =
    {
	253
    };

static const ANTLR_INT32 dfa22_T283[] =
    {
	183
    };

static const ANTLR_INT32 dfa22_T284[] =
    {
	101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100
    };

static const ANTLR_INT32 dfa22_T285[] =
    {
	117
    };

static const ANTLR_INT32 dfa22_T286[] =
    {
	77, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78
    };

static const ANTLR_INT32 dfa22_T287[] =
    {
	328
    };

static const ANTLR_INT32 dfa22_T288[] =
    {
	148
    };

static const ANTLR_INT32 dfa22_T289[] =
    {
	217
    };

static const ANTLR_INT32 dfa22_T290[] =
    {
	277
    };

static const ANTLR_INT32 dfa22_T291[] =
    {
	327
    };

static const ANTLR_INT32 dfa22_T292[] =
    {
	68
    };

static const ANTLR_INT32 dfa22_T293[] =
    {
	276
    };

static const ANTLR_INT32 dfa22_T294[] =
    {
	326
    };

static const ANTLR_INT32 dfa22_T295[] =
    {
	275
    };

static const ANTLR_INT32 dfa22_T296[] =
    {
	146
    };

static const ANTLR_INT32 dfa22_T297[] =
    {
	116
    };

static const ANTLR_INT32 dfa22_T298[] =
    {
	151
    };

static const ANTLR_INT32 dfa22_T299[] =
    {
	220
    };

static const ANTLR_INT32 dfa22_T300[] =
    {
	279
    };

static const ANTLR_INT32 dfa22_T301[] =
    {
	150
    };

static const ANTLR_INT32 dfa22_T302[] =
    {
	219
    };

static const ANTLR_INT32 dfa22_T303[] =
    {
	278
    };

static const ANTLR_INT32 dfa22_T304[] =
    {
	218
    };

static const ANTLR_INT32 dfa22_T305[] =
    {
	149
    };

static const ANTLR_INT32 dfa22_T306[] =
    {
	392
    };

static const ANTLR_INT32 dfa22_T307[] =
    {
	384
    };

static const ANTLR_INT32 dfa22_T308[] =
    {
	364
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa22_transitions[] =
{
    dfa22_T169, dfa22_T72, dfa22_T11, dfa22_T9, dfa22_T10, dfa22_T213, NULL, 
    NULL, NULL, NULL, NULL, NULL, dfa22_T13, dfa22_T243, NULL, dfa22_T212, 
    dfa22_T195, NULL, dfa22_T258, NULL, dfa22_T292, dfa22_T52, NULL, NULL, 
    NULL, dfa22_T15, NULL, dfa22_T18, NULL, dfa22_T286, dfa22_T8, dfa22_T121, 
    NULL, dfa22_T7, dfa22_T14, NULL, NULL, NULL, dfa22_T257, dfa22_T17, 
    dfa22_T216, dfa22_T50, dfa22_T4, dfa22_T12, dfa22_T284, dfa22_T1, dfa22_T247, 
    dfa22_T3, dfa22_T146, dfa22_T30, dfa22_T78, dfa22_T297, dfa22_T285, 
    dfa22_T0, NULL, NULL, dfa22_T209, dfa22_T120, dfa22_T163, NULL, NULL, 
    dfa22_T108, dfa22_T27, dfa22_T39, dfa22_T54, dfa22_T95, dfa22_T113, 
    dfa22_T2, dfa22_T122, dfa22_T193, dfa22_T197, dfa22_T188, dfa22_T200, 
    NULL, dfa22_T244, dfa22_T109, dfa22_T148, dfa22_T189, dfa22_T237, dfa22_T296, 
    dfa22_T250, dfa22_T288, dfa22_T305, dfa22_T301, dfa22_T298, dfa22_T274, 
    dfa22_T269, NULL, NULL, dfa22_T256, dfa22_T16, dfa22_T96, dfa22_T179, 
    dfa22_T173, dfa22_T190, dfa22_T153, dfa22_T75, dfa22_T24, dfa22_T231, 
    dfa22_T100, dfa22_T33, NULL, dfa22_T47, dfa22_T67, dfa22_T86, dfa22_T90, 
    dfa22_T6, dfa22_T176, dfa22_T126, dfa22_T134, dfa22_T128, dfa22_T151, 
    dfa22_T137, dfa22_T161, dfa22_T248, dfa22_T246, NULL, dfa22_T283, dfa22_T279, 
    dfa22_T277, dfa22_T210, dfa22_T133, dfa22_T147, dfa22_T160, dfa22_T112, 
    dfa22_T32, dfa22_T19, dfa22_T55, dfa22_T97, dfa22_T111, dfa22_T22, dfa22_T29, 
    dfa22_T46, NULL, dfa22_T127, dfa22_T191, dfa22_T184, dfa22_T208, dfa22_T201, 
    dfa22_T245, dfa22_T263, dfa22_T254, dfa22_T255, dfa22_T215, dfa22_T180, 
    dfa22_T236, NULL, dfa22_T251, dfa22_T289, dfa22_T304, dfa22_T302, dfa22_T299, 
    dfa22_T273, dfa22_T270, NULL, dfa22_T98, dfa22_T34, dfa22_T74, dfa22_T171, 
    dfa22_T167, dfa22_T178, dfa22_T172, dfa22_T183, dfa22_T154, dfa22_T77, 
    dfa22_T25, dfa22_T232, dfa22_T102, dfa22_T37, dfa22_T48, dfa22_T66, 
    dfa22_T85, dfa22_T94, dfa22_T5, dfa22_T177, dfa22_T125, dfa22_T131, 
    NULL, dfa22_T149, dfa22_T135, dfa22_T156, dfa22_T249, dfa22_T259, dfa22_T282, 
    dfa22_T280, dfa22_T275, dfa22_T211, dfa22_T130, NULL, dfa22_T145, NULL, 
    dfa22_T110, NULL, NULL, dfa22_T56, dfa22_T99, dfa22_T115, dfa22_T23, 
    dfa22_T31, dfa22_T45, dfa22_T57, dfa22_T63, dfa22_T165, NULL, NULL, 
    dfa22_T181, NULL, dfa22_T202, NULL, dfa22_T264, NULL, dfa22_T224, dfa22_T214, 
    dfa22_T185, dfa22_T295, dfa22_T293, NULL, dfa22_T290, dfa22_T303, dfa22_T300, 
    NULL, dfa22_T272, NULL, dfa22_T271, dfa22_T103, dfa22_T41, dfa22_T70, 
    dfa22_T170, dfa22_T166, NULL, NULL, dfa22_T182, dfa22_T155, dfa22_T71, 
    NULL, dfa22_T88, dfa22_T93, dfa22_T105, dfa22_T35, dfa22_T49, dfa22_T69, 
    dfa22_T89, NULL, dfa22_T82, dfa22_T65, dfa22_T174, dfa22_T124, dfa22_T132, 
    dfa22_T144, dfa22_T142, dfa22_T158, NULL, dfa22_T260, dfa22_T281, dfa22_T278, 
    dfa22_T276, dfa22_T203, NULL, dfa22_T152, dfa22_T119, dfa22_T58, dfa22_T101, 
    dfa22_T114, dfa22_T20, dfa22_T26, dfa22_T44, dfa22_T59, dfa22_T62, dfa22_T164, 
    NULL, dfa22_T19, dfa22_T261, dfa22_T226, dfa22_T218, dfa22_T196, dfa22_T294, 
    NULL, dfa22_T291, NULL, NULL, NULL, dfa22_T287, dfa22_T116, dfa22_T40, 
    dfa22_T79, NULL, NULL, dfa22_T187, dfa22_T157, dfa22_T73, dfa22_T87, 
    dfa22_T92, NULL, NULL, dfa22_T51, dfa22_T68, NULL, dfa22_T80, dfa22_T168, 
    dfa22_T175, dfa22_T123, dfa22_T129, dfa22_T143, dfa22_T140, NULL, NULL, 
    NULL, NULL, NULL, dfa22_T205, dfa22_T150, dfa22_T118, dfa22_T60, dfa22_T104, 
    dfa22_T117, dfa22_T21, dfa22_T28, dfa22_T43, dfa22_T61, dfa22_T64, NULL, 
    NULL, dfa22_T262, dfa22_T227, dfa22_T217, dfa22_T198, NULL, dfa22_T308, 
    NULL, dfa22_T225, NULL, dfa22_T219, NULL, dfa22_T242, NULL, dfa22_T186, 
    dfa22_T159, dfa22_T83, NULL, dfa22_T91, NULL, dfa22_T76, dfa22_T81, 
    NULL, NULL, NULL, NULL, NULL, dfa22_T162, dfa22_T206, dfa22_T138, NULL, 
    NULL, dfa22_T106, NULL, NULL, dfa22_T38, dfa22_T42, dfa22_T53, NULL, 
    dfa22_T267, dfa22_T228, NULL, dfa22_T192, dfa22_T307, NULL, NULL, NULL, 
    NULL, NULL, dfa22_T84, NULL, NULL, NULL, NULL, NULL, dfa22_T136, dfa22_T107, 
    dfa22_T36, NULL, NULL, dfa22_T268, dfa22_T220, dfa22_T194, dfa22_T306, 
    NULL, dfa22_T141, NULL, NULL, dfa22_T265, dfa22_T221, dfa22_T204, NULL, 
    dfa22_T139, dfa22_T266, dfa22_T222, dfa22_T207, NULL, dfa22_T253, dfa22_T223, 
    dfa22_T199, dfa22_T252, dfa22_T229, dfa22_T241, dfa22_T235, NULL, dfa22_T230, 
    dfa22_T239, dfa22_T234, NULL, dfa22_T240, dfa22_T233, NULL, dfa22_T238, 
    NULL
};


/* Declare tracking structure for Cyclic DFA 22
 */
class BUGSLexerCyclicDFA22 : public CyclicDFA< BUGSLexerImplTraits, BUGSLexer >, public BUGSLexerTokens
{
public:
	typedef CyclicDFA< BUGSLexerImplTraits, BUGSLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	BUGSLexerCyclicDFA22( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static BUGSLexerCyclicDFA22  cdfa22(
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( ABSOPENBRACKET | ARCCOSHOPENBRACKET | ARCCOSOPENBRACKET | ARCSINHOPENBRACKET | ARCSINOPENBRACKET | ARCTANHOPENBRACKET | ARCTANOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | BINOMIALOPENBRACKET | CATEGORICALOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CHISQUAREDOPENBRACKET | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | COSHOPENBRACKET | COSOPENBRACKET | CUMULATIVEOPENBRACKET | CUTOPENBRACKET | DENSITYOPENBRACKET | DEVIANCEOPENBRACKET | DIRICHLET2OPENBRACKET | DIRICHLETOPENBRACKET | DIV | DOT | DOUBLEEXPONENTIALOPENBRACKET | EQUALSOPENBRACKET | EQUALTO | EXPONENTIALOPENBRACKET | EXPOPENBRACKET | FLATOPENBRACKET | FORSTART | GAMMAOPENBRACKET | GAMMAPOPENBRACKET | GENFOPENBRACKET | GENGAMMAOPENBRACKET | GENLOGLIKOPENBRACKET | GENPARETOOPENBRACKET | GEVOPENBRACKET | HASH | ICLOGLOGOPENBRACKET | ILOGITOPENBRACKET | IN | INPRODOPENBRACKET | INTEGRALOPENBRACKET | INVERSEOPENBRACKET | LEFTPOINTER | LOGFACTOPENBRACKET | LOGGAMOPENBRACKET | LOGISTICOPENBRACKET | LOGITOPENBRACKET | LOGNORMALOPENBRACKET | LOGOPENBRACKET | MAXOPENBRACKET | MEANOPENBRACKET | MINOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | MVNORMALOPENBRACKET | MVSTUDENTTOPENBRACKET | NCHGOPENBRACKET | NEGATIVEBINOMIALOPENBRACKET | NORMALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PARETOOPENBRACKET | PHIOPENBRACKET | PLUS | POISSONOPENBRACKET | POSTPVALUEOPENBRACKET | POWOPENBRACKET | PRIORPVALUEOPENBRACKET | PROBITOPENBRACKET | REPLICATEPOSTOPENBRACKET | REPLICATEPRIOROPENBRACKET | ROUNDOPENBRACKET | SDOPENBRACKET | SINHOPENBRACKET | SINOPENBRACKET | SOLUTIONOPENBRACKET | SQRTOPENBRACKET | STEPOPENBRACKET | STUDENTTOPENBRACKET | SUMOPENBRACKET | TANHOPENBRACKET | TANOPENBRACKET | TILDE | TRUNCATIONBEGIN | TRUNCOPENBRACKET | UNIFORMOPENBRACKET | WEIBULLOPENBRACKET | WISHARTOPENBRACKET | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE | NEWLINE );",
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 22
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 22:16: ( 'abs(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ABSOPENBRACKET
 *
 * Looks to match the characters the constitute the token ABSOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mABSOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ABSOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:22:16: ( 'abs(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:22:18: 'abs('
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleABSOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleABSOPENBRACKETEx; /* Prevent compiler warnings */
    ruleABSOPENBRACKETEx: ;

}
// $ANTLR end ABSOPENBRACKET

//   Comes from: 23:20: ( 'arccosh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCCOSHOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCCOSHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCCOSHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCCOSHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:23:20: ( 'arccosh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:23:22: 'arccosh('
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleARCCOSHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCCOSHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCCOSHOPENBRACKETEx: ;

}
// $ANTLR end ARCCOSHOPENBRACKET

//   Comes from: 24:19: ( 'arccos(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCCOSOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCCOSOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCCOSOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCCOSOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:24:19: ( 'arccos(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:24:21: 'arccos('
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleARCCOSOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCCOSOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCCOSOPENBRACKETEx: ;

}
// $ANTLR end ARCCOSOPENBRACKET

//   Comes from: 25:20: ( 'arcsinh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCSINHOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCSINHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCSINHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCSINHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:25:20: ( 'arcsinh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:25:22: 'arcsinh('
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleARCSINHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCSINHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCSINHOPENBRACKETEx: ;

}
// $ANTLR end ARCSINHOPENBRACKET

//   Comes from: 26:19: ( 'arcsin(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCSINOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCSINOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCSINOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCSINOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:26:19: ( 'arcsin(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:26:21: 'arcsin('
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleARCSINOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCSINOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCSINOPENBRACKETEx: ;

}
// $ANTLR end ARCSINOPENBRACKET

//   Comes from: 27:20: ( 'arctanh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCTANHOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCTANHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCTANHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCTANHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:27:20: ( 'arctanh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:27:22: 'arctanh('
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleARCTANHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCTANHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCTANHOPENBRACKETEx: ;

}
// $ANTLR end ARCTANHOPENBRACKET

//   Comes from: 28:19: ( 'arctan(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ARCTANOPENBRACKET
 *
 * Looks to match the characters the constitute the token ARCTANOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mARCTANOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ARCTANOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:28:19: ( 'arctan(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:28:21: 'arctan('
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleARCTANOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleARCTANOPENBRACKETEx; /* Prevent compiler warnings */
    ruleARCTANOPENBRACKETEx: ;

}
// $ANTLR end ARCTANOPENBRACKET

//   Comes from: 29:22: ( 'dbern(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BERNOULLIOPENBRACKET
 *
 * Looks to match the characters the constitute the token BERNOULLIOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mBERNOULLIOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = BERNOULLIOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:29:22: ( 'dbern(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:29:24: 'dbern('
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleBERNOULLIOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBERNOULLIOPENBRACKETEx; /* Prevent compiler warnings */
    ruleBERNOULLIOPENBRACKETEx: ;

}
// $ANTLR end BERNOULLIOPENBRACKET

//   Comes from: 30:17: ( 'dbeta(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BETAOPENBRACKET
 *
 * Looks to match the characters the constitute the token BETAOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mBETAOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = BETAOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:30:17: ( 'dbeta(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:30:19: 'dbeta('
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleBETAOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBETAOPENBRACKETEx; /* Prevent compiler warnings */
    ruleBETAOPENBRACKETEx: ;

}
// $ANTLR end BETAOPENBRACKET

//   Comes from: 31:21: ( 'dbin(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BINOMIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token BINOMIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mBINOMIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = BINOMIALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:31:21: ( 'dbin(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:31:23: 'dbin('
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleBINOMIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBINOMIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleBINOMIALOPENBRACKETEx: ;

}
// $ANTLR end BINOMIALOPENBRACKET

//   Comes from: 32:24: ( 'dcat(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CATEGORICALOPENBRACKET
 *
 * Looks to match the characters the constitute the token CATEGORICALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCATEGORICALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CATEGORICALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:32:24: ( 'dcat(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:32:26: 'dcat('
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleCATEGORICALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCATEGORICALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCATEGORICALOPENBRACKETEx: ;

}
// $ANTLR end CATEGORICALOPENBRACKET

//   Comes from: 33:18: ( 'C(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CENSORBEGINWITHC
 *
 * Looks to match the characters the constitute the token CENSORBEGINWITHC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCENSORBEGINWITHC()
{
    ANTLR_UINT32	_type;
      


    _type	    = CENSORBEGINWITHC;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:33:18: ( 'C(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:33:20: 'C('
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleCENSORBEGINWITHCEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCENSORBEGINWITHCEx; /* Prevent compiler warnings */
    ruleCENSORBEGINWITHCEx: ;

}
// $ANTLR end CENSORBEGINWITHC

//   Comes from: 34:18: ( 'I(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CENSORBEGINWITHI
 *
 * Looks to match the characters the constitute the token CENSORBEGINWITHI
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCENSORBEGINWITHI()
{
    ANTLR_UINT32	_type;
      


    _type	    = CENSORBEGINWITHI;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:34:18: ( 'I(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:34:20: 'I('
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleCENSORBEGINWITHIEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCENSORBEGINWITHIEx; /* Prevent compiler warnings */
    ruleCENSORBEGINWITHIEx: ;

}
// $ANTLR end CENSORBEGINWITHI

//   Comes from: 35:23: ( 'dchisqr(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHISQUAREDOPENBRACKET
 *
 * Looks to match the characters the constitute the token CHISQUAREDOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCHISQUAREDOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CHISQUAREDOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:35:23: ( 'dchisqr(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:35:25: 'dchisqr('
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleCHISQUAREDOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCHISQUAREDOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCHISQUAREDOPENBRACKETEx: ;

}
// $ANTLR end CHISQUAREDOPENBRACKET

//   Comes from: 36:20: ( 'cloglog(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOGLOGOPENBRACKET
 *
 * Looks to match the characters the constitute the token CLOGLOGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOGLOGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOGLOGOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:36:20: ( 'cloglog(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:36:22: 'cloglog('
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleCLOGLOGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOGLOGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCLOGLOGOPENBRACKETEx: ;

}
// $ANTLR end CLOGLOGOPENBRACKET

//   Comes from: 37:12: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSEBRACE
 *
 * Looks to match the characters the constitute the token CLOSEBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSEBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSEBRACE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:37:12: ( '}' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:37:14: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleCLOSEBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSEBRACEEx; /* Prevent compiler warnings */
    ruleCLOSEBRACEEx: ;

}
// $ANTLR end CLOSEBRACE

//   Comes from: 38:14: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSEBRACKET
 *
 * Looks to match the characters the constitute the token CLOSEBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSEBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSEBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:38:14: ( ')' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:38:16: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleCLOSEBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSEBRACKETEx; /* Prevent compiler warnings */
    ruleCLOSEBRACKETEx: ;

}
// $ANTLR end CLOSEBRACKET

//   Comes from: 39:20: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSESQUAREBRACKET
 *
 * Looks to match the characters the constitute the token CLOSESQUAREBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSESQUAREBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSESQUAREBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:39:20: ( ']' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:39:22: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleCLOSESQUAREBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSESQUAREBRACKETEx; /* Prevent compiler warnings */
    ruleCLOSESQUAREBRACKETEx: ;

}
// $ANTLR end CLOSESQUAREBRACKET

//   Comes from: 40:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = COLON;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:40:7: ( ':' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:40:9: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleCOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 41:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMA;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:41:7: ( ',' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:41:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 42:17: ( 'cosh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COSHOPENBRACKET
 *
 * Looks to match the characters the constitute the token COSHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOSHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = COSHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:42:17: ( 'cosh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:42:19: 'cosh('
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleCOSHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOSHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCOSHOPENBRACKETEx: ;

}
// $ANTLR end COSHOPENBRACKET

//   Comes from: 43:16: ( 'cos(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COSOPENBRACKET
 *
 * Looks to match the characters the constitute the token COSOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOSOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = COSOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:43:16: ( 'cos(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:43:18: 'cos('
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleCOSOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOSOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCOSOPENBRACKETEx: ;

}
// $ANTLR end COSOPENBRACKET

//   Comes from: 44:23: ( 'cumulative(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CUMULATIVEOPENBRACKET
 *
 * Looks to match the characters the constitute the token CUMULATIVEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCUMULATIVEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CUMULATIVEOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:44:23: ( 'cumulative(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:44:25: 'cumulative('
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleCUMULATIVEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCUMULATIVEOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCUMULATIVEOPENBRACKETEx: ;

}
// $ANTLR end CUMULATIVEOPENBRACKET

//   Comes from: 45:16: ( 'cut(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CUTOPENBRACKET
 *
 * Looks to match the characters the constitute the token CUTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCUTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CUTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:45:16: ( 'cut(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:45:18: 'cut('
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleCUTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCUTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCUTOPENBRACKETEx: ;

}
// $ANTLR end CUTOPENBRACKET

//   Comes from: 46:20: ( 'density(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DENSITYOPENBRACKET
 *
 * Looks to match the characters the constitute the token DENSITYOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDENSITYOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DENSITYOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:46:20: ( 'density(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:46:22: 'density('
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleDENSITYOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDENSITYOPENBRACKETEx; /* Prevent compiler warnings */
    ruleDENSITYOPENBRACKETEx: ;

}
// $ANTLR end DENSITYOPENBRACKET

//   Comes from: 47:21: ( 'deviance(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DEVIANCEOPENBRACKET
 *
 * Looks to match the characters the constitute the token DEVIANCEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDEVIANCEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DEVIANCEOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:47:21: ( 'deviance(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:47:23: 'deviance('
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleDEVIANCEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDEVIANCEOPENBRACKETEx; /* Prevent compiler warnings */
    ruleDEVIANCEOPENBRACKETEx: ;

}
// $ANTLR end DEVIANCEOPENBRACKET

//   Comes from: 48:23: ( 'ddirch(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIRICHLET2OPENBRACKET
 *
 * Looks to match the characters the constitute the token DIRICHLET2OPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDIRICHLET2OPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIRICHLET2OPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:48:23: ( 'ddirch(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:48:25: 'ddirch('
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleDIRICHLET2OPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIRICHLET2OPENBRACKETEx; /* Prevent compiler warnings */
    ruleDIRICHLET2OPENBRACKETEx: ;

}
// $ANTLR end DIRICHLET2OPENBRACKET

//   Comes from: 49:22: ( 'ddirich(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIRICHLETOPENBRACKET
 *
 * Looks to match the characters the constitute the token DIRICHLETOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDIRICHLETOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIRICHLETOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:49:22: ( 'ddirich(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:49:24: 'ddirich('
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleDIRICHLETOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIRICHLETOPENBRACKETEx; /* Prevent compiler warnings */
    ruleDIRICHLETOPENBRACKETEx: ;

}
// $ANTLR end DIRICHLETOPENBRACKET

//   Comes from: 50:5: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIV
 *
 * Looks to match the characters the constitute the token DIV
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDIV()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIV;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:50:5: ( '/' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:50:7: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleDIVEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIVEx; /* Prevent compiler warnings */
    ruleDIVEx: ;

}
// $ANTLR end DIV

//   Comes from: 51:5: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOT;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:51:5: ( '.' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:51:7: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleDOTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 52:30: ( 'ddexp(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLEEXPONENTIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token DOUBLEEXPONENTIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDOUBLEEXPONENTIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOUBLEEXPONENTIALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:52:30: ( 'ddexp(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:52:32: 'ddexp('
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleDOUBLEEXPONENTIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOUBLEEXPONENTIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleDOUBLEEXPONENTIALOPENBRACKETEx: ;

}
// $ANTLR end DOUBLEEXPONENTIALOPENBRACKET

//   Comes from: 53:19: ( 'equals(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQUALSOPENBRACKET
 *
 * Looks to match the characters the constitute the token EQUALSOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mEQUALSOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = EQUALSOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:53:19: ( 'equals(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:53:21: 'equals('
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleEQUALSOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEQUALSOPENBRACKETEx; /* Prevent compiler warnings */
    ruleEQUALSOPENBRACKETEx: ;

}
// $ANTLR end EQUALSOPENBRACKET

//   Comes from: 54:9: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQUALTO
 *
 * Looks to match the characters the constitute the token EQUALTO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mEQUALTO()
{
    ANTLR_UINT32	_type;
      


    _type	    = EQUALTO;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:54:9: ( '=' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:54:11: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleEQUALTOEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEQUALTOEx; /* Prevent compiler warnings */
    ruleEQUALTOEx: ;

}
// $ANTLR end EQUALTO

//   Comes from: 55:24: ( 'dexp(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENTIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token EXPONENTIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mEXPONENTIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = EXPONENTIALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:55:24: ( 'dexp(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:55:26: 'dexp('
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleEXPONENTIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEXPONENTIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleEXPONENTIALOPENBRACKETEx: ;

}
// $ANTLR end EXPONENTIALOPENBRACKET

//   Comes from: 56:16: ( 'exp(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPOPENBRACKET
 *
 * Looks to match the characters the constitute the token EXPOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mEXPOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = EXPOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:56:16: ( 'exp(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:56:18: 'exp('
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleEXPOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEXPOPENBRACKETEx; /* Prevent compiler warnings */
    ruleEXPOPENBRACKETEx: ;

}
// $ANTLR end EXPOPENBRACKET

//   Comes from: 57:17: ( 'dflat(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLATOPENBRACKET
 *
 * Looks to match the characters the constitute the token FLATOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mFLATOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = FLATOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:57:17: ( 'dflat(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:57:19: 'dflat('
    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleFLATOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFLATOPENBRACKETEx; /* Prevent compiler warnings */
    ruleFLATOPENBRACKETEx: ;

}
// $ANTLR end FLATOPENBRACKET

//   Comes from: 58:10: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FORSTART
 *
 * Looks to match the characters the constitute the token FORSTART
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mFORSTART()
{
    ANTLR_UINT32	_type;
      


    _type	    = FORSTART;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:58:10: ( 'for' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:58:12: 'for'
    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleFORSTARTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFORSTARTEx; /* Prevent compiler warnings */
    ruleFORSTARTEx: ;

}
// $ANTLR end FORSTART

//   Comes from: 59:18: ( 'dgamma(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GAMMAOPENBRACKET
 *
 * Looks to match the characters the constitute the token GAMMAOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGAMMAOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GAMMAOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:59:18: ( 'dgamma(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:59:20: 'dgamma('
    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleGAMMAOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGAMMAOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGAMMAOPENBRACKETEx: ;

}
// $ANTLR end GAMMAOPENBRACKET

//   Comes from: 60:19: ( 'gammap(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GAMMAPOPENBRACKET
 *
 * Looks to match the characters the constitute the token GAMMAPOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGAMMAPOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GAMMAPOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:60:19: ( 'gammap(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:60:21: 'gammap('
    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleGAMMAPOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGAMMAPOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGAMMAPOPENBRACKETEx: ;

}
// $ANTLR end GAMMAPOPENBRACKET

//   Comes from: 61:17: ( 'df(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GENFOPENBRACKET
 *
 * Looks to match the characters the constitute the token GENFOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGENFOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GENFOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:61:17: ( 'df(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:61:19: 'df('
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleGENFOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGENFOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGENFOPENBRACKETEx: ;

}
// $ANTLR end GENFOPENBRACKET

//   Comes from: 62:21: ( 'dggamma(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GENGAMMAOPENBRACKET
 *
 * Looks to match the characters the constitute the token GENGAMMAOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGENGAMMAOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GENGAMMAOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:62:21: ( 'dggamma(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:62:23: 'dggamma('
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleGENGAMMAOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGENGAMMAOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGENGAMMAOPENBRACKETEx: ;

}
// $ANTLR end GENGAMMAOPENBRACKET

//   Comes from: 63:22: ( 'dloglik(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GENLOGLIKOPENBRACKET
 *
 * Looks to match the characters the constitute the token GENLOGLIKOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGENLOGLIKOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GENLOGLIKOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:63:22: ( 'dloglik(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:63:24: 'dloglik('
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleGENLOGLIKOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGENLOGLIKOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGENLOGLIKOPENBRACKETEx: ;

}
// $ANTLR end GENLOGLIKOPENBRACKET

//   Comes from: 64:22: ( 'dgpar(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GENPARETOOPENBRACKET
 *
 * Looks to match the characters the constitute the token GENPARETOOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGENPARETOOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GENPARETOOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:64:22: ( 'dgpar(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:64:24: 'dgpar('
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleGENPARETOOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGENPARETOOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGENPARETOOPENBRACKETEx: ;

}
// $ANTLR end GENPARETOOPENBRACKET

//   Comes from: 65:16: ( 'dgev(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GEVOPENBRACKET
 *
 * Looks to match the characters the constitute the token GEVOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mGEVOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = GEVOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:65:16: ( 'dgev(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:65:18: 'dgev('
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleGEVOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleGEVOPENBRACKETEx; /* Prevent compiler warnings */
    ruleGEVOPENBRACKETEx: ;

}
// $ANTLR end GEVOPENBRACKET

//   Comes from: 66:6: ( '#' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HASH
 *
 * Looks to match the characters the constitute the token HASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mHASH()
{
    ANTLR_UINT32	_type;
      


    _type	    = HASH;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:66:6: ( '#' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:66:8: '#'
    {
         this->matchc('#');
        if  (this->hasException())
        {
            goto ruleHASHEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleHASHEx; /* Prevent compiler warnings */
    ruleHASHEx: ;

}
// $ANTLR end HASH

//   Comes from: 67:21: ( 'icloglog(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ICLOGLOGOPENBRACKET
 *
 * Looks to match the characters the constitute the token ICLOGLOGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mICLOGLOGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ICLOGLOGOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:67:21: ( 'icloglog(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:67:23: 'icloglog('
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleICLOGLOGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleICLOGLOGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleICLOGLOGOPENBRACKETEx: ;

}
// $ANTLR end ICLOGLOGOPENBRACKET

//   Comes from: 68:19: ( 'ilogit(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ILOGITOPENBRACKET
 *
 * Looks to match the characters the constitute the token ILOGITOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mILOGITOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ILOGITOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:68:19: ( 'ilogit(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:68:21: 'ilogit('
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleILOGITOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleILOGITOPENBRACKETEx; /* Prevent compiler warnings */
    ruleILOGITOPENBRACKETEx: ;

}
// $ANTLR end ILOGITOPENBRACKET

//   Comes from: 69:4: ( 'in' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IN
 *
 * Looks to match the characters the constitute the token IN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = IN;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:69:4: ( 'in' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:69:6: 'in'
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINEx; /* Prevent compiler warnings */
    ruleINEx: ;

}
// $ANTLR end IN

//   Comes from: 70:19: ( 'inprod(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INPRODOPENBRACKET
 *
 * Looks to match the characters the constitute the token INPRODOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mINPRODOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = INPRODOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:70:19: ( 'inprod(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:70:21: 'inprod('
    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleINPRODOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINPRODOPENBRACKETEx; /* Prevent compiler warnings */
    ruleINPRODOPENBRACKETEx: ;

}
// $ANTLR end INPRODOPENBRACKET

//   Comes from: 71:21: ( 'integral(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTEGRALOPENBRACKET
 *
 * Looks to match the characters the constitute the token INTEGRALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mINTEGRALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = INTEGRALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:71:21: ( 'integral(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:71:23: 'integral('
    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleINTEGRALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINTEGRALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleINTEGRALOPENBRACKETEx: ;

}
// $ANTLR end INTEGRALOPENBRACKET

//   Comes from: 72:20: ( 'inverse(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INVERSEOPENBRACKET
 *
 * Looks to match the characters the constitute the token INVERSEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mINVERSEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = INVERSEOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:72:20: ( 'inverse(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:72:22: 'inverse('
    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleINVERSEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINVERSEOPENBRACKETEx; /* Prevent compiler warnings */
    ruleINVERSEOPENBRACKETEx: ;

}
// $ANTLR end INVERSEOPENBRACKET

//   Comes from: 73:13: ( '<-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFTPOINTER
 *
 * Looks to match the characters the constitute the token LEFTPOINTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLEFTPOINTER()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFTPOINTER;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:73:13: ( '<-' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:73:15: '<-'
    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleLEFTPOINTEREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFTPOINTEREx; /* Prevent compiler warnings */
    ruleLEFTPOINTEREx: ;

}
// $ANTLR end LEFTPOINTER

//   Comes from: 74:20: ( 'logfact(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGFACTOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGFACTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGFACTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGFACTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:74:20: ( 'logfact(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:74:22: 'logfact('
    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleLOGFACTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGFACTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGFACTOPENBRACKETEx: ;

}
// $ANTLR end LOGFACTOPENBRACKET

//   Comes from: 75:19: ( 'loggam(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGGAMOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGGAMOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGGAMOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGGAMOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:75:19: ( 'loggam(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:75:21: 'loggam('
    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleLOGGAMOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGGAMOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGGAMOPENBRACKETEx: ;

}
// $ANTLR end LOGGAMOPENBRACKET

//   Comes from: 76:21: ( 'dlogis(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGISTICOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGISTICOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGISTICOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGISTICOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:76:21: ( 'dlogis(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:76:23: 'dlogis('
    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleLOGISTICOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGISTICOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGISTICOPENBRACKETEx: ;

}
// $ANTLR end LOGISTICOPENBRACKET

//   Comes from: 77:18: ( 'logit(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGITOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGITOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGITOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGITOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:77:18: ( 'logit(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:77:20: 'logit('
    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleLOGITOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGITOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGITOPENBRACKETEx: ;

}
// $ANTLR end LOGITOPENBRACKET

//   Comes from: 78:22: ( 'dlnorm(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGNORMALOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGNORMALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGNORMALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGNORMALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:78:22: ( 'dlnorm(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:78:24: 'dlnorm('
    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleLOGNORMALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGNORMALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGNORMALOPENBRACKETEx: ;

}
// $ANTLR end LOGNORMALOPENBRACKET

//   Comes from: 79:16: ( 'log(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:79:16: ( 'log(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:79:18: 'log('
    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleLOGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGOPENBRACKETEx: ;

}
// $ANTLR end LOGOPENBRACKET

//   Comes from: 80:16: ( 'max(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MAXOPENBRACKET
 *
 * Looks to match the characters the constitute the token MAXOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMAXOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MAXOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:80:16: ( 'max(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:80:18: 'max('
    {
        this->matchs(lit_50);
        if  (this->hasException())
        {
            goto ruleMAXOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMAXOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMAXOPENBRACKETEx: ;

}
// $ANTLR end MAXOPENBRACKET

//   Comes from: 81:17: ( 'mean(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MEANOPENBRACKET
 *
 * Looks to match the characters the constitute the token MEANOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMEANOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MEANOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:81:17: ( 'mean(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:81:19: 'mean('
    {
        this->matchs(lit_51);
        if  (this->hasException())
        {
            goto ruleMEANOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMEANOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMEANOPENBRACKETEx: ;

}
// $ANTLR end MEANOPENBRACKET

//   Comes from: 82:16: ( 'min(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINOPENBRACKET
 *
 * Looks to match the characters the constitute the token MINOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMINOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MINOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:82:16: ( 'min(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:82:18: 'min('
    {
        this->matchs(lit_52);
        if  (this->hasException())
        {
            goto ruleMINOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMINOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMINOPENBRACKETEx: ;

}
// $ANTLR end MINOPENBRACKET

//   Comes from: 83:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINUS
 *
 * Looks to match the characters the constitute the token MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMINUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = MINUS;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:83:7: ( '-' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:83:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleMINUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMINUSEx; /* Prevent compiler warnings */
    ruleMINUSEx: ;

}
// $ANTLR end MINUS

//   Comes from: 84:7: ( 'model' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MODEL
 *
 * Looks to match the characters the constitute the token MODEL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMODEL()
{
    ANTLR_UINT32	_type;
      


    _type	    = MODEL;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:84:7: ( 'model' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:84:9: 'model'
    {
        this->matchs(lit_53);
        if  (this->hasException())
        {
            goto ruleMODELEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMODELEx; /* Prevent compiler warnings */
    ruleMODELEx: ;

}
// $ANTLR end MODEL

//   Comes from: 85:6: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MULT
 *
 * Looks to match the characters the constitute the token MULT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMULT()
{
    ANTLR_UINT32	_type;
      


    _type	    = MULT;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:85:6: ( '*' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:85:8: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleMULTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMULTEx; /* Prevent compiler warnings */
    ruleMULTEx: ;

}
// $ANTLR end MULT

//   Comes from: 86:25: ( 'dmulti(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MUTLTINOMIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token MUTLTINOMIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMUTLTINOMIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MUTLTINOMIALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:86:25: ( 'dmulti(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:86:27: 'dmulti('
    {
        this->matchs(lit_54);
        if  (this->hasException())
        {
            goto ruleMUTLTINOMIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMUTLTINOMIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMUTLTINOMIALOPENBRACKETEx: ;

}
// $ANTLR end MUTLTINOMIALOPENBRACKET

//   Comes from: 87:21: ( 'dmnorm(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MVNORMALOPENBRACKET
 *
 * Looks to match the characters the constitute the token MVNORMALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMVNORMALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MVNORMALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:87:21: ( 'dmnorm(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:87:23: 'dmnorm('
    {
        this->matchs(lit_55);
        if  (this->hasException())
        {
            goto ruleMVNORMALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMVNORMALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMVNORMALOPENBRACKETEx: ;

}
// $ANTLR end MVNORMALOPENBRACKET

//   Comes from: 88:23: ( 'dmt(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MVSTUDENTTOPENBRACKET
 *
 * Looks to match the characters the constitute the token MVSTUDENTTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMVSTUDENTTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MVSTUDENTTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:88:23: ( 'dmt(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:88:25: 'dmt('
    {
        this->matchs(lit_56);
        if  (this->hasException())
        {
            goto ruleMVSTUDENTTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMVSTUDENTTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMVSTUDENTTOPENBRACKETEx: ;

}
// $ANTLR end MVSTUDENTTOPENBRACKET

//   Comes from: 89:17: ( 'dhyper(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NCHGOPENBRACKET
 *
 * Looks to match the characters the constitute the token NCHGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNCHGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = NCHGOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:89:17: ( 'dhyper(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:89:19: 'dhyper('
    {
        this->matchs(lit_57);
        if  (this->hasException())
        {
            goto ruleNCHGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNCHGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleNCHGOPENBRACKETEx: ;

}
// $ANTLR end NCHGOPENBRACKET

//   Comes from: 90:29: ( 'dnegbin(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NEGATIVEBINOMIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token NEGATIVEBINOMIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNEGATIVEBINOMIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = NEGATIVEBINOMIALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:90:29: ( 'dnegbin(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:90:31: 'dnegbin('
    {
        this->matchs(lit_58);
        if  (this->hasException())
        {
            goto ruleNEGATIVEBINOMIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNEGATIVEBINOMIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleNEGATIVEBINOMIALOPENBRACKETEx: ;

}
// $ANTLR end NEGATIVEBINOMIALOPENBRACKET

//   Comes from: 91:19: ( 'dnorm(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NORMALOPENBRACKET
 *
 * Looks to match the characters the constitute the token NORMALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNORMALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = NORMALOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:91:19: ( 'dnorm(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:91:21: 'dnorm('
    {
        this->matchs(lit_59);
        if  (this->hasException())
        {
            goto ruleNORMALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNORMALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleNORMALOPENBRACKETEx: ;

}
// $ANTLR end NORMALOPENBRACKET

//   Comes from: 92:11: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENBRACE
 *
 * Looks to match the characters the constitute the token OPENBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENBRACE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:92:11: ( '{' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:92:13: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleOPENBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENBRACEEx; /* Prevent compiler warnings */
    ruleOPENBRACEEx: ;

}
// $ANTLR end OPENBRACE

//   Comes from: 93:13: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENBRACKET
 *
 * Looks to match the characters the constitute the token OPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:93:13: ( '(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:93:15: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleOPENBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENBRACKETEx; /* Prevent compiler warnings */
    ruleOPENBRACKETEx: ;

}
// $ANTLR end OPENBRACKET

//   Comes from: 94:19: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENSQUAREBRACKET
 *
 * Looks to match the characters the constitute the token OPENSQUAREBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENSQUAREBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENSQUAREBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:94:19: ( '[' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:94:21: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleOPENSQUAREBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENSQUAREBRACKETEx; /* Prevent compiler warnings */
    ruleOPENSQUAREBRACKETEx: ;

}
// $ANTLR end OPENSQUAREBRACKET

//   Comes from: 95:19: ( 'dpar(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PARETOOPENBRACKET
 *
 * Looks to match the characters the constitute the token PARETOOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPARETOOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = PARETOOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:95:19: ( 'dpar(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:95:21: 'dpar('
    {
        this->matchs(lit_60);
        if  (this->hasException())
        {
            goto rulePARETOOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePARETOOPENBRACKETEx; /* Prevent compiler warnings */
    rulePARETOOPENBRACKETEx: ;

}
// $ANTLR end PARETOOPENBRACKET

//   Comes from: 96:16: ( 'phi(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PHIOPENBRACKET
 *
 * Looks to match the characters the constitute the token PHIOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPHIOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = PHIOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:96:16: ( 'phi(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:96:18: 'phi('
    {
        this->matchs(lit_61);
        if  (this->hasException())
        {
            goto rulePHIOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePHIOPENBRACKETEx; /* Prevent compiler warnings */
    rulePHIOPENBRACKETEx: ;

}
// $ANTLR end PHIOPENBRACKET

//   Comes from: 97:6: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPLUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = PLUS;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:97:6: ( '+' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:97:8: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto rulePLUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 98:20: ( 'dpois(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POISSONOPENBRACKET
 *
 * Looks to match the characters the constitute the token POISSONOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPOISSONOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = POISSONOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:98:20: ( 'dpois(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:98:22: 'dpois('
    {
        this->matchs(lit_62);
        if  (this->hasException())
        {
            goto rulePOISSONOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePOISSONOPENBRACKETEx; /* Prevent compiler warnings */
    rulePOISSONOPENBRACKETEx: ;

}
// $ANTLR end POISSONOPENBRACKET

//   Comes from: 99:23: ( 'post.p.value(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POSTPVALUEOPENBRACKET
 *
 * Looks to match the characters the constitute the token POSTPVALUEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPOSTPVALUEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = POSTPVALUEOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:99:23: ( 'post.p.value(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:99:25: 'post.p.value('
    {
        this->matchs(lit_63);
        if  (this->hasException())
        {
            goto rulePOSTPVALUEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePOSTPVALUEOPENBRACKETEx; /* Prevent compiler warnings */
    rulePOSTPVALUEOPENBRACKETEx: ;

}
// $ANTLR end POSTPVALUEOPENBRACKET

//   Comes from: 100:16: ( 'pow(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start POWOPENBRACKET
 *
 * Looks to match the characters the constitute the token POWOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPOWOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = POWOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:100:16: ( 'pow(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:100:18: 'pow('
    {
        this->matchs(lit_64);
        if  (this->hasException())
        {
            goto rulePOWOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePOWOPENBRACKETEx; /* Prevent compiler warnings */
    rulePOWOPENBRACKETEx: ;

}
// $ANTLR end POWOPENBRACKET

//   Comes from: 101:24: ( 'prior.p.value(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PRIORPVALUEOPENBRACKET
 *
 * Looks to match the characters the constitute the token PRIORPVALUEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPRIORPVALUEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = PRIORPVALUEOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:101:24: ( 'prior.p.value(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:101:26: 'prior.p.value('
    {
        this->matchs(lit_65);
        if  (this->hasException())
        {
            goto rulePRIORPVALUEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePRIORPVALUEOPENBRACKETEx; /* Prevent compiler warnings */
    rulePRIORPVALUEOPENBRACKETEx: ;

}
// $ANTLR end PRIORPVALUEOPENBRACKET

//   Comes from: 102:19: ( 'probit(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PROBITOPENBRACKET
 *
 * Looks to match the characters the constitute the token PROBITOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPROBITOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = PROBITOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:102:19: ( 'probit(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:102:21: 'probit('
    {
        this->matchs(lit_66);
        if  (this->hasException())
        {
            goto rulePROBITOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePROBITOPENBRACKETEx; /* Prevent compiler warnings */
    rulePROBITOPENBRACKETEx: ;

}
// $ANTLR end PROBITOPENBRACKET

//   Comes from: 103:26: ( 'replicate.post(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start REPLICATEPOSTOPENBRACKET
 *
 * Looks to match the characters the constitute the token REPLICATEPOSTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mREPLICATEPOSTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = REPLICATEPOSTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:103:26: ( 'replicate.post(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:103:28: 'replicate.post('
    {
        this->matchs(lit_67);
        if  (this->hasException())
        {
            goto ruleREPLICATEPOSTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleREPLICATEPOSTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleREPLICATEPOSTOPENBRACKETEx: ;

}
// $ANTLR end REPLICATEPOSTOPENBRACKET

//   Comes from: 104:27: ( 'replicate.prior(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start REPLICATEPRIOROPENBRACKET
 *
 * Looks to match the characters the constitute the token REPLICATEPRIOROPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mREPLICATEPRIOROPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = REPLICATEPRIOROPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:104:27: ( 'replicate.prior(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:104:29: 'replicate.prior('
    {
        this->matchs(lit_68);
        if  (this->hasException())
        {
            goto ruleREPLICATEPRIOROPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleREPLICATEPRIOROPENBRACKETEx; /* Prevent compiler warnings */
    ruleREPLICATEPRIOROPENBRACKETEx: ;

}
// $ANTLR end REPLICATEPRIOROPENBRACKET

//   Comes from: 105:18: ( 'round(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ROUNDOPENBRACKET
 *
 * Looks to match the characters the constitute the token ROUNDOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mROUNDOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ROUNDOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:105:18: ( 'round(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:105:20: 'round('
    {
        this->matchs(lit_69);
        if  (this->hasException())
        {
            goto ruleROUNDOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleROUNDOPENBRACKETEx; /* Prevent compiler warnings */
    ruleROUNDOPENBRACKETEx: ;

}
// $ANTLR end ROUNDOPENBRACKET

//   Comes from: 106:15: ( 'sd(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SDOPENBRACKET
 *
 * Looks to match the characters the constitute the token SDOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSDOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SDOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:106:15: ( 'sd(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:106:17: 'sd('
    {
        this->matchs(lit_70);
        if  (this->hasException())
        {
            goto ruleSDOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSDOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSDOPENBRACKETEx: ;

}
// $ANTLR end SDOPENBRACKET

//   Comes from: 107:17: ( 'sinh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINHOPENBRACKET
 *
 * Looks to match the characters the constitute the token SINHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSINHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SINHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:107:17: ( 'sinh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:107:19: 'sinh('
    {
        this->matchs(lit_71);
        if  (this->hasException())
        {
            goto ruleSINHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSINHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSINHOPENBRACKETEx: ;

}
// $ANTLR end SINHOPENBRACKET

//   Comes from: 108:16: ( 'sin(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINOPENBRACKET
 *
 * Looks to match the characters the constitute the token SINOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSINOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SINOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:108:16: ( 'sin(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:108:18: 'sin('
    {
        this->matchs(lit_72);
        if  (this->hasException())
        {
            goto ruleSINOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSINOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSINOPENBRACKETEx: ;

}
// $ANTLR end SINOPENBRACKET

//   Comes from: 109:21: ( 'solution(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SOLUTIONOPENBRACKET
 *
 * Looks to match the characters the constitute the token SOLUTIONOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSOLUTIONOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SOLUTIONOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:109:21: ( 'solution(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:109:23: 'solution('
    {
        this->matchs(lit_73);
        if  (this->hasException())
        {
            goto ruleSOLUTIONOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSOLUTIONOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSOLUTIONOPENBRACKETEx: ;

}
// $ANTLR end SOLUTIONOPENBRACKET

//   Comes from: 110:17: ( 'sqrt(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SQRTOPENBRACKET
 *
 * Looks to match the characters the constitute the token SQRTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSQRTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SQRTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:110:17: ( 'sqrt(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:110:19: 'sqrt('
    {
        this->matchs(lit_74);
        if  (this->hasException())
        {
            goto ruleSQRTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSQRTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSQRTOPENBRACKETEx: ;

}
// $ANTLR end SQRTOPENBRACKET

//   Comes from: 111:17: ( 'step(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STEPOPENBRACKET
 *
 * Looks to match the characters the constitute the token STEPOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSTEPOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = STEPOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:111:17: ( 'step(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:111:19: 'step('
    {
        this->matchs(lit_75);
        if  (this->hasException())
        {
            goto ruleSTEPOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTEPOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSTEPOPENBRACKETEx: ;

}
// $ANTLR end STEPOPENBRACKET

//   Comes from: 112:21: ( 'dt(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STUDENTTOPENBRACKET
 *
 * Looks to match the characters the constitute the token STUDENTTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSTUDENTTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = STUDENTTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:112:21: ( 'dt(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:112:23: 'dt('
    {
        this->matchs(lit_76);
        if  (this->hasException())
        {
            goto ruleSTUDENTTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTUDENTTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSTUDENTTOPENBRACKETEx: ;

}
// $ANTLR end STUDENTTOPENBRACKET

//   Comes from: 113:16: ( 'sum(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SUMOPENBRACKET
 *
 * Looks to match the characters the constitute the token SUMOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mSUMOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = SUMOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:113:16: ( 'sum(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:113:18: 'sum('
    {
        this->matchs(lit_77);
        if  (this->hasException())
        {
            goto ruleSUMOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSUMOPENBRACKETEx; /* Prevent compiler warnings */
    ruleSUMOPENBRACKETEx: ;

}
// $ANTLR end SUMOPENBRACKET

//   Comes from: 114:17: ( 'tanh(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TANHOPENBRACKET
 *
 * Looks to match the characters the constitute the token TANHOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTANHOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = TANHOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:114:17: ( 'tanh(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:114:19: 'tanh('
    {
        this->matchs(lit_78);
        if  (this->hasException())
        {
            goto ruleTANHOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTANHOPENBRACKETEx; /* Prevent compiler warnings */
    ruleTANHOPENBRACKETEx: ;

}
// $ANTLR end TANHOPENBRACKET

//   Comes from: 115:16: ( 'tan(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TANOPENBRACKET
 *
 * Looks to match the characters the constitute the token TANOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTANOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = TANOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:115:16: ( 'tan(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:115:18: 'tan('
    {
        this->matchs(lit_79);
        if  (this->hasException())
        {
            goto ruleTANOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTANOPENBRACKETEx; /* Prevent compiler warnings */
    ruleTANOPENBRACKETEx: ;

}
// $ANTLR end TANOPENBRACKET

//   Comes from: 116:7: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TILDE
 *
 * Looks to match the characters the constitute the token TILDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTILDE()
{
    ANTLR_UINT32	_type;
      


    _type	    = TILDE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:116:7: ( '~' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:116:9: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleTILDEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTILDEEx; /* Prevent compiler warnings */
    ruleTILDEEx: ;

}
// $ANTLR end TILDE

//   Comes from: 117:17: ( 'T(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRUNCATIONBEGIN
 *
 * Looks to match the characters the constitute the token TRUNCATIONBEGIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTRUNCATIONBEGIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = TRUNCATIONBEGIN;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:117:17: ( 'T(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:117:19: 'T('
    {
        this->matchs(lit_80);
        if  (this->hasException())
        {
            goto ruleTRUNCATIONBEGINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTRUNCATIONBEGINEx; /* Prevent compiler warnings */
    ruleTRUNCATIONBEGINEx: ;

}
// $ANTLR end TRUNCATIONBEGIN

//   Comes from: 118:18: ( 'trunc(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRUNCOPENBRACKET
 *
 * Looks to match the characters the constitute the token TRUNCOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTRUNCOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = TRUNCOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:118:18: ( 'trunc(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:118:20: 'trunc('
    {
        this->matchs(lit_81);
        if  (this->hasException())
        {
            goto ruleTRUNCOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTRUNCOPENBRACKETEx; /* Prevent compiler warnings */
    ruleTRUNCOPENBRACKETEx: ;

}
// $ANTLR end TRUNCOPENBRACKET

//   Comes from: 119:20: ( 'dunif(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNIFORMOPENBRACKET
 *
 * Looks to match the characters the constitute the token UNIFORMOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mUNIFORMOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = UNIFORMOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:119:20: ( 'dunif(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:119:22: 'dunif('
    {
        this->matchs(lit_82);
        if  (this->hasException())
        {
            goto ruleUNIFORMOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleUNIFORMOPENBRACKETEx; /* Prevent compiler warnings */
    ruleUNIFORMOPENBRACKETEx: ;

}
// $ANTLR end UNIFORMOPENBRACKET

//   Comes from: 120:20: ( 'dweib(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WEIBULLOPENBRACKET
 *
 * Looks to match the characters the constitute the token WEIBULLOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mWEIBULLOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = WEIBULLOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:120:20: ( 'dweib(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:120:22: 'dweib('
    {
        this->matchs(lit_83);
        if  (this->hasException())
        {
            goto ruleWEIBULLOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWEIBULLOPENBRACKETEx; /* Prevent compiler warnings */
    ruleWEIBULLOPENBRACKETEx: ;

}
// $ANTLR end WEIBULLOPENBRACKET

//   Comes from: 121:20: ( 'dwish(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WISHARTOPENBRACKET
 *
 * Looks to match the characters the constitute the token WISHARTOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mWISHARTOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = WISHARTOPENBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:121:20: ( 'dwish(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:121:22: 'dwish('
    {
        this->matchs(lit_84);
        if  (this->hasException())
        {
            goto ruleWISHARTOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWISHARTOPENBRACKETEx; /* Prevent compiler warnings */
    ruleWISHARTOPENBRACKETEx: ;

}
// $ANTLR end WISHARTOPENBRACKET

//   Comes from: 450:2: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTANTINT
 *
 * Looks to match the characters the constitute the token CONSTANTINT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCONSTANTINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTANTINT;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:450:2: ( ( '0' .. '9' )+ )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:450:4: ( '0' .. '9' )+
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:450:4: ( '0' .. '9' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleCONSTANTINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleCONSTANTINTEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTANTINTEx; /* Prevent compiler warnings */
    ruleCONSTANTINTEx: ;

}
// $ANTLR end CONSTANTINT

//   Comes from: 454:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NODENAME
 *
 * Looks to match the characters the constitute the token NODENAME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNODENAME()
{
    ANTLR_UINT32	_type;
      


    _type	    = NODENAME;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:454:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:454:3: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleNODENAMEEx;
        }


        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:454:24: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*

        for (;;)
        {
            int alt2=2;
            switch ( this->LA(1) )
            {
            case '.':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
        	    {
        	        if ( this->LA(1) == '.' || ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleNODENAMEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNODENAMEEx; /* Prevent compiler warnings */
    ruleNODENAMEEx: ;

}
// $ANTLR end NODENAME

//   Comes from: 458:2: ( ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? | ( DOT ( '0' .. '9' )+ ) ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? | OPENBRACKET ( PLUS | MINUS ) ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? CLOSEBRACKET )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTANTVALUE
 *
 * Looks to match the characters the constitute the token CONSTANTVALUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCONSTANTVALUE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTANTVALUE;


    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:2: ( ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? | ( DOT ( '0' .. '9' )+ ) ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? | OPENBRACKET ( PLUS | MINUS ) ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? CLOSEBRACKET )

        ANTLR_UINT32 alt19;

        alt19=3;

        switch ( this->LA(1) )
        {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt19=1;
        	}
            break;
        case '.':
        	{
        		alt19=2;
        	}
            break;
        case '(':
        	{
        		alt19=3;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< BUGSLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 19 );
            ex->set_state( 0 );


            goto ruleCONSTANTVALUEEx;

        }

        switch (alt19)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:4: ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )?
    	    {
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:4: ( '0' .. '9' )+
    	        {
    	            int cnt3=0;

    	            for (;;)
    	            {
    	                int alt3=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt3=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt3)
    	        	{
    	        	    case 1:
    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleCONSTANTVALUEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt3 >= 1 )
    	        		{
    	        		    goto loop3;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleCONSTANTVALUEEx;
    	        	}
    	        	cnt3++;
    	            }
    	            loop3: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:15: ( DOT ( '0' .. '9' )+ )?
    	        {
    	            int alt5=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '.':
    	                	{
    	                		alt5=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt5)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:16: DOT ( '0' .. '9' )+
    	        	    {
    	        	        /* 458:16: DOT ( '0' .. '9' )+ */
    	        	        mDOT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }



    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:19: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt4=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt4=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt4=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt4)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt4 >= 1 )
    	        	        		{
    	        	        		    goto loop4;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt4++;
    	        	            }
    	        	            loop4: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:32: ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )?
    	        {
    	            int alt8=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                	{
    	                		alt8=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt8)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:33: 'E' ( PLUS | MINUS )? ( '0' .. '9' )+
    	        	    {
    	        	         this->matchc('E');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:36: ( PLUS | MINUS )?
    	        	        {
    	        	            int alt6=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt6=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt6)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleCONSTANTVALUEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:458:49: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt7=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt7=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt7=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt7)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt7 >= 1 )
    	        	        		{
    	        	        		    goto loop7;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt7++;
    	        	            }
    	        	            loop7: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:4: ( DOT ( '0' .. '9' )+ ) ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )?
    	    {
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:4: ( DOT ( '0' .. '9' )+ )
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:5: DOT ( '0' .. '9' )+
    	        {
    	            /* 459:5: DOT ( '0' .. '9' )+ */
    	            mDOT();
    	            if  (this->hasException())
    	            {
    	                goto ruleCONSTANTVALUEEx;
    	            }



    	            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:8: ( '0' .. '9' )+
    	            {
    	                int cnt9=0;

    	                for (;;)
    	                {
    	                    int alt9=2;
    	            	switch ( this->LA(1) )
    	            	{
    	            	case '0':
    	            	case '1':
    	            	case '2':
    	            	case '3':
    	            	case '4':
    	            	case '5':
    	            	case '6':
    	            	case '7':
    	            	case '8':
    	            	case '9':
    	            		{
    	            			alt9=1;
    	            		}
    	            	    break;

    	            	}

    	            	switch (alt9)
    	            	{
    	            	    case 1:
    	            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	            	        {
    	            	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	            	            {
    	            	                this->consume();
    	            	            }
    	            	            else
    	            	            {
    	            	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            	                this->recover();
    	            	                goto ruleCONSTANTVALUEEx;
    	            	            }


    	            	        }
    	            	        break;

    	            	    default:

    	            		if ( cnt9 >= 1 )
    	            		{
    	            		    goto loop9;
    	            		}
    	            		/* mismatchedSetEx()
    	            		 */
    	            		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	            		goto ruleCONSTANTVALUEEx;
    	            	}
    	            	cnt9++;
    	                }
    	                loop9: ;	/* Jump to here if this rule does not match */
    	            }

    	        }


    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:20: ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )?
    	        {
    	            int alt12=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                	{
    	                		alt12=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt12)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:21: 'E' ( PLUS | MINUS )? ( '0' .. '9' )+
    	        	    {
    	        	         this->matchc('E');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:24: ( PLUS | MINUS )?
    	        	        {
    	        	            int alt10=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt10=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt10)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleCONSTANTVALUEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:459:37: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt11=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt11=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt11=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt11)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt11 >= 1 )
    	        	        		{
    	        	        		    goto loop11;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt11++;
    	        	            }
    	        	            loop11: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:4: OPENBRACKET ( PLUS | MINUS ) ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? CLOSEBRACKET
    	    {
    	        /* 460:4: OPENBRACKET ( PLUS | MINUS ) ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? CLOSEBRACKET */
    	        mOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleCONSTANTVALUEEx;
    	        }



    	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleCONSTANTVALUEEx;
    	        }


    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:29: ( '0' .. '9' )+
    	        {
    	            int cnt13=0;

    	            for (;;)
    	            {
    	                int alt13=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt13=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt13)
    	        	{
    	        	    case 1:
    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleCONSTANTVALUEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt13 >= 1 )
    	        		{
    	        		    goto loop13;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleCONSTANTVALUEEx;
    	        	}
    	        	cnt13++;
    	            }
    	            loop13: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:41: ( DOT ( '0' .. '9' )+ )?
    	        {
    	            int alt15=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '.':
    	                	{
    	                		alt15=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt15)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:42: DOT ( '0' .. '9' )+
    	        	    {
    	        	        /* 460:42: DOT ( '0' .. '9' )+ */
    	        	        mDOT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }



    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:45: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt14=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt14=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt14=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt14)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt14 >= 1 )
    	        	        		{
    	        	        		    goto loop14;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt14++;
    	        	            }
    	        	            loop14: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:58: ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )?
    	        {
    	            int alt18=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                	{
    	                		alt18=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt18)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:59: 'E' ( PLUS | MINUS )? ( '0' .. '9' )+
    	        	    {
    	        	         this->matchc('E');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:62: ( PLUS | MINUS )?
    	        	        {
    	        	            int alt16=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt16=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt16)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleCONSTANTVALUEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:460:75: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt17=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt17=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt17=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt17)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt17 >= 1 )
    	        	        		{
    	        	        		    goto loop17;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt17++;
    	        	            }
    	        	            loop17: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	        /* 460:4: OPENBRACKET ( PLUS | MINUS ) ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( PLUS | MINUS )? ( '0' .. '9' )+ )? CLOSEBRACKET */
    	        mCLOSEBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleCONSTANTVALUEEx;
    	        }



    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTANTVALUEEx; /* Prevent compiler warnings */
    ruleCONSTANTVALUEEx: ;

}
// $ANTLR end CONSTANTVALUE

//   Comes from: 463:12: ( ( '\\t' | ' ' | ';' | '\\u000C' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mWHITESPACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = WHITESPACE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:463:12: ( ( '\\t' | ' ' | ';' | '\\u000C' )+ )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:463:14: ( '\\t' | ' ' | ';' | '\\u000C' )+
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:463:14: ( '\\t' | ' ' | ';' | '\\u000C' )+
        {
            int cnt20=0;

            for (;;)
            {
                int alt20=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\f':
        	case ' ':
        	case ';':
        		{
        			alt20=1;
        		}
        	    break;

        	}

        	switch (alt20)
        	{
        	    case 1:
        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
        	        {
        	            if ( this->LA(1) == '\t' || this->LA(1) == '\f' || this->LA(1) == ' ' || this->LA(1) == ';' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWHITESPACEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt20 >= 1 )
        		{
        		    goto loop20;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWHITESPACEEx;
        	}
        	cnt20++;
            }
            loop20: ;	/* Jump to here if this rule does not match */
        }

        {
             this->get_state()->get_channel() = HIDDEN; skip();
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

//   Comes from: 466:10: ( ( '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NEWLINE
 *
 * Looks to match the characters the constitute the token NEWLINE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNEWLINE()
{
    ANTLR_UINT32	_type;
      


    _type	    = NEWLINE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:466:10: ( ( '\\r' | '\\n' )+ )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:466:12: ( '\\r' | '\\n' )+
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:466:12: ( '\\r' | '\\n' )+
        {
            int cnt21=0;

            for (;;)
            {
                int alt21=2;
        	switch ( this->LA(1) )
        	{
        	case '\n':
        	case '\r':
        		{
        			alt21=1;
        		}
        	    break;

        	}

        	switch (alt21)
        	{
        	    case 1:
        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:
        	        {
        	            if ( this->LA(1) == '\n' || this->LA(1) == '\r' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleNEWLINEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt21 >= 1 )
        		{
        		    goto loop21;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleNEWLINEEx;
        	}
        	cnt21++;
            }
            loop21: ;	/* Jump to here if this rule does not match */
        }

        {
            this->get_state()->get_channel() = HIDDEN; skip();
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNEWLINEEx; /* Prevent compiler warnings */
    ruleNEWLINEEx: ;

}
// $ANTLR end NEWLINE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
BUGSLexer::mTokens()
{
    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:8: ( ABSOPENBRACKET | ARCCOSHOPENBRACKET | ARCCOSOPENBRACKET | ARCSINHOPENBRACKET | ARCSINOPENBRACKET | ARCTANHOPENBRACKET | ARCTANOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | BINOMIALOPENBRACKET | CATEGORICALOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CHISQUAREDOPENBRACKET | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | COSHOPENBRACKET | COSOPENBRACKET | CUMULATIVEOPENBRACKET | CUTOPENBRACKET | DENSITYOPENBRACKET | DEVIANCEOPENBRACKET | DIRICHLET2OPENBRACKET | DIRICHLETOPENBRACKET | DIV | DOT | DOUBLEEXPONENTIALOPENBRACKET | EQUALSOPENBRACKET | EQUALTO | EXPONENTIALOPENBRACKET | EXPOPENBRACKET | FLATOPENBRACKET | FORSTART | GAMMAOPENBRACKET | GAMMAPOPENBRACKET | GENFOPENBRACKET | GENGAMMAOPENBRACKET | GENLOGLIKOPENBRACKET | GENPARETOOPENBRACKET | GEVOPENBRACKET | HASH | ICLOGLOGOPENBRACKET | ILOGITOPENBRACKET | IN | INPRODOPENBRACKET | INTEGRALOPENBRACKET | INVERSEOPENBRACKET | LEFTPOINTER | LOGFACTOPENBRACKET | LOGGAMOPENBRACKET | LOGISTICOPENBRACKET | LOGITOPENBRACKET | LOGNORMALOPENBRACKET | LOGOPENBRACKET | MAXOPENBRACKET | MEANOPENBRACKET | MINOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | MVNORMALOPENBRACKET | MVSTUDENTTOPENBRACKET | NCHGOPENBRACKET | NEGATIVEBINOMIALOPENBRACKET | NORMALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PARETOOPENBRACKET | PHIOPENBRACKET | PLUS | POISSONOPENBRACKET | POSTPVALUEOPENBRACKET | POWOPENBRACKET | PRIORPVALUEOPENBRACKET | PROBITOPENBRACKET | REPLICATEPOSTOPENBRACKET | REPLICATEPRIOROPENBRACKET | ROUNDOPENBRACKET | SDOPENBRACKET | SINHOPENBRACKET | SINOPENBRACKET | SOLUTIONOPENBRACKET | SQRTOPENBRACKET | STEPOPENBRACKET | STUDENTTOPENBRACKET | SUMOPENBRACKET | TANHOPENBRACKET | TANOPENBRACKET | TILDE | TRUNCATIONBEGIN | TRUNCOPENBRACKET | UNIFORMOPENBRACKET | WEIBULLOPENBRACKET | WISHARTOPENBRACKET | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE | NEWLINE )

        ANTLR_UINT32 alt22;

        alt22=105;

        alt22 = cdfa22.predict(this, this->get_rec(), this->get_istream(), cdfa22 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt22)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:10: ABSOPENBRACKET
    	    {
    	        /* 1:10: ABSOPENBRACKET */
    	        mABSOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:25: ARCCOSHOPENBRACKET
    	    {
    	        /* 1:25: ARCCOSHOPENBRACKET */
    	        mARCCOSHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:44: ARCCOSOPENBRACKET
    	    {
    	        /* 1:44: ARCCOSOPENBRACKET */
    	        mARCCOSOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:62: ARCSINHOPENBRACKET
    	    {
    	        /* 1:62: ARCSINHOPENBRACKET */
    	        mARCSINHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:81: ARCSINOPENBRACKET
    	    {
    	        /* 1:81: ARCSINOPENBRACKET */
    	        mARCSINOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:99: ARCTANHOPENBRACKET
    	    {
    	        /* 1:99: ARCTANHOPENBRACKET */
    	        mARCTANHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:118: ARCTANOPENBRACKET
    	    {
    	        /* 1:118: ARCTANOPENBRACKET */
    	        mARCTANOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:136: BERNOULLIOPENBRACKET
    	    {
    	        /* 1:136: BERNOULLIOPENBRACKET */
    	        mBERNOULLIOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:157: BETAOPENBRACKET
    	    {
    	        /* 1:157: BETAOPENBRACKET */
    	        mBETAOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:173: BINOMIALOPENBRACKET
    	    {
    	        /* 1:173: BINOMIALOPENBRACKET */
    	        mBINOMIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:193: CATEGORICALOPENBRACKET
    	    {
    	        /* 1:193: CATEGORICALOPENBRACKET */
    	        mCATEGORICALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:216: CENSORBEGINWITHC
    	    {
    	        /* 1:216: CENSORBEGINWITHC */
    	        mCENSORBEGINWITHC();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:233: CENSORBEGINWITHI
    	    {
    	        /* 1:233: CENSORBEGINWITHI */
    	        mCENSORBEGINWITHI();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:250: CHISQUAREDOPENBRACKET
    	    {
    	        /* 1:250: CHISQUAREDOPENBRACKET */
    	        mCHISQUAREDOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:272: CLOGLOGOPENBRACKET
    	    {
    	        /* 1:272: CLOGLOGOPENBRACKET */
    	        mCLOGLOGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:291: CLOSEBRACE
    	    {
    	        /* 1:291: CLOSEBRACE */
    	        mCLOSEBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:302: CLOSEBRACKET
    	    {
    	        /* 1:302: CLOSEBRACKET */
    	        mCLOSEBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:315: CLOSESQUAREBRACKET
    	    {
    	        /* 1:315: CLOSESQUAREBRACKET */
    	        mCLOSESQUAREBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:334: COLON
    	    {
    	        /* 1:334: COLON */
    	        mCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:340: COMMA
    	    {
    	        /* 1:340: COMMA */
    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:346: COSHOPENBRACKET
    	    {
    	        /* 1:346: COSHOPENBRACKET */
    	        mCOSHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:362: COSOPENBRACKET
    	    {
    	        /* 1:362: COSOPENBRACKET */
    	        mCOSOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:377: CUMULATIVEOPENBRACKET
    	    {
    	        /* 1:377: CUMULATIVEOPENBRACKET */
    	        mCUMULATIVEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:399: CUTOPENBRACKET
    	    {
    	        /* 1:399: CUTOPENBRACKET */
    	        mCUTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:414: DENSITYOPENBRACKET
    	    {
    	        /* 1:414: DENSITYOPENBRACKET */
    	        mDENSITYOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:433: DEVIANCEOPENBRACKET
    	    {
    	        /* 1:433: DEVIANCEOPENBRACKET */
    	        mDEVIANCEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:453: DIRICHLET2OPENBRACKET
    	    {
    	        /* 1:453: DIRICHLET2OPENBRACKET */
    	        mDIRICHLET2OPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:475: DIRICHLETOPENBRACKET
    	    {
    	        /* 1:475: DIRICHLETOPENBRACKET */
    	        mDIRICHLETOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:496: DIV
    	    {
    	        /* 1:496: DIV */
    	        mDIV();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:500: DOT
    	    {
    	        /* 1:500: DOT */
    	        mDOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:504: DOUBLEEXPONENTIALOPENBRACKET
    	    {
    	        /* 1:504: DOUBLEEXPONENTIALOPENBRACKET */
    	        mDOUBLEEXPONENTIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:533: EQUALSOPENBRACKET
    	    {
    	        /* 1:533: EQUALSOPENBRACKET */
    	        mEQUALSOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:551: EQUALTO
    	    {
    	        /* 1:551: EQUALTO */
    	        mEQUALTO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:559: EXPONENTIALOPENBRACKET
    	    {
    	        /* 1:559: EXPONENTIALOPENBRACKET */
    	        mEXPONENTIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:582: EXPOPENBRACKET
    	    {
    	        /* 1:582: EXPOPENBRACKET */
    	        mEXPOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:597: FLATOPENBRACKET
    	    {
    	        /* 1:597: FLATOPENBRACKET */
    	        mFLATOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:613: FORSTART
    	    {
    	        /* 1:613: FORSTART */
    	        mFORSTART();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:622: GAMMAOPENBRACKET
    	    {
    	        /* 1:622: GAMMAOPENBRACKET */
    	        mGAMMAOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:639: GAMMAPOPENBRACKET
    	    {
    	        /* 1:639: GAMMAPOPENBRACKET */
    	        mGAMMAPOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:657: GENFOPENBRACKET
    	    {
    	        /* 1:657: GENFOPENBRACKET */
    	        mGENFOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:673: GENGAMMAOPENBRACKET
    	    {
    	        /* 1:673: GENGAMMAOPENBRACKET */
    	        mGENGAMMAOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:693: GENLOGLIKOPENBRACKET
    	    {
    	        /* 1:693: GENLOGLIKOPENBRACKET */
    	        mGENLOGLIKOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:714: GENPARETOOPENBRACKET
    	    {
    	        /* 1:714: GENPARETOOPENBRACKET */
    	        mGENPARETOOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:735: GEVOPENBRACKET
    	    {
    	        /* 1:735: GEVOPENBRACKET */
    	        mGEVOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:750: HASH
    	    {
    	        /* 1:750: HASH */
    	        mHASH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:755: ICLOGLOGOPENBRACKET
    	    {
    	        /* 1:755: ICLOGLOGOPENBRACKET */
    	        mICLOGLOGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:775: ILOGITOPENBRACKET
    	    {
    	        /* 1:775: ILOGITOPENBRACKET */
    	        mILOGITOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:793: IN
    	    {
    	        /* 1:793: IN */
    	        mIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:796: INPRODOPENBRACKET
    	    {
    	        /* 1:796: INPRODOPENBRACKET */
    	        mINPRODOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:814: INTEGRALOPENBRACKET
    	    {
    	        /* 1:814: INTEGRALOPENBRACKET */
    	        mINTEGRALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:834: INVERSEOPENBRACKET
    	    {
    	        /* 1:834: INVERSEOPENBRACKET */
    	        mINVERSEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:853: LEFTPOINTER
    	    {
    	        /* 1:853: LEFTPOINTER */
    	        mLEFTPOINTER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:865: LOGFACTOPENBRACKET
    	    {
    	        /* 1:865: LOGFACTOPENBRACKET */
    	        mLOGFACTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:884: LOGGAMOPENBRACKET
    	    {
    	        /* 1:884: LOGGAMOPENBRACKET */
    	        mLOGGAMOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:902: LOGISTICOPENBRACKET
    	    {
    	        /* 1:902: LOGISTICOPENBRACKET */
    	        mLOGISTICOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:922: LOGITOPENBRACKET
    	    {
    	        /* 1:922: LOGITOPENBRACKET */
    	        mLOGITOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:939: LOGNORMALOPENBRACKET
    	    {
    	        /* 1:939: LOGNORMALOPENBRACKET */
    	        mLOGNORMALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:960: LOGOPENBRACKET
    	    {
    	        /* 1:960: LOGOPENBRACKET */
    	        mLOGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:975: MAXOPENBRACKET
    	    {
    	        /* 1:975: MAXOPENBRACKET */
    	        mMAXOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:990: MEANOPENBRACKET
    	    {
    	        /* 1:990: MEANOPENBRACKET */
    	        mMEANOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1006: MINOPENBRACKET
    	    {
    	        /* 1:1006: MINOPENBRACKET */
    	        mMINOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1021: MINUS
    	    {
    	        /* 1:1021: MINUS */
    	        mMINUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1027: MODEL
    	    {
    	        /* 1:1027: MODEL */
    	        mMODEL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1033: MULT
    	    {
    	        /* 1:1033: MULT */
    	        mMULT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1038: MUTLTINOMIALOPENBRACKET
    	    {
    	        /* 1:1038: MUTLTINOMIALOPENBRACKET */
    	        mMUTLTINOMIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1062: MVNORMALOPENBRACKET
    	    {
    	        /* 1:1062: MVNORMALOPENBRACKET */
    	        mMVNORMALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1082: MVSTUDENTTOPENBRACKET
    	    {
    	        /* 1:1082: MVSTUDENTTOPENBRACKET */
    	        mMVSTUDENTTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1104: NCHGOPENBRACKET
    	    {
    	        /* 1:1104: NCHGOPENBRACKET */
    	        mNCHGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 69:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1120: NEGATIVEBINOMIALOPENBRACKET
    	    {
    	        /* 1:1120: NEGATIVEBINOMIALOPENBRACKET */
    	        mNEGATIVEBINOMIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 70:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1148: NORMALOPENBRACKET
    	    {
    	        /* 1:1148: NORMALOPENBRACKET */
    	        mNORMALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 71:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1166: OPENBRACE
    	    {
    	        /* 1:1166: OPENBRACE */
    	        mOPENBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 72:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1176: OPENBRACKET
    	    {
    	        /* 1:1176: OPENBRACKET */
    	        mOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 73:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1188: OPENSQUAREBRACKET
    	    {
    	        /* 1:1188: OPENSQUAREBRACKET */
    	        mOPENSQUAREBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 74:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1206: PARETOOPENBRACKET
    	    {
    	        /* 1:1206: PARETOOPENBRACKET */
    	        mPARETOOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 75:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1224: PHIOPENBRACKET
    	    {
    	        /* 1:1224: PHIOPENBRACKET */
    	        mPHIOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 76:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1239: PLUS
    	    {
    	        /* 1:1239: PLUS */
    	        mPLUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 77:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1244: POISSONOPENBRACKET
    	    {
    	        /* 1:1244: POISSONOPENBRACKET */
    	        mPOISSONOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 78:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1263: POSTPVALUEOPENBRACKET
    	    {
    	        /* 1:1263: POSTPVALUEOPENBRACKET */
    	        mPOSTPVALUEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 79:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1285: POWOPENBRACKET
    	    {
    	        /* 1:1285: POWOPENBRACKET */
    	        mPOWOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 80:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1300: PRIORPVALUEOPENBRACKET
    	    {
    	        /* 1:1300: PRIORPVALUEOPENBRACKET */
    	        mPRIORPVALUEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 81:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1323: PROBITOPENBRACKET
    	    {
    	        /* 1:1323: PROBITOPENBRACKET */
    	        mPROBITOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 82:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1341: REPLICATEPOSTOPENBRACKET
    	    {
    	        /* 1:1341: REPLICATEPOSTOPENBRACKET */
    	        mREPLICATEPOSTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 83:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1366: REPLICATEPRIOROPENBRACKET
    	    {
    	        /* 1:1366: REPLICATEPRIOROPENBRACKET */
    	        mREPLICATEPRIOROPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 84:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1392: ROUNDOPENBRACKET
    	    {
    	        /* 1:1392: ROUNDOPENBRACKET */
    	        mROUNDOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 85:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1409: SDOPENBRACKET
    	    {
    	        /* 1:1409: SDOPENBRACKET */
    	        mSDOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 86:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1423: SINHOPENBRACKET
    	    {
    	        /* 1:1423: SINHOPENBRACKET */
    	        mSINHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 87:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1439: SINOPENBRACKET
    	    {
    	        /* 1:1439: SINOPENBRACKET */
    	        mSINOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 88:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1454: SOLUTIONOPENBRACKET
    	    {
    	        /* 1:1454: SOLUTIONOPENBRACKET */
    	        mSOLUTIONOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 89:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1474: SQRTOPENBRACKET
    	    {
    	        /* 1:1474: SQRTOPENBRACKET */
    	        mSQRTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 90:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1490: STEPOPENBRACKET
    	    {
    	        /* 1:1490: STEPOPENBRACKET */
    	        mSTEPOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 91:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1506: STUDENTTOPENBRACKET
    	    {
    	        /* 1:1506: STUDENTTOPENBRACKET */
    	        mSTUDENTTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 92:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1526: SUMOPENBRACKET
    	    {
    	        /* 1:1526: SUMOPENBRACKET */
    	        mSUMOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 93:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1541: TANHOPENBRACKET
    	    {
    	        /* 1:1541: TANHOPENBRACKET */
    	        mTANHOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 94:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1557: TANOPENBRACKET
    	    {
    	        /* 1:1557: TANOPENBRACKET */
    	        mTANOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 95:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1572: TILDE
    	    {
    	        /* 1:1572: TILDE */
    	        mTILDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 96:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1578: TRUNCATIONBEGIN
    	    {
    	        /* 1:1578: TRUNCATIONBEGIN */
    	        mTRUNCATIONBEGIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 97:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1594: TRUNCOPENBRACKET
    	    {
    	        /* 1:1594: TRUNCOPENBRACKET */
    	        mTRUNCOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 98:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1611: UNIFORMOPENBRACKET
    	    {
    	        /* 1:1611: UNIFORMOPENBRACKET */
    	        mUNIFORMOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 99:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1630: WEIBULLOPENBRACKET
    	    {
    	        /* 1:1630: WEIBULLOPENBRACKET */
    	        mWEIBULLOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 100:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1649: WISHARTOPENBRACKET
    	    {
    	        /* 1:1649: WISHARTOPENBRACKET */
    	        mWISHARTOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 101:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1668: CONSTANTINT
    	    {
    	        /* 1:1668: CONSTANTINT */
    	        mCONSTANTINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 102:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1680: NODENAME
    	    {
    	        /* 1:1680: NODENAME */
    	        mNODENAME();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 103:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1689: CONSTANTVALUE
    	    {
    	        /* 1:1689: CONSTANTVALUE */
    	        mCONSTANTVALUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 104:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1703: WHITESPACE
    	    {
    	        /* 1:1703: WHITESPACE */
    	        mWHITESPACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 105:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:1:1714: NEWLINE
    	    {
    	        /* 1:1714: NEWLINE */
    	        mNEWLINE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
