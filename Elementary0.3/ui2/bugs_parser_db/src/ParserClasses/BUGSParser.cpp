/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g
 *     -                            On : 2013-05-06 12:10:38
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace BUGS {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   BUGSParserTokenNames[105+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ABSOPENBRACKET",
        (ANTLR_UINT8*) "ARCCOSHOPENBRACKET",
        (ANTLR_UINT8*) "ARCCOSOPENBRACKET",
        (ANTLR_UINT8*) "ARCSINHOPENBRACKET",
        (ANTLR_UINT8*) "ARCSINOPENBRACKET",
        (ANTLR_UINT8*) "ARCTANHOPENBRACKET",
        (ANTLR_UINT8*) "ARCTANOPENBRACKET",
        (ANTLR_UINT8*) "BERNOULLIOPENBRACKET",
        (ANTLR_UINT8*) "BETAOPENBRACKET",
        (ANTLR_UINT8*) "BINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "CATEGORICALOPENBRACKET",
        (ANTLR_UINT8*) "CENSORBEGINWITHC",
        (ANTLR_UINT8*) "CENSORBEGINWITHI",
        (ANTLR_UINT8*) "CHISQUAREDOPENBRACKET",
        (ANTLR_UINT8*) "CLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "CLOSEBRACE",
        (ANTLR_UINT8*) "CLOSEBRACKET",
        (ANTLR_UINT8*) "CLOSESQUAREBRACKET",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "CONSTANTINT",
        (ANTLR_UINT8*) "CONSTANTVALUE",
        (ANTLR_UINT8*) "COSHOPENBRACKET",
        (ANTLR_UINT8*) "COSOPENBRACKET",
        (ANTLR_UINT8*) "CUMULATIVEOPENBRACKET",
        (ANTLR_UINT8*) "CUTOPENBRACKET",
        (ANTLR_UINT8*) "DENSITYOPENBRACKET",
        (ANTLR_UINT8*) "DEVIANCEOPENBRACKET",
        (ANTLR_UINT8*) "DIRICHLET2OPENBRACKET",
        (ANTLR_UINT8*) "DIRICHLETOPENBRACKET",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "DOT",
        (ANTLR_UINT8*) "DOUBLEEXPONENTIALOPENBRACKET",
        (ANTLR_UINT8*) "EQUALSOPENBRACKET",
        (ANTLR_UINT8*) "EQUALTO",
        (ANTLR_UINT8*) "EXPONENTIALOPENBRACKET",
        (ANTLR_UINT8*) "EXPOPENBRACKET",
        (ANTLR_UINT8*) "FLATOPENBRACKET",
        (ANTLR_UINT8*) "FORSTART",
        (ANTLR_UINT8*) "GAMMAOPENBRACKET",
        (ANTLR_UINT8*) "GAMMAPOPENBRACKET",
        (ANTLR_UINT8*) "GENFOPENBRACKET",
        (ANTLR_UINT8*) "GENGAMMAOPENBRACKET",
        (ANTLR_UINT8*) "GENLOGLIKOPENBRACKET",
        (ANTLR_UINT8*) "GENPARETOOPENBRACKET",
        (ANTLR_UINT8*) "GEVOPENBRACKET",
        (ANTLR_UINT8*) "HASH",
        (ANTLR_UINT8*) "ICLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "ILOGITOPENBRACKET",
        (ANTLR_UINT8*) "IN",
        (ANTLR_UINT8*) "INPRODOPENBRACKET",
        (ANTLR_UINT8*) "INTEGRALOPENBRACKET",
        (ANTLR_UINT8*) "INVERSEOPENBRACKET",
        (ANTLR_UINT8*) "LEFTPOINTER",
        (ANTLR_UINT8*) "LOGFACTOPENBRACKET",
        (ANTLR_UINT8*) "LOGGAMOPENBRACKET",
        (ANTLR_UINT8*) "LOGISTICOPENBRACKET",
        (ANTLR_UINT8*) "LOGITOPENBRACKET",
        (ANTLR_UINT8*) "LOGNORMALOPENBRACKET",
        (ANTLR_UINT8*) "LOGOPENBRACKET",
        (ANTLR_UINT8*) "MAXOPENBRACKET",
        (ANTLR_UINT8*) "MEANOPENBRACKET",
        (ANTLR_UINT8*) "MINOPENBRACKET",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MODEL",
        (ANTLR_UINT8*) "MULT",
        (ANTLR_UINT8*) "MUTLTINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "MVNORMALOPENBRACKET",
        (ANTLR_UINT8*) "MVSTUDENTTOPENBRACKET",
        (ANTLR_UINT8*) "NCHGOPENBRACKET",
        (ANTLR_UINT8*) "NEGATIVEBINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "NEWLINE",
        (ANTLR_UINT8*) "NODENAME",
        (ANTLR_UINT8*) "NORMALOPENBRACKET",
        (ANTLR_UINT8*) "OPENBRACE",
        (ANTLR_UINT8*) "OPENBRACKET",
        (ANTLR_UINT8*) "OPENSQUAREBRACKET",
        (ANTLR_UINT8*) "PARETOOPENBRACKET",
        (ANTLR_UINT8*) "PHIOPENBRACKET",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "POISSONOPENBRACKET",
        (ANTLR_UINT8*) "POSTPVALUEOPENBRACKET",
        (ANTLR_UINT8*) "POWOPENBRACKET",
        (ANTLR_UINT8*) "PRIORPVALUEOPENBRACKET",
        (ANTLR_UINT8*) "PROBITOPENBRACKET",
        (ANTLR_UINT8*) "REPLICATEPOSTOPENBRACKET",
        (ANTLR_UINT8*) "REPLICATEPRIOROPENBRACKET",
        (ANTLR_UINT8*) "ROUNDOPENBRACKET",
        (ANTLR_UINT8*) "SDOPENBRACKET",
        (ANTLR_UINT8*) "SINHOPENBRACKET",
        (ANTLR_UINT8*) "SINOPENBRACKET",
        (ANTLR_UINT8*) "SOLUTIONOPENBRACKET",
        (ANTLR_UINT8*) "SQRTOPENBRACKET",
        (ANTLR_UINT8*) "STEPOPENBRACKET",
        (ANTLR_UINT8*) "STUDENTTOPENBRACKET",
        (ANTLR_UINT8*) "SUMOPENBRACKET",
        (ANTLR_UINT8*) "TANHOPENBRACKET",
        (ANTLR_UINT8*) "TANOPENBRACKET",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRUNCATIONBEGIN",
        (ANTLR_UINT8*) "TRUNCOPENBRACKET",
        (ANTLR_UINT8*) "UNIFORMOPENBRACKET",
        (ANTLR_UINT8*) "WEIBULLOPENBRACKET",
        (ANTLR_UINT8*) "WHITESPACE",
        (ANTLR_UINT8*) "WISHARTOPENBRACKET"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void BUGSParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( BUGSParserTokenNames );


}

void
BUGSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
BUGSParser::~BUGSParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return BUGSParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MODEL_in_prog756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MODEL_in_prog756( FOLLOW_MODEL_in_prog756_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_prog758_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040000), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_prog758( FOLLOW_OPENBRACE_in_prog758_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_prog760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_prog760( FOLLOW_statements_in_prog760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_prog762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_prog762( FOLLOW_CLOSEBRACE_in_prog762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements791_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements791( FOLLOW_stochasticNodeExpr_in_statements791_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements808_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements808( FOLLOW_stochasticNodeExpr_in_statements808_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements825_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements825( FOLLOW_logicalNodeExpr_in_statements825_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements842_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements842( FOLLOW_logicalNodeExpr_in_statements842_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements860_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements860( FOLLOW_logicalNodeExpr_in_statements860_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_startFor_in_statements870_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040000), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_startFor_in_statements870( FOLLOW_startFor_in_statements870_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_statements874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_statements874( FOLLOW_statements_in_statements874_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_endFor_in_statements876_bits[]	= { ANTLR_UINT64_LIT(0xA000040000040002), ANTLR_UINT64_LIT(0x0000000001001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_endFor_in_statements876( FOLLOW_endFor_in_statements876_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr911( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr911_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr929_bits[]	= { ANTLR_UINT64_LIT(0x0000000000018002), ANTLR_UINT64_LIT(0x0000008000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr929( FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr929_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_censor_in_stochasticNodeExpr938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_censor_in_stochasticNodeExpr938( FOLLOW_censor_in_stochasticNodeExpr938_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_truncation_in_stochasticNodeExpr946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_truncation_in_stochasticNodeExpr946( FOLLOW_truncation_in_stochasticNodeExpr946_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr962( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr962_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_uvStochasticNodeExpr980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_uvStochasticNodeExpr980( FOLLOW_uvNode_in_uvStochasticNodeExpr980_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_uvStochasticNodeExpr986_bits[]	= { ANTLR_UINT64_LIT(0x5003EA9000023800), ANTLR_UINT64_LIT(0x0000060400122600) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_uvStochasticNodeExpr986( FOLLOW_TILDE_in_uvStochasticNodeExpr986_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvDistribution_in_uvStochasticNodeExpr990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvDistribution_in_uvStochasticNodeExpr990( FOLLOW_uvDistribution_in_uvStochasticNodeExpr990_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_mvStochasticNodeExpr1017_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_mvStochasticNodeExpr1017( FOLLOW_uvNode_in_mvStochasticNodeExpr1017_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr1025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr1025( FOLLOW_TILDE_in_mvStochasticNodeExpr1025_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_categoricaldistribution_in_mvStochasticNodeExpr1029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_categoricaldistribution_in_mvStochasticNodeExpr1029( FOLLOW_categoricaldistribution_in_mvStochasticNodeExpr1029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvStochasticNodeExpr1036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvStochasticNodeExpr1036( FOLLOW_mvNode_in_mvStochasticNodeExpr1036_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr1042_bits[]	= { ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x00001000000001C0) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr1042( FOLLOW_TILDE_in_mvStochasticNodeExpr1042_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvDistribution_in_mvStochasticNodeExpr1046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvDistribution_in_mvStochasticNodeExpr1046( FOLLOW_mvDistribution_in_mvStochasticNodeExpr1046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CATEGORICALOPENBRACKET_in_categoricaldistribution1064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CATEGORICALOPENBRACKET_in_categoricaldistribution1064( FOLLOW_CATEGORICALOPENBRACKET_in_categoricaldistribution1064_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_categoricaldistribution1068_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_categoricaldistribution1068( FOLLOW_mvNode_in_categoricaldistribution1068_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_categoricaldistribution1070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_categoricaldistribution1070( FOLLOW_CLOSEBRACKET_in_categoricaldistribution1070_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_censor1090_bits[]	= { ANTLR_UINT64_LIT(0x0000000003800000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_censor1090( FOLLOW_set_in_censor1090_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_censor1113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_censor1113( FOLLOW_lowerWithOptionalUpper_in_censor1113_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_censor1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_censor1127( FOLLOW_upperWithOptionalLower_in_censor1127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_censor1136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_censor1136( FOLLOW_CLOSEBRACKET_in_censor1136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCATIONBEGIN_in_truncation1151_bits[]	= { ANTLR_UINT64_LIT(0x0000000003800000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCATIONBEGIN_in_truncation1151( FOLLOW_TRUNCATIONBEGIN_in_truncation1151_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_truncation1168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_truncation1168( FOLLOW_lowerWithOptionalUpper_in_truncation1168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_truncation1181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_truncation1181( FOLLOW_upperWithOptionalLower_in_truncation1181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_truncation1190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_truncation1190( FOLLOW_CLOSEBRACKET_in_truncation1190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_lowerWithOptionalUpper1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_lowerWithOptionalUpper1209( FOLLOW_distributionParameter_in_lowerWithOptionalUpper1209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lowerWithOptionalUpper1216_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000002), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lowerWithOptionalUpper1216( FOLLOW_COMMA_in_lowerWithOptionalUpper1216_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_lowerWithOptionalUpper1225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_lowerWithOptionalUpper1225( FOLLOW_distributionParameter_in_lowerWithOptionalUpper1225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_upperWithOptionalLower1248_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_upperWithOptionalLower1248( FOLLOW_distributionParameter_in_upperWithOptionalLower1248_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_upperWithOptionalLower1256_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_upperWithOptionalLower1256( FOLLOW_COMMA_in_upperWithOptionalLower1256_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_upperWithOptionalLower1263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_upperWithOptionalLower1263( FOLLOW_distributionParameter_in_upperWithOptionalLower1263_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalNodeExpr1294_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalNodeExpr1294( FOLLOW_uvNode_in_logicalNodeExpr1294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_logicalNodeExpr1301_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_logicalNodeExpr1301( FOLLOW_linkFunction_in_logicalNodeExpr1301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr1308_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr1308( FOLLOW_LEFTPOINTER_in_logicalNodeExpr1308_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1312( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_logicalNodeExpr1320_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_logicalNodeExpr1320( FOLLOW_mvNode_in_logicalNodeExpr1320_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr1325_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr1325( FOLLOW_LEFTPOINTER_in_logicalNodeExpr1325_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1331( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_linkFunction1349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_linkFunction1349( FOLLOW_LOGOPENBRACKET_in_linkFunction1349_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction1351( FOLLOW_uvNode_in_linkFunction1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction1353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction1353( FOLLOW_CLOSEBRACKET_in_linkFunction1353_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_linkFunction1361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_linkFunction1361( FOLLOW_LOGITOPENBRACKET_in_linkFunction1361_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction1363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction1363( FOLLOW_uvNode_in_linkFunction1363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction1365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction1365( FOLLOW_CLOSEBRACKET_in_linkFunction1365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction1372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction1372( FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction1372_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction1374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction1374( FOLLOW_uvNode_in_linkFunction1374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction1376( FOLLOW_CLOSEBRACKET_in_linkFunction1376_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_linkFunction1383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_linkFunction1383( FOLLOW_PROBITOPENBRACKET_in_linkFunction1383_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction1385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction1385( FOLLOW_uvNode_in_linkFunction1385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction1387( FOLLOW_CLOSEBRACKET_in_linkFunction1387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalnodeadditiveExpression_in_exprWithNodesFunctions1404_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalnodeadditiveExpression_in_exprWithNodesFunctions1404( FOLLOW_logicalnodeadditiveExpression_in_exprWithNodesFunctions1404_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1426( FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1426_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_logicalnodeadditiveExpression1433_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PLUS_in_logicalnodeadditiveExpression1433( FOLLOW_PLUS_in_logicalnodeadditiveExpression1433_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_logicalnodeadditiveExpression1439_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_logicalnodeadditiveExpression1439( FOLLOW_MINUS_in_logicalnodeadditiveExpression1439_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1448( FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1448_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1476_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1476( FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1476_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MULT_in_logicalnodemultExpression1483_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MULT_in_logicalnodemultExpression1483( FOLLOW_MULT_in_logicalnodemultExpression1483_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_logicalnodemultExpression1490_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIV_in_logicalnodemultExpression1490( FOLLOW_DIV_in_logicalnodemultExpression1490_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1499_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1499( FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1499_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_logicalnodeexprAtom1520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_logicalnodeexprAtom1520( FOLLOW_unaryExpression_in_logicalnodeexprAtom1520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalnodeexprAtom1527_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalnodeexprAtom1527( FOLLOW_uvNode_in_logicalnodeexprAtom1527_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_logicalnodeexprAtom1534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_logicalnodeexprAtom1534( FOLLOW_MINUS_in_logicalnodeexprAtom1534_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalnodeexprAtom1536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalnodeexprAtom1536( FOLLOW_uvNode_in_logicalnodeexprAtom1536_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1543_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1543( FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1543_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1547( FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1549( FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_logicalnodeexprAtom1556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_logicalnodeexprAtom1556( FOLLOW_MINUS_in_logicalnodeexprAtom1556_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1558_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1558( FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1558_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1562( FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1564( FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1564_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_logicalnodeexprAtom1571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_logicalnodeexprAtom1571( FOLLOW_scalarFunctions_in_logicalnodeexprAtom1571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_logicalnodeexprAtom1578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_logicalnodeexprAtom1578( FOLLOW_vectorFunctions_in_logicalnodeexprAtom1578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_logicalnodeexprAtom1585_bits[]	= { ANTLR_UINT64_LIT(0xAC981120FC0405F0), ANTLR_UINT64_LIT(0x00000133EFE40005) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_logicalnodeexprAtom1585( FOLLOW_MINUS_in_logicalnodeexprAtom1585_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_logicalnodeexprAtom1587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_logicalnodeexprAtom1587( FOLLOW_scalarFunctions_in_logicalnodeexprAtom1587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_logicalnodeexprAtom1594_bits[]	= { ANTLR_UINT64_LIT(0x0140000000000000), ANTLR_UINT64_LIT(0x0000000810000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_logicalnodeexprAtom1594( FOLLOW_MINUS_in_logicalnodeexprAtom1594_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_logicalnodeexprAtom1596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_logicalnodeexprAtom1596( FOLLOW_vectorFunctions_in_logicalnodeexprAtom1596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_uvNode1614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_uvNode1614( FOLLOW_NODENAME_in_uvNode1614_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_uvNode1622_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_uvNode1622( FOLLOW_OPENSQUAREBRACKET_in_uvNode1622_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode1626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000A00000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode1626( FOLLOW_expression_in_uvNode1626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uvNode1635_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uvNode1635( FOLLOW_COMMA_in_uvNode1635_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode1639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000A00000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode1639( FOLLOW_expression_in_uvNode1639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_uvNode1650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_uvNode1650( FOLLOW_CLOSESQUAREBRACKET_in_uvNode1650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_mvNode1669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_mvNode1669( FOLLOW_NODENAME_in_mvNode1669_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_mvNode1671_bits[]	= { ANTLR_UINT64_LIT(0x0000000003800000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_mvNode1671( FOLLOW_OPENSQUAREBRACKET_in_mvNode1671_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiIndices_in_mvNode1675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiIndices_in_mvNode1675( FOLLOW_multiIndices_in_mvNode1675_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_mvNode1677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_mvNode1677( FOLLOW_CLOSESQUAREBRACKET_in_mvNode1677_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_additiveExpression_in_expression1695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_additiveExpression_in_expression1695( FOLLOW_additiveExpression_in_expression1695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multExpression_in_additiveExpression1718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multExpression_in_additiveExpression1718( FOLLOW_multExpression_in_additiveExpression1718_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_additiveExpression1725_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PLUS_in_additiveExpression1725( FOLLOW_PLUS_in_additiveExpression1725_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_additiveExpression1731_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_additiveExpression1731( FOLLOW_MINUS_in_additiveExpression1731_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multExpression_in_additiveExpression1740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000080008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multExpression_in_additiveExpression1740( FOLLOW_multExpression_in_additiveExpression1740_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprAtom_in_multExpression1767_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprAtom_in_multExpression1767( FOLLOW_exprAtom_in_multExpression1767_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MULT_in_multExpression1774_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MULT_in_multExpression1774( FOLLOW_MULT_in_multExpression1774_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_multExpression1781_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIV_in_multExpression1781( FOLLOW_DIV_in_multExpression1781_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprAtom_in_multExpression1790_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprAtom_in_multExpression1790( FOLLOW_exprAtom_in_multExpression1790_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprAtom1810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprAtom1810( FOLLOW_unaryExpression_in_exprAtom1810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_exprAtom1817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_exprAtom1817( FOLLOW_uvNode_in_exprAtom1817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprAtom1824_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprAtom1824( FOLLOW_OPENBRACKET_in_exprAtom1824_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_exprAtom1828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_exprAtom1828( FOLLOW_expression_in_exprAtom1828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprAtom1830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprAtom1830( FOLLOW_CLOSEBRACKET_in_exprAtom1830_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_unaryExpression1848_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_unaryExpression1848( FOLLOW_MINUS_in_unaryExpression1848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression1850_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression1850( FOLLOW_CONSTANTVALUE_in_unaryExpression1850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression1857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression1857( FOLLOW_CONSTANTINT_in_unaryExpression1857_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_unaryExpression1865_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_unaryExpression1865( FOLLOW_MINUS_in_unaryExpression1865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression1867_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression1867( FOLLOW_CONSTANTINT_in_unaryExpression1867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression1874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression1874( FOLLOW_CONSTANTVALUE_in_unaryExpression1874_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1893( FOLLOW_multiDimExpression_in_multiIndices1893_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multiIndices1900_bits[]	= { ANTLR_UINT64_LIT(0x0000000003800000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multiIndices1900( FOLLOW_COMMA_in_multiIndices1900_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1904( FOLLOW_multiDimExpression_in_multiIndices1904_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_multiDimExpression1943_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_multiDimExpression1943( FOLLOW_OPENBRACKET_in_multiDimExpression1943_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1947( FOLLOW_expression_in_multiDimExpression1947_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1949_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1949( FOLLOW_COLON_in_multiDimExpression1949_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1953_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1953( FOLLOW_expression_in_multiDimExpression1953_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multiDimExpression1955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multiDimExpression1955( FOLLOW_CLOSEBRACKET_in_multiDimExpression1955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1965( FOLLOW_expression_in_multiDimExpression1965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1971_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1971( FOLLOW_COLON_in_multiDimExpression1971_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1975( FOLLOW_expression_in_multiDimExpression1975_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FORSTART_in_startFor1995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FORSTART_in_startFor1995( FOLLOW_FORSTART_in_startFor1995_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_startFor1997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_startFor1997( FOLLOW_OPENBRACKET_in_startFor1997_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopVariable_in_startFor1999_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopVariable_in_startFor1999( FOLLOW_loopVariable_in_startFor1999_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_IN_in_startFor2001_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_IN_in_startFor2001( FOLLOW_IN_in_startFor2001_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopBegin_in_startFor2003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopBegin_in_startFor2003( FOLLOW_loopBegin_in_startFor2003_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_startFor2005_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_startFor2005( FOLLOW_COLON_in_startFor2005_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopEnd_in_startFor2007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopEnd_in_startFor2007( FOLLOW_loopEnd_in_startFor2007_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_startFor2009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_startFor2009( FOLLOW_CLOSEBRACKET_in_startFor2009_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_startFor2011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_startFor2011( FOLLOW_OPENBRACE_in_startFor2011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_endFor2027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_endFor2027( FOLLOW_CLOSEBRACE_in_endFor2027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_loopVariable2039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_loopVariable2039( FOLLOW_NODENAME_in_loopVariable2039_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_loopBegin2055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_loopBegin2055( FOLLOW_expression_in_loopBegin2055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_loopEnd2073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_loopEnd2073( FOLLOW_expression_in_loopEnd2073_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ABSOPENBRACKET_in_scalarFunctions2327_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ABSOPENBRACKET_in_scalarFunctions2327( FOLLOW_ABSOPENBRACKET_in_scalarFunctions2327_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2331( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2333( FOLLOW_CLOSEBRACKET_in_scalarFunctions2333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ARCCOSOPENBRACKET_in_scalarFunctions2340_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ARCCOSOPENBRACKET_in_scalarFunctions2340( FOLLOW_ARCCOSOPENBRACKET_in_scalarFunctions2340_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2344( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2344_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2346( FOLLOW_CLOSEBRACKET_in_scalarFunctions2346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ARCCOSHOPENBRACKET_in_scalarFunctions2353_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ARCCOSHOPENBRACKET_in_scalarFunctions2353( FOLLOW_ARCCOSHOPENBRACKET_in_scalarFunctions2353_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2357( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2359( FOLLOW_CLOSEBRACKET_in_scalarFunctions2359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ARCSINOPENBRACKET_in_scalarFunctions2366_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ARCSINOPENBRACKET_in_scalarFunctions2366( FOLLOW_ARCSINOPENBRACKET_in_scalarFunctions2366_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2370( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2372( FOLLOW_CLOSEBRACKET_in_scalarFunctions2372_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ARCSINHOPENBRACKET_in_scalarFunctions2379_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ARCSINHOPENBRACKET_in_scalarFunctions2379( FOLLOW_ARCSINHOPENBRACKET_in_scalarFunctions2379_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2383( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2385( FOLLOW_CLOSEBRACKET_in_scalarFunctions2385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ARCTANOPENBRACKET_in_scalarFunctions2392_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ARCTANOPENBRACKET_in_scalarFunctions2392( FOLLOW_ARCTANOPENBRACKET_in_scalarFunctions2392_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2396( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2396_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2398( FOLLOW_CLOSEBRACKET_in_scalarFunctions2398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_scalarFunctions2405_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_scalarFunctions2405( FOLLOW_CLOGLOGOPENBRACKET_in_scalarFunctions2405_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2410( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2410_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2412( FOLLOW_CLOSEBRACKET_in_scalarFunctions2412_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COSOPENBRACKET_in_scalarFunctions2419_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COSOPENBRACKET_in_scalarFunctions2419( FOLLOW_COSOPENBRACKET_in_scalarFunctions2419_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2423( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2423_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2425_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2425( FOLLOW_CLOSEBRACKET_in_scalarFunctions2425_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COSHOPENBRACKET_in_scalarFunctions2432_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COSHOPENBRACKET_in_scalarFunctions2432( FOLLOW_COSHOPENBRACKET_in_scalarFunctions2432_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2436( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2438_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2438( FOLLOW_CLOSEBRACKET_in_scalarFunctions2438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CUMULATIVEOPENBRACKET_in_scalarFunctions2445_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CUMULATIVEOPENBRACKET_in_scalarFunctions2445( FOLLOW_CUMULATIVEOPENBRACKET_in_scalarFunctions2445_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2449( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2451_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2451( FOLLOW_COMMA_in_scalarFunctions2451_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2455( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2457_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2457( FOLLOW_CLOSEBRACKET_in_scalarFunctions2457_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CUTOPENBRACKET_in_scalarFunctions2466_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CUTOPENBRACKET_in_scalarFunctions2466( FOLLOW_CUTOPENBRACKET_in_scalarFunctions2466_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2470_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2470( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2470_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2472( FOLLOW_CLOSEBRACKET_in_scalarFunctions2472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DENSITYOPENBRACKET_in_scalarFunctions2479_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DENSITYOPENBRACKET_in_scalarFunctions2479( FOLLOW_DENSITYOPENBRACKET_in_scalarFunctions2479_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2483( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2485_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2485( FOLLOW_COMMA_in_scalarFunctions2485_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2489( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2491( FOLLOW_CLOSEBRACKET_in_scalarFunctions2491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DEVIANCEOPENBRACKET_in_scalarFunctions2500_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DEVIANCEOPENBRACKET_in_scalarFunctions2500( FOLLOW_DEVIANCEOPENBRACKET_in_scalarFunctions2500_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2504( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2504_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2506_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2506( FOLLOW_COMMA_in_scalarFunctions2506_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2510( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2510_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2512( FOLLOW_CLOSEBRACKET_in_scalarFunctions2512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_EQUALSOPENBRACKET_in_scalarFunctions2521_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_EQUALSOPENBRACKET_in_scalarFunctions2521( FOLLOW_EQUALSOPENBRACKET_in_scalarFunctions2521_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2525( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2525_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2527_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2527( FOLLOW_COMMA_in_scalarFunctions2527_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2531( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2533( FOLLOW_CLOSEBRACKET_in_scalarFunctions2533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_EXPOPENBRACKET_in_scalarFunctions2542_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_EXPOPENBRACKET_in_scalarFunctions2542( FOLLOW_EXPOPENBRACKET_in_scalarFunctions2542_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2546( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2546_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2549( FOLLOW_CLOSEBRACKET_in_scalarFunctions2549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GAMMAPOPENBRACKET_in_scalarFunctions2558_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GAMMAPOPENBRACKET_in_scalarFunctions2558( FOLLOW_GAMMAPOPENBRACKET_in_scalarFunctions2558_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2562( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2564_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2564( FOLLOW_COMMA_in_scalarFunctions2564_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2568( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2568_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2571( FOLLOW_CLOSEBRACKET_in_scalarFunctions2571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ILOGITOPENBRACKET_in_scalarFunctions2580_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ILOGITOPENBRACKET_in_scalarFunctions2580( FOLLOW_ILOGITOPENBRACKET_in_scalarFunctions2580_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2584( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2586( FOLLOW_CLOSEBRACKET_in_scalarFunctions2586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ICLOGLOGOPENBRACKET_in_scalarFunctions2595_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ICLOGLOGOPENBRACKET_in_scalarFunctions2595( FOLLOW_ICLOGLOGOPENBRACKET_in_scalarFunctions2595_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2599( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2599_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2601( FOLLOW_CLOSEBRACKET_in_scalarFunctions2601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INTEGRALOPENBRACKET_in_scalarFunctions2610_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INTEGRALOPENBRACKET_in_scalarFunctions2610( FOLLOW_INTEGRALOPENBRACKET_in_scalarFunctions2610_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2614( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2616_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2616( FOLLOW_COMMA_in_scalarFunctions2616_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2620( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2624_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2624( FOLLOW_COMMA_in_scalarFunctions2624_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2628( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2630_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2630( FOLLOW_COMMA_in_scalarFunctions2630_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2634( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2636( FOLLOW_CLOSEBRACKET_in_scalarFunctions2636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_scalarFunctions2645_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_scalarFunctions2645( FOLLOW_LOGOPENBRACKET_in_scalarFunctions2645_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2649( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2651( FOLLOW_CLOSEBRACKET_in_scalarFunctions2651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGFACTOPENBRACKET_in_scalarFunctions2660_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGFACTOPENBRACKET_in_scalarFunctions2660( FOLLOW_LOGFACTOPENBRACKET_in_scalarFunctions2660_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2664( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2666( FOLLOW_CLOSEBRACKET_in_scalarFunctions2666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGGAMOPENBRACKET_in_scalarFunctions2675_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGGAMOPENBRACKET_in_scalarFunctions2675( FOLLOW_LOGGAMOPENBRACKET_in_scalarFunctions2675_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2679( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2681( FOLLOW_CLOSEBRACKET_in_scalarFunctions2681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_scalarFunctions2690_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_scalarFunctions2690( FOLLOW_LOGITOPENBRACKET_in_scalarFunctions2690_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2694_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2694( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2696( FOLLOW_CLOSEBRACKET_in_scalarFunctions2696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MAXOPENBRACKET_in_scalarFunctions2705_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MAXOPENBRACKET_in_scalarFunctions2705( FOLLOW_MAXOPENBRACKET_in_scalarFunctions2705_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2709( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2709_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2711_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2711( FOLLOW_COMMA_in_scalarFunctions2711_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2715( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2717( FOLLOW_CLOSEBRACKET_in_scalarFunctions2717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINOPENBRACKET_in_scalarFunctions2726_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINOPENBRACKET_in_scalarFunctions2726( FOLLOW_MINOPENBRACKET_in_scalarFunctions2726_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2730( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2732_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2732( FOLLOW_COMMA_in_scalarFunctions2732_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2736( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2738( FOLLOW_CLOSEBRACKET_in_scalarFunctions2738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PHIOPENBRACKET_in_scalarFunctions2747_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PHIOPENBRACKET_in_scalarFunctions2747( FOLLOW_PHIOPENBRACKET_in_scalarFunctions2747_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2751( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2753_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2753( FOLLOW_CLOSEBRACKET_in_scalarFunctions2753_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_POSTPVALUEOPENBRACKET_in_scalarFunctions2762_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_POSTPVALUEOPENBRACKET_in_scalarFunctions2762( FOLLOW_POSTPVALUEOPENBRACKET_in_scalarFunctions2762_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2766( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2768( FOLLOW_CLOSEBRACKET_in_scalarFunctions2768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_POWOPENBRACKET_in_scalarFunctions2777_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_POWOPENBRACKET_in_scalarFunctions2777( FOLLOW_POWOPENBRACKET_in_scalarFunctions2777_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2781( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2783_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2783( FOLLOW_COMMA_in_scalarFunctions2783_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2787( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2789( FOLLOW_CLOSEBRACKET_in_scalarFunctions2789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PRIORPVALUEOPENBRACKET_in_scalarFunctions2798_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PRIORPVALUEOPENBRACKET_in_scalarFunctions2798( FOLLOW_PRIORPVALUEOPENBRACKET_in_scalarFunctions2798_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2802( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2804( FOLLOW_CLOSEBRACKET_in_scalarFunctions2804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_scalarFunctions2813_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_scalarFunctions2813( FOLLOW_PROBITOPENBRACKET_in_scalarFunctions2813_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2817( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2819( FOLLOW_CLOSEBRACKET_in_scalarFunctions2819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_REPLICATEPOSTOPENBRACKET_in_scalarFunctions2828_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_REPLICATEPOSTOPENBRACKET_in_scalarFunctions2828( FOLLOW_REPLICATEPOSTOPENBRACKET_in_scalarFunctions2828_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2832( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2834( FOLLOW_CLOSEBRACKET_in_scalarFunctions2834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_REPLICATEPRIOROPENBRACKET_in_scalarFunctions2843_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_REPLICATEPRIOROPENBRACKET_in_scalarFunctions2843( FOLLOW_REPLICATEPRIOROPENBRACKET_in_scalarFunctions2843_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2847( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2847_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2849_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2849( FOLLOW_CLOSEBRACKET_in_scalarFunctions2849_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ROUNDOPENBRACKET_in_scalarFunctions2858_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ROUNDOPENBRACKET_in_scalarFunctions2858( FOLLOW_ROUNDOPENBRACKET_in_scalarFunctions2858_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2862( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2864( FOLLOW_CLOSEBRACKET_in_scalarFunctions2864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SINOPENBRACKET_in_scalarFunctions2873_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SINOPENBRACKET_in_scalarFunctions2873( FOLLOW_SINOPENBRACKET_in_scalarFunctions2873_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2877( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2879( FOLLOW_CLOSEBRACKET_in_scalarFunctions2879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SINHOPENBRACKET_in_scalarFunctions2888_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SINHOPENBRACKET_in_scalarFunctions2888( FOLLOW_SINHOPENBRACKET_in_scalarFunctions2888_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2892( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2894_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2894( FOLLOW_CLOSEBRACKET_in_scalarFunctions2894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SOLUTIONOPENBRACKET_in_scalarFunctions2903_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SOLUTIONOPENBRACKET_in_scalarFunctions2903( FOLLOW_SOLUTIONOPENBRACKET_in_scalarFunctions2903_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2907( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2909_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2909( FOLLOW_COMMA_in_scalarFunctions2909_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2913( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2913_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2917_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2917( FOLLOW_COMMA_in_scalarFunctions2917_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2921( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_scalarFunctions2923_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_scalarFunctions2923( FOLLOW_COMMA_in_scalarFunctions2923_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2927( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2929_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2929( FOLLOW_CLOSEBRACKET_in_scalarFunctions2929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SQRTOPENBRACKET_in_scalarFunctions2938_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SQRTOPENBRACKET_in_scalarFunctions2938( FOLLOW_SQRTOPENBRACKET_in_scalarFunctions2938_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2942( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2944( FOLLOW_CLOSEBRACKET_in_scalarFunctions2944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_STEPOPENBRACKET_in_scalarFunctions2953_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_STEPOPENBRACKET_in_scalarFunctions2953( FOLLOW_STEPOPENBRACKET_in_scalarFunctions2953_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2957( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2957_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2959( FOLLOW_CLOSEBRACKET_in_scalarFunctions2959_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TANOPENBRACKET_in_scalarFunctions2968_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TANOPENBRACKET_in_scalarFunctions2968( FOLLOW_TANOPENBRACKET_in_scalarFunctions2968_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2972( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2972_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2974( FOLLOW_CLOSEBRACKET_in_scalarFunctions2974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TANHOPENBRACKET_in_scalarFunctions2983_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TANHOPENBRACKET_in_scalarFunctions2983( FOLLOW_TANHOPENBRACKET_in_scalarFunctions2983_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions2987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions2987( FOLLOW_exprWithNodesFunctions_in_scalarFunctions2987_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions2989_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions2989( FOLLOW_CLOSEBRACKET_in_scalarFunctions2989_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCOPENBRACKET_in_scalarFunctions2998_bits[]	= { ANTLR_UINT64_LIT(0xADD81120FF0405F0), ANTLR_UINT64_LIT(0x0000013BFFE4900F) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCOPENBRACKET_in_scalarFunctions2998( FOLLOW_TRUNCOPENBRACKET_in_scalarFunctions2998_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions3002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions3002( FOLLOW_exprWithNodesFunctions_in_scalarFunctions3002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions3004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions3004( FOLLOW_CLOSEBRACKET_in_scalarFunctions3004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MEANOPENBRACKET_in_vectorFunctions3027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MEANOPENBRACKET_in_vectorFunctions3027( FOLLOW_MEANOPENBRACKET_in_vectorFunctions3027_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3029( FOLLOW_mvNode_in_vectorFunctions3029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions3031_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions3031( FOLLOW_CLOSEBRACKET_in_vectorFunctions3031_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions3038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions3038( FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions3038_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3040( FOLLOW_mvNode_in_vectorFunctions3040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions3042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions3042( FOLLOW_CLOSEBRACKET_in_vectorFunctions3042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SDOPENBRACKET_in_vectorFunctions3049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SDOPENBRACKET_in_vectorFunctions3049( FOLLOW_SDOPENBRACKET_in_vectorFunctions3049_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3051_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3051( FOLLOW_mvNode_in_vectorFunctions3051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions3053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions3053( FOLLOW_CLOSEBRACKET_in_vectorFunctions3053_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_SUMOPENBRACKET_in_vectorFunctions3060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_SUMOPENBRACKET_in_vectorFunctions3060( FOLLOW_SUMOPENBRACKET_in_vectorFunctions3060_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3062( FOLLOW_mvNode_in_vectorFunctions3062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions3064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions3064( FOLLOW_CLOSEBRACKET_in_vectorFunctions3064_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INPRODOPENBRACKET_in_vectorFunctions3071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INPRODOPENBRACKET_in_vectorFunctions3071( FOLLOW_INPRODOPENBRACKET_in_vectorFunctions3071_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3075( FOLLOW_mvNode_in_vectorFunctions3075_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vectorFunctions3077_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_vectorFunctions3077( FOLLOW_COMMA_in_vectorFunctions3077_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions3081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions3081( FOLLOW_mvNode_in_vectorFunctions3081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions3083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions3083( FOLLOW_CLOSEBRACKET_in_vectorFunctions3083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteUnivariate_in_uvDistribution3101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteUnivariate_in_uvDistribution3101( FOLLOW_discreteUnivariate_in_uvDistribution3101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousUnivariate_in_uvDistribution3108_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousUnivariate_in_uvDistribution3108( FOLLOW_continuousUnivariate_in_uvDistribution3108_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteMultivariate_in_mvDistribution3125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteMultivariate_in_mvDistribution3125( FOLLOW_discreteMultivariate_in_mvDistribution3125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousMultivariate_in_mvDistribution3132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousMultivariate_in_mvDistribution3132( FOLLOW_continuousMultivariate_in_mvDistribution3132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_bernoulli_in_discreteUnivariate3149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_bernoulli_in_discreteUnivariate3149( FOLLOW_bernoulli_in_discreteUnivariate3149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_binomial_in_discreteUnivariate3156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_binomial_in_discreteUnivariate3156( FOLLOW_binomial_in_discreteUnivariate3156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_negativebinomial_in_discreteUnivariate3163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_negativebinomial_in_discreteUnivariate3163( FOLLOW_negativebinomial_in_discreteUnivariate3163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_poisson_in_discreteUnivariate3170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_poisson_in_discreteUnivariate3170( FOLLOW_poisson_in_discreteUnivariate3170_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_nchg_in_discreteUnivariate3177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_nchg_in_discreteUnivariate3177( FOLLOW_nchg_in_discreteUnivariate3177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_beta_in_continuousUnivariate3194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_beta_in_continuousUnivariate3194( FOLLOW_beta_in_continuousUnivariate3194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_chisquared_in_continuousUnivariate3201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_chisquared_in_continuousUnivariate3201( FOLLOW_chisquared_in_continuousUnivariate3201_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ddexp_in_continuousUnivariate3208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ddexp_in_continuousUnivariate3208( FOLLOW_ddexp_in_continuousUnivariate3208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exp_in_continuousUnivariate3215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exp_in_continuousUnivariate3215( FOLLOW_exp_in_continuousUnivariate3215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_flat_in_continuousUnivariate3222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_flat_in_continuousUnivariate3222( FOLLOW_flat_in_continuousUnivariate3222_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_gamma_in_continuousUnivariate3229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_gamma_in_continuousUnivariate3229( FOLLOW_gamma_in_continuousUnivariate3229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_gev_in_continuousUnivariate3236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_gev_in_continuousUnivariate3236( FOLLOW_gev_in_continuousUnivariate3236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_genf_in_continuousUnivariate3243_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_genf_in_continuousUnivariate3243( FOLLOW_genf_in_continuousUnivariate3243_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_gengamma_in_continuousUnivariate3250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_gengamma_in_continuousUnivariate3250( FOLLOW_gengamma_in_continuousUnivariate3250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_genpareto_in_continuousUnivariate3257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_genpareto_in_continuousUnivariate3257( FOLLOW_genpareto_in_continuousUnivariate3257_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_genloglik_in_continuousUnivariate3264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_genloglik_in_continuousUnivariate3264( FOLLOW_genloglik_in_continuousUnivariate3264_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lognormal_in_continuousUnivariate3271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lognormal_in_continuousUnivariate3271( FOLLOW_lognormal_in_continuousUnivariate3271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logistic_in_continuousUnivariate3278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logistic_in_continuousUnivariate3278( FOLLOW_logistic_in_continuousUnivariate3278_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_normal_in_continuousUnivariate3285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_normal_in_continuousUnivariate3285( FOLLOW_normal_in_continuousUnivariate3285_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_pareto_in_continuousUnivariate3292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_pareto_in_continuousUnivariate3292( FOLLOW_pareto_in_continuousUnivariate3292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_studentt_in_continuousUnivariate3299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_studentt_in_continuousUnivariate3299( FOLLOW_studentt_in_continuousUnivariate3299_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uniform_in_continuousUnivariate3306_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uniform_in_continuousUnivariate3306( FOLLOW_uniform_in_continuousUnivariate3306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_weibull_in_continuousUnivariate3313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_weibull_in_continuousUnivariate3313( FOLLOW_weibull_in_continuousUnivariate3313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multinomial_in_discreteMultivariate3330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multinomial_in_discreteMultivariate3330( FOLLOW_multinomial_in_discreteMultivariate3330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_dirichlet_in_continuousMultivariate3347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_dirichlet_in_continuousMultivariate3347( FOLLOW_dirichlet_in_continuousMultivariate3347_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvnormal_in_continuousMultivariate3354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvnormal_in_continuousMultivariate3354( FOLLOW_mvnormal_in_continuousMultivariate3354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvstudentt_in_continuousMultivariate3361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvstudentt_in_continuousMultivariate3361( FOLLOW_mvstudentt_in_continuousMultivariate3361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_wishart_in_continuousMultivariate3368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_wishart_in_continuousMultivariate3368( FOLLOW_wishart_in_continuousMultivariate3368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_distributionParameter3386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_distributionParameter3386( FOLLOW_uvNode_in_distributionParameter3386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_distributionParameter3393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_distributionParameter3393( FOLLOW_unaryExpression_in_distributionParameter3393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli3411_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli3411( FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli3411_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_bernoulli3413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_bernoulli3413( FOLLOW_distributionParameter_in_bernoulli3413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_bernoulli3415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_bernoulli3415( FOLLOW_CLOSEBRACKET_in_bernoulli3415_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BINOMIALOPENBRACKET_in_binomial3432_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BINOMIALOPENBRACKET_in_binomial3432( FOLLOW_BINOMIALOPENBRACKET_in_binomial3432_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_binomial3436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_binomial3436( FOLLOW_distributionParameter_in_binomial3436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_binomial3438_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_binomial3438( FOLLOW_COMMA_in_binomial3438_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_binomial3442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_binomial3442( FOLLOW_distributionParameter_in_binomial3442_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_binomial3444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_binomial3444( FOLLOW_CLOSEBRACKET_in_binomial3444_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NEGATIVEBINOMIALOPENBRACKET_in_negativebinomial3462_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NEGATIVEBINOMIALOPENBRACKET_in_negativebinomial3462( FOLLOW_NEGATIVEBINOMIALOPENBRACKET_in_negativebinomial3462_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_negativebinomial3466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_negativebinomial3466( FOLLOW_distributionParameter_in_negativebinomial3466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_negativebinomial3468_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_negativebinomial3468( FOLLOW_COMMA_in_negativebinomial3468_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_negativebinomial3472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_negativebinomial3472( FOLLOW_distributionParameter_in_negativebinomial3472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_negativebinomial3474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_negativebinomial3474( FOLLOW_CLOSEBRACKET_in_negativebinomial3474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_POISSONOPENBRACKET_in_poisson3493_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_POISSONOPENBRACKET_in_poisson3493( FOLLOW_POISSONOPENBRACKET_in_poisson3493_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_poisson3495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_poisson3495( FOLLOW_distributionParameter_in_poisson3495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_poisson3497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_poisson3497( FOLLOW_CLOSEBRACKET_in_poisson3497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NCHGOPENBRACKET_in_nchg3514_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NCHGOPENBRACKET_in_nchg3514( FOLLOW_NCHGOPENBRACKET_in_nchg3514_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_nchg3518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_nchg3518( FOLLOW_distributionParameter_in_nchg3518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_nchg3523_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_nchg3523( FOLLOW_COMMA_in_nchg3523_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_nchg3527_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_nchg3527( FOLLOW_distributionParameter_in_nchg3527_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_nchg3531_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_nchg3531( FOLLOW_COMMA_in_nchg3531_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_nchg3535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_nchg3535( FOLLOW_distributionParameter_in_nchg3535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_nchg3539_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_nchg3539( FOLLOW_COMMA_in_nchg3539_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_nchg3543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_nchg3543( FOLLOW_distributionParameter_in_nchg3543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_nchg3547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_nchg3547( FOLLOW_CLOSEBRACKET_in_nchg3547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BETAOPENBRACKET_in_beta3567_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BETAOPENBRACKET_in_beta3567( FOLLOW_BETAOPENBRACKET_in_beta3567_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta3571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta3571( FOLLOW_distributionParameter_in_beta3571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_beta3574_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_beta3574( FOLLOW_COMMA_in_beta3574_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta3578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta3578( FOLLOW_distributionParameter_in_beta3578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_beta3580_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_beta3580( FOLLOW_CLOSEBRACKET_in_beta3580_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CHISQUAREDOPENBRACKET_in_chisquared3597_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CHISQUAREDOPENBRACKET_in_chisquared3597( FOLLOW_CHISQUAREDOPENBRACKET_in_chisquared3597_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_chisquared3601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_chisquared3601( FOLLOW_distributionParameter_in_chisquared3601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_chisquared3603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_chisquared3603( FOLLOW_CLOSEBRACKET_in_chisquared3603_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLEEXPONENTIALOPENBRACKET_in_ddexp3622_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DOUBLEEXPONENTIALOPENBRACKET_in_ddexp3622( FOLLOW_DOUBLEEXPONENTIALOPENBRACKET_in_ddexp3622_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_ddexp3626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_ddexp3626( FOLLOW_distributionParameter_in_ddexp3626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_ddexp3629_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_ddexp3629( FOLLOW_COMMA_in_ddexp3629_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_ddexp3633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_ddexp3633( FOLLOW_distributionParameter_in_ddexp3633_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_ddexp3635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_ddexp3635( FOLLOW_CLOSEBRACKET_in_ddexp3635_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_EXPONENTIALOPENBRACKET_in_exp3654_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_EXPONENTIALOPENBRACKET_in_exp3654( FOLLOW_EXPONENTIALOPENBRACKET_in_exp3654_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_exp3658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_exp3658( FOLLOW_distributionParameter_in_exp3658_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exp3661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exp3661( FOLLOW_CLOSEBRACKET_in_exp3661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FLATOPENBRACKET_in_flat3679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FLATOPENBRACKET_in_flat3679( FOLLOW_FLATOPENBRACKET_in_flat3679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_flat3682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_flat3682( FOLLOW_CLOSEBRACKET_in_flat3682_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GAMMAOPENBRACKET_in_gamma3700_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GAMMAOPENBRACKET_in_gamma3700( FOLLOW_GAMMAOPENBRACKET_in_gamma3700_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gamma3704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gamma3704( FOLLOW_distributionParameter_in_gamma3704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_gamma3707_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_gamma3707( FOLLOW_COMMA_in_gamma3707_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gamma3711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gamma3711( FOLLOW_distributionParameter_in_gamma3711_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_gamma3713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_gamma3713( FOLLOW_CLOSEBRACKET_in_gamma3713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GEVOPENBRACKET_in_gev3732_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GEVOPENBRACKET_in_gev3732( FOLLOW_GEVOPENBRACKET_in_gev3732_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gev3736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gev3736( FOLLOW_distributionParameter_in_gev3736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_gev3739_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_gev3739( FOLLOW_COMMA_in_gev3739_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gev3743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gev3743( FOLLOW_distributionParameter_in_gev3743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_gev3745_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_gev3745( FOLLOW_COMMA_in_gev3745_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gev3751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gev3751( FOLLOW_distributionParameter_in_gev3751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_gev3754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_gev3754( FOLLOW_CLOSEBRACKET_in_gev3754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GENFOPENBRACKET_in_genf3773_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GENFOPENBRACKET_in_genf3773( FOLLOW_GENFOPENBRACKET_in_genf3773_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genf3777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genf3777( FOLLOW_distributionParameter_in_genf3777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_genf3780_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_genf3780( FOLLOW_COMMA_in_genf3780_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genf3784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genf3784( FOLLOW_distributionParameter_in_genf3784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_genf3786_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_genf3786( FOLLOW_COMMA_in_genf3786_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genf3792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genf3792( FOLLOW_distributionParameter_in_genf3792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_genf3795_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_genf3795( FOLLOW_COMMA_in_genf3795_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genf3799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genf3799( FOLLOW_distributionParameter_in_genf3799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_genf3801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_genf3801( FOLLOW_CLOSEBRACKET_in_genf3801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GENGAMMAOPENBRACKET_in_gengamma3820_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GENGAMMAOPENBRACKET_in_gengamma3820( FOLLOW_GENGAMMAOPENBRACKET_in_gengamma3820_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gengamma3824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gengamma3824( FOLLOW_distributionParameter_in_gengamma3824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_gengamma3827_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_gengamma3827( FOLLOW_COMMA_in_gengamma3827_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gengamma3831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gengamma3831( FOLLOW_distributionParameter_in_gengamma3831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_gengamma3833_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_gengamma3833( FOLLOW_COMMA_in_gengamma3833_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_gengamma3839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_gengamma3839( FOLLOW_distributionParameter_in_gengamma3839_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_gengamma3842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_gengamma3842( FOLLOW_CLOSEBRACKET_in_gengamma3842_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GENPARETOOPENBRACKET_in_genpareto3861_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GENPARETOOPENBRACKET_in_genpareto3861( FOLLOW_GENPARETOOPENBRACKET_in_genpareto3861_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genpareto3865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genpareto3865( FOLLOW_distributionParameter_in_genpareto3865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_genpareto3868_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_genpareto3868( FOLLOW_COMMA_in_genpareto3868_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genpareto3872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genpareto3872( FOLLOW_distributionParameter_in_genpareto3872_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_genpareto3874_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_genpareto3874( FOLLOW_COMMA_in_genpareto3874_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genpareto3880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genpareto3880( FOLLOW_distributionParameter_in_genpareto3880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_genpareto3883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_genpareto3883( FOLLOW_CLOSEBRACKET_in_genpareto3883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_GENLOGLIKOPENBRACKET_in_genloglik3903_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_GENLOGLIKOPENBRACKET_in_genloglik3903( FOLLOW_GENLOGLIKOPENBRACKET_in_genloglik3903_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_genloglik3907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_genloglik3907( FOLLOW_distributionParameter_in_genloglik3907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_genloglik3910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_genloglik3910( FOLLOW_CLOSEBRACKET_in_genloglik3910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGNORMALOPENBRACKET_in_lognormal3929_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGNORMALOPENBRACKET_in_lognormal3929( FOLLOW_LOGNORMALOPENBRACKET_in_lognormal3929_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_lognormal3933_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_lognormal3933( FOLLOW_distributionParameter_in_lognormal3933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lognormal3936_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lognormal3936( FOLLOW_COMMA_in_lognormal3936_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_lognormal3940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_lognormal3940( FOLLOW_distributionParameter_in_lognormal3940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_lognormal3943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_lognormal3943( FOLLOW_CLOSEBRACKET_in_lognormal3943_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGISTICOPENBRACKET_in_logistic3962_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGISTICOPENBRACKET_in_logistic3962( FOLLOW_LOGISTICOPENBRACKET_in_logistic3962_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_logistic3966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_logistic3966( FOLLOW_distributionParameter_in_logistic3966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_logistic3969_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_logistic3969( FOLLOW_COMMA_in_logistic3969_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_logistic3973_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_logistic3973( FOLLOW_distributionParameter_in_logistic3973_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_logistic3976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_logistic3976( FOLLOW_CLOSEBRACKET_in_logistic3976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NORMALOPENBRACKET_in_normal3996_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NORMALOPENBRACKET_in_normal3996( FOLLOW_NORMALOPENBRACKET_in_normal3996_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_normal4000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_normal4000( FOLLOW_distributionParameter_in_normal4000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_normal4003_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_normal4003( FOLLOW_COMMA_in_normal4003_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_normal4007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_normal4007( FOLLOW_distributionParameter_in_normal4007_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_normal4010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_normal4010( FOLLOW_CLOSEBRACKET_in_normal4010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PARETOOPENBRACKET_in_pareto4029_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PARETOOPENBRACKET_in_pareto4029( FOLLOW_PARETOOPENBRACKET_in_pareto4029_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_pareto4033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_pareto4033( FOLLOW_distributionParameter_in_pareto4033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pareto4036_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_pareto4036( FOLLOW_COMMA_in_pareto4036_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_pareto4040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_pareto4040( FOLLOW_distributionParameter_in_pareto4040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_pareto4043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_pareto4043( FOLLOW_CLOSEBRACKET_in_pareto4043_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_STUDENTTOPENBRACKET_in_studentt4062_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_STUDENTTOPENBRACKET_in_studentt4062( FOLLOW_STUDENTTOPENBRACKET_in_studentt4062_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_studentt4066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_studentt4066( FOLLOW_distributionParameter_in_studentt4066_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_studentt4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_studentt4069( FOLLOW_COMMA_in_studentt4069_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_studentt4073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_studentt4073( FOLLOW_distributionParameter_in_studentt4073_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_studentt4075_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_studentt4075( FOLLOW_COMMA_in_studentt4075_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_studentt4081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_studentt4081( FOLLOW_distributionParameter_in_studentt4081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_studentt4084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_studentt4084( FOLLOW_CLOSEBRACKET_in_studentt4084_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_UNIFORMOPENBRACKET_in_uniform4103_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_UNIFORMOPENBRACKET_in_uniform4103( FOLLOW_UNIFORMOPENBRACKET_in_uniform4103_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_uniform4107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_uniform4107( FOLLOW_distributionParameter_in_uniform4107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uniform4110_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uniform4110( FOLLOW_COMMA_in_uniform4110_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_uniform4114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_uniform4114( FOLLOW_distributionParameter_in_uniform4114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_uniform4117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_uniform4117( FOLLOW_CLOSEBRACKET_in_uniform4117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_WEIBULLOPENBRACKET_in_weibull4136_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_WEIBULLOPENBRACKET_in_weibull4136( FOLLOW_WEIBULLOPENBRACKET_in_weibull4136_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_weibull4140_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_weibull4140( FOLLOW_distributionParameter_in_weibull4140_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_weibull4143_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_weibull4143( FOLLOW_COMMA_in_weibull4143_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_weibull4147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_weibull4147( FOLLOW_distributionParameter_in_weibull4147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_weibull4150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_weibull4150( FOLLOW_CLOSEBRACKET_in_weibull4150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial4170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial4170( FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial4170_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_multinomial4174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_multinomial4174( FOLLOW_mvNode_in_multinomial4174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multinomial4176_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multinomial4176( FOLLOW_COMMA_in_multinomial4176_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial4182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial4182( FOLLOW_distributionParameter_in_multinomial4182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multinomial4184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multinomial4184( FOLLOW_CLOSEBRACKET_in_multinomial4184_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_dirichlet4203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_dirichlet4203( FOLLOW_set_in_dirichlet4203_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_dirichlet4211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_dirichlet4211( FOLLOW_mvNode_in_dirichlet4211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_dirichlet4213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_dirichlet4213( FOLLOW_CLOSEBRACKET_in_dirichlet4213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MVNORMALOPENBRACKET_in_mvnormal4232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MVNORMALOPENBRACKET_in_mvnormal4232( FOLLOW_MVNORMALOPENBRACKET_in_mvnormal4232_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvnormal4236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvnormal4236( FOLLOW_mvNode_in_mvnormal4236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_mvnormal4238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_mvnormal4238( FOLLOW_COMMA_in_mvnormal4238_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvnormal4242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvnormal4242( FOLLOW_mvNode_in_mvnormal4242_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_mvnormal4244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_mvnormal4244( FOLLOW_CLOSEBRACKET_in_mvnormal4244_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MVSTUDENTTOPENBRACKET_in_mvstudentt4264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MVSTUDENTTOPENBRACKET_in_mvstudentt4264( FOLLOW_MVSTUDENTTOPENBRACKET_in_mvstudentt4264_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvstudentt4268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvstudentt4268( FOLLOW_mvNode_in_mvstudentt4268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_mvstudentt4270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_mvstudentt4270( FOLLOW_COMMA_in_mvstudentt4270_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvstudentt4274_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvstudentt4274( FOLLOW_mvNode_in_mvstudentt4274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_mvstudentt4276_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_mvstudentt4276( FOLLOW_COMMA_in_mvstudentt4276_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_mvstudentt4280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_mvstudentt4280( FOLLOW_distributionParameter_in_mvstudentt4280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_mvstudentt4282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_mvstudentt4282( FOLLOW_CLOSEBRACKET_in_mvstudentt4282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_WISHARTOPENBRACKET_in_wishart4302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_WISHARTOPENBRACKET_in_wishart4302( FOLLOW_WISHARTOPENBRACKET_in_wishart4302_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_wishart4306_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_wishart4306( FOLLOW_mvNode_in_wishart4306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_wishart4308_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000001008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_wishart4308( FOLLOW_COMMA_in_wishart4308_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_wishart4312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_wishart4312( FOLLOW_distributionParameter_in_wishart4312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_wishart4314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_wishart4314( FOLLOW_CLOSEBRACKET_in_wishart4314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred1_BUGS782_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred1_BUGS782( FOLLOW_uvNode_in_synpred1_BUGS782_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred1_BUGS784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred1_BUGS784( FOLLOW_TILDE_in_synpred1_BUGS784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred2_BUGS799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred2_BUGS799( FOLLOW_mvNode_in_synpred2_BUGS799_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred2_BUGS801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred2_BUGS801( FOLLOW_TILDE_in_synpred2_BUGS801_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred3_BUGS816_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred3_BUGS816( FOLLOW_uvNode_in_synpred3_BUGS816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred3_BUGS818_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred3_BUGS818( FOLLOW_LEFTPOINTER_in_synpred3_BUGS818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred4_BUGS833_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred4_BUGS833( FOLLOW_mvNode_in_synpred4_BUGS833_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred4_BUGS835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred4_BUGS835( FOLLOW_LEFTPOINTER_in_synpred4_BUGS835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred5_BUGS850_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred5_BUGS850( FOLLOW_linkFunction_in_synpred5_BUGS850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred5_BUGS852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred5_BUGS852( FOLLOW_LEFTPOINTER_in_synpred5_BUGS852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred6_BUGS900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred6_BUGS900( FOLLOW_uvNode_in_synpred6_BUGS900_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred6_BUGS902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred6_BUGS902( FOLLOW_TILDE_in_synpred6_BUGS902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_categoricaldistribution_in_synpred6_BUGS904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_categoricaldistribution_in_synpred6_BUGS904( FOLLOW_categoricaldistribution_in_synpred6_BUGS904_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred7_BUGS922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred7_BUGS922( FOLLOW_uvNode_in_synpred7_BUGS922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred8_BUGS1008_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred8_BUGS1008( FOLLOW_uvNode_in_synpred8_BUGS1008_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred8_BUGS1010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred8_BUGS1010( FOLLOW_TILDE_in_synpred8_BUGS1010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_synpred9_BUGS1102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_synpred9_BUGS1102( FOLLOW_distributionParameter_in_synpred9_BUGS1102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred9_BUGS1104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_synpred9_BUGS1104( FOLLOW_COMMA_in_synpred9_BUGS1104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred10_BUGS1157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred10_BUGS1157( FOLLOW_uvNode_in_synpred10_BUGS1157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred10_BUGS1159_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred10_BUGS1159( FOLLOW_CONSTANTVALUE_in_synpred10_BUGS1159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred11_BUGS1282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred11_BUGS1282( FOLLOW_uvNode_in_synpred11_BUGS1282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred11_BUGS1286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred11_BUGS1286( FOLLOW_linkFunction_in_synpred11_BUGS1286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_synpred12_BUGS1934_bits[]	= { ANTLR_UINT64_LIT(0x0000000003000000), ANTLR_UINT64_LIT(0x0000000000009008) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_synpred12_BUGS1934( FOLLOW_OPENBRACKET_in_synpred12_BUGS1934_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_synpred12_BUGS1936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_synpred12_BUGS1936( FOLLOW_expression_in_synpred12_BUGS1936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_synpred12_BUGS1938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_synpred12_BUGS1938( FOLLOW_COLON_in_synpred12_BUGS1938_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:158:1: prog returns [Program* program = new Program()] : MODEL OPENBRACE statements CLOSEBRACE ;
 */
Program*
BUGSParser::prog()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Program* program;


    list<IStatement* > statements1;
    typedef	list<IStatement* > RETURN_TYPE_statements1;

    /* Initialize rule variables
     */
    program =  new Program();



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:159:2: ( MODEL OPENBRACE statements CLOSEBRACE )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:159:4: MODEL OPENBRACE statements CLOSEBRACE
        {
             this->matchToken(MODEL, &FOLLOW_MODEL_in_prog756);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_prog758);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            this->followPush(FOLLOW_statements_in_prog760);
            statements1=statements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_prog762);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            if ( this->get_backtracking()==0 )
            {
                program
                ->statements = statements1
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return program;
}
/* $ANTLR end prog */

/**
 * $ANTLR start statements
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:162:1: statements returns [list<IStatement* > stat] : ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor stats= statements endFor )+ ;
 */
list<IStatement* >
BUGSParser::statements()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    list<IStatement* > stat;


    StochasticNodeStatement* ste1;
    typedef	StochasticNodeStatement* RETURN_TYPE_ste1;

    StochasticNodeStatement* ste2;
    typedef	StochasticNodeStatement* RETURN_TYPE_ste2;

    LogicalNodeStatement* lne1;
    typedef	LogicalNodeStatement* RETURN_TYPE_lne1;

    LogicalNodeStatement* lne2;
    typedef	LogicalNodeStatement* RETURN_TYPE_lne2;

    LogicalNodeStatement* lne3;
    typedef	LogicalNodeStatement* RETURN_TYPE_lne3;

    BUGSParser_startFor_return sf;
    typedef	BUGSParser_startFor_return RETURN_TYPE_sf;

    list<IStatement* > stats;
    typedef	list<IStatement* > RETURN_TYPE_stats;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:162:45: ( ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor stats= statements endFor )+ )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:163:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor stats= statements endFor )+
        {
            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:163:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor stats= statements endFor )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=7;
            	switch ( this->LA(1) )
            	{
            	case NODENAME:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_2 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_BUGS>() )))
            			    {
            			        alt1=1;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred2_BUGS>() )))
            			    {
            			        alt1=2;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_3 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_4 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case CLOGLOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_5 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case PROBITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_6 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case FORSTART:
            		{
            			alt1=6;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:163:3: ( uvNode TILDE )=>ste1= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements791);
            	            ste1=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(ste1
            	                );
            	            }


            	        }
            	        break;
            	    case 2:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:164:4: ( mvNode TILDE )=>ste2= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements808);
            	            ste2=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(ste2
            	                );
            	            }


            	        }
            	        break;
            	    case 3:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:165:4: ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements825);
            	            lne1=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(lne1
            	                );
            	            }


            	        }
            	        break;
            	    case 4:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:166:4: ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements842);
            	            lne2=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(lne2
            	                );
            	            }


            	        }
            	        break;
            	    case 5:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:167:4: ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements860);
            	            lne3=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(lne3
            	                );
            	            }


            	        }
            	        break;
            	    case 6:
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:168:4: sf= startFor stats= statements endFor
            	        {
            	            this->followPush(FOLLOW_startFor_in_statements870);
            	            sf=startFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            this->followPush(FOLLOW_statements_in_statements874);
            	            stats=statements();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            this->followPush(FOLLOW_endFor_in_statements876);
            	            endFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {

            	                	ForStatement* forstat = new ForStatement();
            	                	forstat->loopvariable = sf.loopvariable
            	                ;
            	                	forstat->beginexpression = sf.beginexpression
            	                ;
            	                	forstat->endexpression = sf.endexpression
            	                ;
            	                	forstat->statements = stats
            	                ;
            	                	stat
            	                .push_back(forstat);
            	                	
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return stat;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< BUGSParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementsEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementsEx; /* Prevent compiler warnings */
    rulestatementsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stat;
}
/* $ANTLR end statements */

/**
 * $ANTLR start stochasticNodeExpr
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:180:1: stochasticNodeExpr returns [StochasticNodeStatement* stochasticNodeStatement = new StochasticNodeStatement()] : ( ( uvNode TILDE categoricaldistribution )=>mvsne1= mvStochasticNodeExpr | ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr );
 */
StochasticNodeStatement*
BUGSParser::stochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNodeStatement* stochasticNodeStatement;


    BUGSParser_mvStochasticNodeExpr_return mvsne1;
    typedef	BUGSParser_mvStochasticNodeExpr_return RETURN_TYPE_mvsne1;

    BUGSParser_uvStochasticNodeExpr_return uvsne;
    typedef	BUGSParser_uvStochasticNodeExpr_return RETURN_TYPE_uvsne;

    BUGSParser_mvStochasticNodeExpr_return mvsne;
    typedef	BUGSParser_mvStochasticNodeExpr_return RETURN_TYPE_mvsne;

    StochasticNodeLimitation* censor2;
    typedef	StochasticNodeLimitation* RETURN_TYPE_censor2;

    StochasticNodeLimitation* truncation3;
    typedef	StochasticNodeLimitation* RETURN_TYPE_truncation3;

    /* Initialize rule variables
     */
    stochasticNodeStatement =  new StochasticNodeStatement();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:181:2: ( ( uvNode TILDE categoricaldistribution )=>mvsne1= mvStochasticNodeExpr | ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr )

            ANTLR_UINT32 alt3;

            alt3=3;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA3_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred6_BUGS>() )))
            		    {
            		        alt3=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
            		    {
            		        alt3=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt3=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return stochasticNodeStatement;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 3 );
            		        ex->set_state( 1 );


            		        goto rulestochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return stochasticNodeStatement;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto rulestochasticNodeExprEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:182:2: ( uvNode TILDE categoricaldistribution )=>mvsne1= mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr911);
        	        mvsne1=mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNodeStatement
        	            ->node = mvsne1.mvnode
        	            ; stochasticNodeStatement
        	            ->distribution = mvsne1.mvdistribution
        	            ; stochasticNodeStatement
        	            ->limitationType=NOLIMITATION;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:184:4: ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )?
        	    {
        	        this->followPush(FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr929);
        	        uvsne=uvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNodeStatement
        	            ->node = uvsne.uvnode
        	            ; 
        	            	stochasticNodeStatement
        	            ->distribution = uvsne.uvdistribution
        	            ;
        	            	stochasticNodeStatement
        	            ->limitationType=NOLIMITATION;
        	        }


        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:188:3: ( censor | truncation )?
        	        {
        	            int alt2=3;
        	            switch ( this->LA(1) )
        	            {
        	                case CENSORBEGINWITHC:
        	                case CENSORBEGINWITHI:
        	                	{
        	                		alt2=1;
        	                	}
        	                    break;
        	                case TRUNCATIONBEGIN:
        	                	{
        	                		alt2=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt2)
        	            {
        	        	case 1:
        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:188:4: censor
        	        	    {
        	        	        this->followPush(FOLLOW_censor_in_stochasticNodeExpr938);
        	        	        censor2=censor();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNodeStatement;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            stochasticNodeStatement
        	        	            ->limitationType=CENSOR; stochasticNodeStatement
        	        	            ->limitation=censor2
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:189:5: truncation
        	        	    {
        	        	        this->followPush(FOLLOW_truncation_in_stochasticNodeExpr946);
        	        	        truncation3=truncation();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNodeStatement;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            stochasticNodeStatement
        	        	            ->limitationType=TRUNCATION; stochasticNodeStatement
        	        	            ->limitation=truncation3
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:191:5: mvsne= mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr962);
        	        mvsne=mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNodeStatement
        	            ->node = mvsne.mvnode
        	            ; stochasticNodeStatement
        	            ->distribution = mvsne.mvdistribution
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestochasticNodeExprEx; /* Prevent compiler warnings */
    rulestochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stochasticNodeStatement;
}
/* $ANTLR end stochasticNodeExpr */

/**
 * $ANTLR start uvStochasticNodeExpr
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:195:1: uvStochasticNodeExpr returns [UnivariateNode* uvnode, UnivariateDistribution* uvdistribution] : uvNode TILDE uvDistribution ;
 */
BUGSParser_uvStochasticNodeExpr_return
BUGSParser::uvStochasticNodeExpr()
{
    BUGSParser_uvStochasticNodeExpr_return retval(this);


    UnivariateNode* uvNode4;
    typedef	UnivariateNode* RETURN_TYPE_uvNode4;

    UnivariateDistribution* uvDistribution5;
    typedef	UnivariateDistribution* RETURN_TYPE_uvDistribution5;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:196:2: ( uvNode TILDE uvDistribution )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:196:3: uvNode TILDE uvDistribution
        {
            this->followPush(FOLLOW_uvNode_in_uvStochasticNodeExpr980);
            uvNode4=uvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.uvnode= 
                uvNode4
                ;

            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_uvStochasticNodeExpr986);
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_uvDistribution_in_uvStochasticNodeExpr990);
            uvDistribution5=uvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.uvdistribution= 
                uvDistribution5
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvStochasticNodeExprEx; /* Prevent compiler warnings */
    ruleuvStochasticNodeExprEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end uvStochasticNodeExpr */

/**
 * $ANTLR start mvStochasticNodeExpr
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:200:1: mvStochasticNodeExpr returns [MultivariateNode* mvnode, MultivariateDistribution* mvdistribution] : ( ( uvNode TILDE )=>uv1= uvNode TILDE categoricaldistribution | mvNode TILDE mvDistribution );
 */
BUGSParser_mvStochasticNodeExpr_return
BUGSParser::mvStochasticNodeExpr()
{
    BUGSParser_mvStochasticNodeExpr_return retval(this);


    UnivariateNode* uv1;
    typedef	UnivariateNode* RETURN_TYPE_uv1;

    MultivariateDistribution* categoricaldistribution6;
    typedef	MultivariateDistribution* RETURN_TYPE_categoricaldistribution6;

    MultivariateNode* mvNode7;
    typedef	MultivariateNode* RETURN_TYPE_mvNode7;

    MultivariateDistribution* mvDistribution8;
    typedef	MultivariateDistribution* RETURN_TYPE_mvDistribution8;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:201:2: ( ( uvNode TILDE )=>uv1= uvNode TILDE categoricaldistribution | mvNode TILDE mvDistribution )

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA4_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
            		    {
            		        alt4=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt4=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 1 );


            		        goto rulemvStochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulemvStochasticNodeExprEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:202:2: ( uvNode TILDE )=>uv1= uvNode TILDE categoricaldistribution
        	    {
        	        this->followPush(FOLLOW_uvNode_in_mvStochasticNodeExpr1017);
        	        uv1=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.mvnode= new MultivariateNode();
        	             
        	            	retval.mvnode
        	            ->nodeid = uv1
        	            ->nodeid; 
        	            	
        	            	for(std::vector<Expression* >::iterator it =uv1
        	            ->indices.begin(); it!=uv1
        	            ->indices.end(); it++) {
        	            		MultiDimExpression* mdexp = new MultiDimExpression();
        	            		mdexp->expbeforecolon = new Expression(*it);
        	            		mdexp->colon = false;
        	            		mdexp->empty = false;
        	            		retval.mvnode
        	            ->indices.push_back(mdexp);
        	            	}

        	            	delete uv1
        	            ; // deleting the allocated memory		
        	            	
        	        }


        	         this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr1025);
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_categoricaldistribution_in_mvStochasticNodeExpr1029);
        	        categoricaldistribution6=categoricaldistribution();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.mvdistribution= 
        	            categoricaldistribution6
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:218:4: mvNode TILDE mvDistribution
        	    {
        	        this->followPush(FOLLOW_mvNode_in_mvStochasticNodeExpr1036);
        	        mvNode7=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.mvnode= 
        	            mvNode7
        	            ;

        	        }


        	         this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr1042);
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_mvDistribution_in_mvStochasticNodeExpr1046);
        	        mvDistribution8=mvDistribution();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvStochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.mvdistribution= 
        	            mvDistribution8
        	            ;

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvStochasticNodeExprEx; /* Prevent compiler warnings */
    rulemvStochasticNodeExprEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end mvStochasticNodeExpr */

/**
 * $ANTLR start categoricaldistribution
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:223:1: categoricaldistribution returns [MultivariateDistribution* distribution = new MultivariateDistribution()] : CATEGORICALOPENBRACKET dp1= mvNode CLOSEBRACKET ;
 */
MultivariateDistribution*
BUGSParser::categoricaldistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateDistribution* distribution;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    /* Initialize rule variables
     */
    distribution =  new MultivariateDistribution();



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:224:2: ( CATEGORICALOPENBRACKET dp1= mvNode CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:224:4: CATEGORICALOPENBRACKET dp1= mvNode CLOSEBRACKET
        {
             this->matchToken(CATEGORICALOPENBRACKET, &FOLLOW_CATEGORICALOPENBRACKET_in_categoricaldistribution1064);
            if  (this->hasException())
            {
                goto rulecategoricaldistributionEx;
            }
            if (this->hasFailed())
            {
                return distribution;
            }


            this->followPush(FOLLOW_mvNode_in_categoricaldistribution1068);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecategoricaldistributionEx;
            }
            if (this->hasFailed())
            {
                return distribution;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_categoricaldistribution1070);
            if  (this->hasException())
            {
                goto rulecategoricaldistributionEx;
            }
            if (this->hasFailed())
            {
                return distribution;
            }


            if ( this->get_backtracking()==0 )
            {
                vector<MVDParameters* > parameters;
                	MVDParameters* param1 = new MVDParameters(); 
                	param1->type=MVDNODE; param1->mvnode = dp1
                ; 
                	parameters.push_back(param1); 
                	distribution
                ->name="CATEGORICAL"; 
                	distribution
                ->distributionParameters=parameters;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecategoricaldistributionEx; /* Prevent compiler warnings */
    rulecategoricaldistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return distribution;
}
/* $ANTLR end categoricaldistribution */

/**
 * $ANTLR start censor
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:233:1: censor returns [StochasticNodeLimitation* limitation = new StochasticNodeLimitation()] : ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( distributionParameter COMMA )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET ;
 */
StochasticNodeLimitation*
BUGSParser::censor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNodeLimitation* limitation;


    BUGSParser_lowerWithOptionalUpper_return l;
    typedef	BUGSParser_lowerWithOptionalUpper_return RETURN_TYPE_l;

    BUGSParser_upperWithOptionalLower_return u;
    typedef	BUGSParser_upperWithOptionalLower_return RETURN_TYPE_u;

    /* Initialize rule variables
     */
    limitation =  new StochasticNodeLimitation();



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:234:3: ( ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( distributionParameter COMMA )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:234:5: ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( distributionParameter COMMA )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET
        {
            if ( ((this->LA(1) >= CENSORBEGINWITHC) && (this->LA(1) <= CENSORBEGINWITHI)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return limitation;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulecensorEx;
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:235:3: ( ( distributionParameter COMMA )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA5_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 1 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case MINUS:
                	{
                		{
                		    int LA5_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 2 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTINT:
                	{
                		{
                		    int LA5_3 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 3 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA5_4 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 4 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return limitation;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto rulecensorEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:235:5: ( distributionParameter COMMA )=>l= lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_censor1113);
            	        l=lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return limitation;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            limitation
            	            ->optional=l.optional
            	            ; 
            	            	 limitation
            	            ->lowerlimit=l.lowerlimit
            	            ;
            	            	 limitation
            	            ->upperlimit=l.upperlimit
            	            ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:240:5: u= upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_censor1127);
            	        u=upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return limitation;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            limitation
            	            ->optional=u.optional
            	            ; 
            	            	 limitation
            	            ->lowerlimit=u.lowerlimit
            	            ;
            	            	 limitation
            	            ->upperlimit=u.upperlimit
            	            ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_censor1136);
            if  (this->hasException())
            {
                goto rulecensorEx;
            }
            if (this->hasFailed())
            {
                return limitation;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecensorEx; /* Prevent compiler warnings */
    rulecensorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return limitation;
}
/* $ANTLR end censor */

/**
 * $ANTLR start truncation
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:245:1: truncation returns [StochasticNodeLimitation* limitation = new StochasticNodeLimitation()] : TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET ;
 */
StochasticNodeLimitation*
BUGSParser::truncation()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNodeLimitation* limitation;


    BUGSParser_lowerWithOptionalUpper_return l;
    typedef	BUGSParser_lowerWithOptionalUpper_return RETURN_TYPE_l;

    BUGSParser_upperWithOptionalLower_return u;
    typedef	BUGSParser_upperWithOptionalLower_return RETURN_TYPE_u;

    /* Initialize rule variables
     */
    limitation =  new StochasticNodeLimitation();



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:2: ( TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:4: TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower ) CLOSEBRACKET
        {
             this->matchToken(TRUNCATIONBEGIN, &FOLLOW_TRUNCATIONBEGIN_in_truncation1151);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return limitation;
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:20: ( ( uvNode | CONSTANTVALUE )=>l= lowerWithOptionalUpper |u= upperWithOptionalLower )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA6_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 1 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case MINUS:
                	{
                		{
                		    int LA6_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 2 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTINT:
                	{
                		{
                		    int LA6_3 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 3 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA6_4 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return limitation;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 4 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return limitation;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto ruletruncationEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:23: ( uvNode | CONSTANTVALUE )=>l= lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_truncation1168);
            	        l=lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return limitation;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            limitation
            	            ->optional=l.optional
            	            ; 
            	            	 limitation
            	            ->lowerlimit=l.lowerlimit
            	            ;
            	            	 limitation
            	            ->upperlimit=l.upperlimit
            	            ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:251:5: u= upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_truncation1181);
            	        u=upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return limitation;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            limitation
            	            ->optional=u.optional
            	            ; 
            	            	 limitation
            	            ->lowerlimit=u.lowerlimit
            	            ;
            	            	 limitation
            	            ->upperlimit=u.upperlimit
            	            ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_truncation1190);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return limitation;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletruncationEx; /* Prevent compiler warnings */
    ruletruncationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return limitation;
}
/* $ANTLR end truncation */

/**
 * $ANTLR start lowerWithOptionalUpper
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:257:1: lowerWithOptionalUpper returns [OptionalComponent optional = UPPER, Expression* lowerlimit, Expression* upperlimit] : (dp1= distributionParameter ) COMMA (dp2= distributionParameter )? ;
 */
BUGSParser_lowerWithOptionalUpper_return
BUGSParser::lowerWithOptionalUpper()
{
    BUGSParser_lowerWithOptionalUpper_return retval(this);


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */
    retval.optional =  UPPER;


    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:258:2: ( (dp1= distributionParameter ) COMMA (dp2= distributionParameter )? )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:258:5: (dp1= distributionParameter ) COMMA (dp2= distributionParameter )?
        {
            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:258:5: (dp1= distributionParameter )
            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:258:6: dp1= distributionParameter
            {
                this->followPush(FOLLOW_distributionParameter_in_lowerWithOptionalUpper1209);
                dp1=distributionParameter();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelowerWithOptionalUpperEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                    retval.lowerlimit= 
                    dp1
                    ;

                }


            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_lowerWithOptionalUpper1216);
            if  (this->hasException())
            {
                goto rulelowerWithOptionalUpperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:260:3: (dp2= distributionParameter )?
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                    case CONSTANTINT:
                    case CONSTANTVALUE:
                    case MINUS:
                    case NODENAME:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:260:5: dp2= distributionParameter
            	    {
            	        this->followPush(FOLLOW_distributionParameter_in_lowerWithOptionalUpper1225);
            	        dp2=distributionParameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            retval.upperlimit= 
            	            dp2
            	            ;
            	            retval.optional= NOOPTIONAL;

            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelowerWithOptionalUpperEx; /* Prevent compiler warnings */
    rulelowerWithOptionalUpperEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end lowerWithOptionalUpper */

/**
 * $ANTLR start upperWithOptionalLower
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:263:1: upperWithOptionalLower returns [OptionalComponent optional = LOWER, Expression* lowerlimit, Expression* upperlimit] : (dp1= distributionParameter )? COMMA (dp2= distributionParameter ) ;
 */
BUGSParser_upperWithOptionalLower_return
BUGSParser::upperWithOptionalLower()
{
    BUGSParser_upperWithOptionalLower_return retval(this);


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */
    retval.optional =  LOWER;


    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:264:2: ( (dp1= distributionParameter )? COMMA (dp2= distributionParameter ) )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:264:5: (dp1= distributionParameter )? COMMA (dp2= distributionParameter )
        {
            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:264:5: (dp1= distributionParameter )?
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                    case CONSTANTINT:
                    case CONSTANTVALUE:
                    case MINUS:
                    case NODENAME:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:264:6: dp1= distributionParameter
            	    {
            	        this->followPush(FOLLOW_distributionParameter_in_upperWithOptionalLower1248);
            	        dp1=distributionParameter();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            retval.lowerlimit= 
            	            dp1
            	            ;
            	             retval.optional= NOOPTIONAL;

            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_upperWithOptionalLower1256);
            if  (this->hasException())
            {
                goto ruleupperWithOptionalLowerEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:266:2: (dp2= distributionParameter )
            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:266:3: dp2= distributionParameter
            {
                this->followPush(FOLLOW_distributionParameter_in_upperWithOptionalLower1263);
                dp2=distributionParameter();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleupperWithOptionalLowerEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                if ( this->get_backtracking()==0 )
                {
                    retval.upperlimit= 
                    dp2
                    ;

                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleupperWithOptionalLowerEx; /* Prevent compiler warnings */
    ruleupperWithOptionalLowerEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end upperWithOptionalLower */

/**
 * $ANTLR start logicalNodeExpr
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:269:1: logicalNodeExpr returns [LogicalNodeStatement* logicalNodeStatement = new LogicalNodeStatement()] : ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER ex1= exprWithNodesFunctions | mvNode LEFTPOINTER ex2= exprWithNodesFunctions );
 */
LogicalNodeStatement*
BUGSParser::logicalNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNodeStatement* logicalNodeStatement;


    LogicalNodeExpression* ex1;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex1;

    LogicalNodeExpression* ex2;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex2;

    UnivariateNode* uvNode9;
    typedef	UnivariateNode* RETURN_TYPE_uvNode9;

    LinkFunctionNode* linkFunction10;
    typedef	LinkFunctionNode* RETURN_TYPE_linkFunction10;

    MultivariateNode* mvNode11;
    typedef	MultivariateNode* RETURN_TYPE_mvNode11;

    /* Initialize rule variables
     */
    logicalNodeStatement =  new LogicalNodeStatement();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:270:2: ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER ex1= exprWithNodesFunctions | mvNode LEFTPOINTER ex2= exprWithNodesFunctions )

            ANTLR_UINT32 alt10;

            alt10=2;

            {
                int LA10_0 = this->LA(1);
                if ( (LA10_0 == NODENAME))
                {
                    {
                        int LA10_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred11_BUGS>() )))
                        {
                            alt10=1;
                        }
                        else if ( (true))
                        {
                            alt10=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return logicalNodeStatement;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 10 );
                            ex->set_state( 1 );


                            goto rulelogicalNodeExprEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_BUGS>() )) && (LA10_0 == LOGOPENBRACKET))
                {
                    alt10=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_BUGS>() )) && (LA10_0 == LOGITOPENBRACKET))
                {
                    alt10=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_BUGS>() )) && (LA10_0 == CLOGLOGOPENBRACKET))
                {
                    alt10=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_BUGS>() )) && (LA10_0 == PROBITOPENBRACKET))
                {
                    alt10=1;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return logicalNodeStatement;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 10 );
                    ex->set_state( 0 );


                    goto rulelogicalNodeExprEx;

                }
            }
            switch (alt10)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:270:4: ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER ex1= exprWithNodesFunctions
        	    {
        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:271:2: ( uvNode | linkFunction )
        	        {
        	            int alt9=2;
        	            switch ( this->LA(1) )
        	            {
        	            case NODENAME:
        	            	{
        	            		alt9=1;
        	            	}
        	                break;
        	            case CLOGLOGOPENBRACKET:
        	            case LOGITOPENBRACKET:
        	            case LOGOPENBRACKET:
        	            case PROBITOPENBRACKET:
        	            	{
        	            		alt9=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return logicalNodeStatement;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 9 );
        	                ex->set_state( 0 );


        	                goto rulelogicalNodeExprEx;

        	            }

        	            switch (alt9)
        	            {
        	        	case 1:
        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:271:3: uvNode
        	        	    {
        	        	        this->followPush(FOLLOW_uvNode_in_logicalNodeExpr1294);
        	        	        uvNode9=uvNode();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return logicalNodeStatement;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            logicalNodeStatement
        	        	            ->logicalNode = uvNode9
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:272:4: linkFunction
        	        	    {
        	        	        this->followPush(FOLLOW_linkFunction_in_logicalNodeExpr1301);
        	        	        linkFunction10=linkFunction();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return logicalNodeStatement;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            logicalNodeStatement
        	        	            ->logicalNode = linkFunction10
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr1308);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNodeStatement;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1312);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            logicalNodeStatement
        	            ->logicalnodeexp= ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:274:5: mvNode LEFTPOINTER ex2= exprWithNodesFunctions
        	    {
        	        this->followPush(FOLLOW_mvNode_in_logicalNodeExpr1320);
        	        mvNode11=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            logicalNodeStatement
        	            ->logicalNode = mvNode11
        	            ;
        	        }


        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr1325);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNodeStatement;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr1331);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNodeStatement;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            logicalNodeStatement
        	            ->logicalnodeexp= ex2
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalNodeExprEx; /* Prevent compiler warnings */
    rulelogicalNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return logicalNodeStatement;
}
/* $ANTLR end logicalNodeExpr */

/**
 * $ANTLR start linkFunction
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:279:1: linkFunction returns [LinkFunctionNode* linkfunction = new LinkFunctionNode()] : ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET );
 */
LinkFunctionNode*
BUGSParser::linkFunction()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LinkFunctionNode* linkfunction;


    UnivariateNode* uvNode12;
    typedef	UnivariateNode* RETURN_TYPE_uvNode12;

    UnivariateNode* uvNode13;
    typedef	UnivariateNode* RETURN_TYPE_uvNode13;

    UnivariateNode* uvNode14;
    typedef	UnivariateNode* RETURN_TYPE_uvNode14;

    UnivariateNode* uvNode15;
    typedef	UnivariateNode* RETURN_TYPE_uvNode15;

    /* Initialize rule variables
     */
    linkfunction =  new LinkFunctionNode();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:280:2: ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET )

            ANTLR_UINT32 alt11;

            alt11=4;

            switch ( this->LA(1) )
            {
            case LOGOPENBRACKET:
            	{
            		alt11=1;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt11=2;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt11=3;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt11=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return linkfunction;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto rulelinkFunctionEx;

            }

            switch (alt11)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:280:4: LOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_linkFunction1349);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction1351);
        	        uvNode12=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction1353);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            linkfunction
        	            ->linkfunction = "LOG"; linkfunction
        	            ->uvnode=uvNode12
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:281:4: LOGITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_linkFunction1361);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction1363);
        	        uvNode13=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction1365);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            linkfunction
        	            ->linkfunction = "LOGIT"; linkfunction
        	            ->uvnode=uvNode13
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:282:4: CLOGLOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction1372);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction1374);
        	        uvNode14=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction1376);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            linkfunction
        	            ->linkfunction = "CLOGLOG"; linkfunction
        	            ->uvnode=uvNode14
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:283:4: PROBITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_linkFunction1383);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction1385);
        	        uvNode15=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction1387);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return linkfunction;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            linkfunction
        	            ->linkfunction = "PROBIT"; linkfunction
        	            ->uvnode=uvNode15
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelinkFunctionEx; /* Prevent compiler warnings */
    rulelinkFunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return linkfunction;
}
/* $ANTLR end linkFunction */

/**
 * $ANTLR start exprWithNodesFunctions
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:286:1: exprWithNodesFunctions returns [LogicalNodeExpression* exp] : logicalnodeadditiveExpression ;
 */
LogicalNodeExpression*
BUGSParser::exprWithNodesFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNodeExpression* exp;


    LogicalNodeExpression* logicalnodeadditiveExpression16;
    typedef	LogicalNodeExpression* RETURN_TYPE_logicalnodeadditiveExpression16;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:287:2: ( logicalnodeadditiveExpression )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:287:4: logicalnodeadditiveExpression
        {
            this->followPush(FOLLOW_logicalnodeadditiveExpression_in_exprWithNodesFunctions1404);
            logicalnodeadditiveExpression16=logicalnodeadditiveExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprWithNodesFunctionsEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                exp= 
                logicalnodeadditiveExpression16
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprWithNodesFunctionsEx; /* Prevent compiler warnings */
    ruleexprWithNodesFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end exprWithNodesFunctions */

/**
 * $ANTLR start logicalnodeadditiveExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:289:1: logicalnodeadditiveExpression returns [LogicalNodeExpression* exp] : m1= logicalnodemultExpression ( ( PLUS | MINUS ) m2= logicalnodemultExpression )* ;
 */
LogicalNodeExpression*
BUGSParser::logicalnodeadditiveExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNodeExpression* exp;


    LogicalNodeExpression* m1;
    typedef	LogicalNodeExpression* RETURN_TYPE_m1;

    LogicalNodeExpression* m2;
    typedef	LogicalNodeExpression* RETURN_TYPE_m2;

    /* Initialize rule variables
     */


    LogicalNodeExpression* left;
    LogicalNodeExpression* root;
    LogicalNodeExpression* right;
    bool rootinit = false;
    LogicalNodeExpression* oldroot;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:297:2: (m1= logicalnodemultExpression ( ( PLUS | MINUS ) m2= logicalnodemultExpression )* )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:297:4: m1= logicalnodemultExpression ( ( PLUS | MINUS ) m2= logicalnodemultExpression )*
        {
            this->followPush(FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1426);
            m1=logicalnodemultExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogicalnodeadditiveExpressionEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                left = m1
                ; exp=left;

            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:298:2: ( ( PLUS | MINUS ) m2= logicalnodemultExpression )*

            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case MINUS:
                case PLUS:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:298:3: ( PLUS | MINUS ) m2= logicalnodemultExpression
            	    {
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:298:3: ( PLUS | MINUS )
            	        {
            	            int alt12=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case MINUS:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return exp;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 12 );
            	                ex->set_state( 0 );


            	                goto rulelogicalnodeadditiveExpressionEx;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:298:4: PLUS
            	        	    {
            	        	         this->matchToken(PLUS, &FOLLOW_PLUS_in_logicalnodeadditiveExpression1433);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulelogicalnodeadditiveExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             root = new LogicalNodeExpression(); root->op ='+'; root->type=LOPERATOR;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:299:3: MINUS
            	        	    {
            	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_logicalnodeadditiveExpression1439);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulelogicalnodeadditiveExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             root = new LogicalNodeExpression(); root->op ='-'; root->type=LOPERATOR;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_logicalnodemultExpression_in_logicalnodeadditiveExpression1448);
            	        m2=logicalnodemultExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelogicalnodeadditiveExpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            right = m2
            	            ;
            	            	 if(rootinit) 
            	            	{ root->leftchild = oldroot;  oldroot = root; }
            	            	else 
            	            	{root->leftchild = left; oldroot = root; rootinit = true;} 
            	            	root->rightchild = right; exp= root;

            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelogicalnodeadditiveExpressionEx; /* Prevent compiler warnings */
    rulelogicalnodeadditiveExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end logicalnodeadditiveExpression */

/**
 * $ANTLR start logicalnodemultExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:309:1: logicalnodemultExpression returns [LogicalNodeExpression* exp] : e1= logicalnodeexprAtom ( ( MULT | DIV ) e2= logicalnodeexprAtom )* ;
 */
LogicalNodeExpression*
BUGSParser::logicalnodemultExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNodeExpression* exp;


    LogicalNodeExpression* e1;
    typedef	LogicalNodeExpression* RETURN_TYPE_e1;

    LogicalNodeExpression* e2;
    typedef	LogicalNodeExpression* RETURN_TYPE_e2;

    /* Initialize rule variables
     */


    LogicalNodeExpression* left;
    LogicalNodeExpression* root;
    LogicalNodeExpression* right;
    bool rootinit = false;
    LogicalNodeExpression* oldroot;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:317:2: (e1= logicalnodeexprAtom ( ( MULT | DIV ) e2= logicalnodeexprAtom )* )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:317:4: e1= logicalnodeexprAtom ( ( MULT | DIV ) e2= logicalnodeexprAtom )*
        {
            this->followPush(FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1476);
            e1=logicalnodeexprAtom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogicalnodemultExpressionEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                left = e1
                ; exp=left;

            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:318:2: ( ( MULT | DIV ) e2= logicalnodeexprAtom )*

            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case DIV:
                case MULT:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:318:3: ( MULT | DIV ) e2= logicalnodeexprAtom
            	    {
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:318:3: ( MULT | DIV )
            	        {
            	            int alt14=2;
            	            switch ( this->LA(1) )
            	            {
            	            case MULT:
            	            	{
            	            		alt14=1;
            	            	}
            	                break;
            	            case DIV:
            	            	{
            	            		alt14=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return exp;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 14 );
            	                ex->set_state( 0 );


            	                goto rulelogicalnodemultExpressionEx;

            	            }

            	            switch (alt14)
            	            {
            	        	case 1:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:318:4: MULT
            	        	    {
            	        	         this->matchToken(MULT, &FOLLOW_MULT_in_logicalnodemultExpression1483);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulelogicalnodemultExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             root = new LogicalNodeExpression(); root->op ='*'; root->type=LOPERATOR;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:319:4: DIV
            	        	    {
            	        	         this->matchToken(DIV, &FOLLOW_DIV_in_logicalnodemultExpression1490);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulelogicalnodemultExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             root = new LogicalNodeExpression(); root->op ='/'; root->type=LOPERATOR;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_logicalnodeexprAtom_in_logicalnodemultExpression1499);
            	        e2=logicalnodeexprAtom();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelogicalnodemultExpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            right = e2
            	            ;
            	            	if(rootinit) 
            	            	{ root->leftchild = oldroot;  oldroot = root; }
            	            	else 
            	            	{root->leftchild = left; oldroot = root; rootinit = true;}
            	            	 root->rightchild = right; exp= root;

            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelogicalnodemultExpressionEx; /* Prevent compiler warnings */
    rulelogicalnodemultExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end logicalnodemultExpression */

/**
 * $ANTLR start logicalnodeexprAtom
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:329:1: logicalnodeexprAtom returns [LogicalNodeExpression* exp = new LogicalNodeExpression()] : ( unaryExpression | uvNode | MINUS uvNode | OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET | MINUS OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET | scalarFunctions | vectorFunctions | MINUS scalarFunctions | MINUS vectorFunctions );
 */
LogicalNodeExpression*
BUGSParser::logicalnodeexprAtom()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNodeExpression* exp;


    LogicalNodeExpression* e1;
    typedef	LogicalNodeExpression* RETURN_TYPE_e1;

    double unaryExpression17;
    typedef	double RETURN_TYPE_unaryExpression17;

    UnivariateNode* uvNode18;
    typedef	UnivariateNode* RETURN_TYPE_uvNode18;

    UnivariateNode* uvNode19;
    typedef	UnivariateNode* RETURN_TYPE_uvNode19;

    ScalarFunction* scalarFunctions20;
    typedef	ScalarFunction* RETURN_TYPE_scalarFunctions20;

    VectorFunction* vectorFunctions21;
    typedef	VectorFunction* RETURN_TYPE_vectorFunctions21;

    ScalarFunction* scalarFunctions22;
    typedef	ScalarFunction* RETURN_TYPE_scalarFunctions22;

    VectorFunction* vectorFunctions23;
    typedef	VectorFunction* RETURN_TYPE_vectorFunctions23;

    /* Initialize rule variables
     */
    exp =  new LogicalNodeExpression();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:330:2: ( unaryExpression | uvNode | MINUS uvNode | OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET | MINUS OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET | scalarFunctions | vectorFunctions | MINUS scalarFunctions | MINUS vectorFunctions )

            ANTLR_UINT32 alt16;

            alt16=9;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case CONSTANTINT:
            		case CONSTANTVALUE:
            			{
            				alt16=1;
            			}
            		    break;
            		case OPENBRACKET:
            			{
            				alt16=5;
            			}
            		    break;
            		case NODENAME:
            			{
            				alt16=3;
            			}
            		    break;
            		case ABSOPENBRACKET:
            		case ARCCOSHOPENBRACKET:
            		case ARCCOSOPENBRACKET:
            		case ARCSINHOPENBRACKET:
            		case ARCSINOPENBRACKET:
            		case ARCTANOPENBRACKET:
            		case CLOGLOGOPENBRACKET:
            		case COSHOPENBRACKET:
            		case COSOPENBRACKET:
            		case CUMULATIVEOPENBRACKET:
            		case CUTOPENBRACKET:
            		case DENSITYOPENBRACKET:
            		case DEVIANCEOPENBRACKET:
            		case EQUALSOPENBRACKET:
            		case EXPOPENBRACKET:
            		case GAMMAPOPENBRACKET:
            		case ICLOGLOGOPENBRACKET:
            		case ILOGITOPENBRACKET:
            		case INTEGRALOPENBRACKET:
            		case LOGFACTOPENBRACKET:
            		case LOGGAMOPENBRACKET:
            		case LOGITOPENBRACKET:
            		case LOGOPENBRACKET:
            		case MAXOPENBRACKET:
            		case MINOPENBRACKET:
            		case PHIOPENBRACKET:
            		case POSTPVALUEOPENBRACKET:
            		case POWOPENBRACKET:
            		case PRIORPVALUEOPENBRACKET:
            		case PROBITOPENBRACKET:
            		case REPLICATEPOSTOPENBRACKET:
            		case REPLICATEPRIOROPENBRACKET:
            		case ROUNDOPENBRACKET:
            		case SINHOPENBRACKET:
            		case SINOPENBRACKET:
            		case SOLUTIONOPENBRACKET:
            		case SQRTOPENBRACKET:
            		case STEPOPENBRACKET:
            		case TANHOPENBRACKET:
            		case TANOPENBRACKET:
            		case TRUNCOPENBRACKET:
            			{
            				alt16=8;
            			}
            		    break;
            		case INPRODOPENBRACKET:
            		case INVERSEOPENBRACKET:
            		case MEANOPENBRACKET:
            		case SDOPENBRACKET:
            		case SUMOPENBRACKET:
            			{
            				alt16=9;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return exp;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 16 );
            		    ex->set_state( 1 );


            		    goto rulelogicalnodeexprAtomEx;

            		}

            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            	{
            		alt16=1;
            	}
                break;
            case NODENAME:
            	{
            		alt16=2;
            	}
                break;
            case OPENBRACKET:
            	{
            		alt16=4;
            	}
                break;
            case ABSOPENBRACKET:
            case ARCCOSHOPENBRACKET:
            case ARCCOSOPENBRACKET:
            case ARCSINHOPENBRACKET:
            case ARCSINOPENBRACKET:
            case ARCTANOPENBRACKET:
            case CLOGLOGOPENBRACKET:
            case COSHOPENBRACKET:
            case COSOPENBRACKET:
            case CUMULATIVEOPENBRACKET:
            case CUTOPENBRACKET:
            case DENSITYOPENBRACKET:
            case DEVIANCEOPENBRACKET:
            case EQUALSOPENBRACKET:
            case EXPOPENBRACKET:
            case GAMMAPOPENBRACKET:
            case ICLOGLOGOPENBRACKET:
            case ILOGITOPENBRACKET:
            case INTEGRALOPENBRACKET:
            case LOGFACTOPENBRACKET:
            case LOGGAMOPENBRACKET:
            case LOGITOPENBRACKET:
            case LOGOPENBRACKET:
            case MAXOPENBRACKET:
            case MINOPENBRACKET:
            case PHIOPENBRACKET:
            case POSTPVALUEOPENBRACKET:
            case POWOPENBRACKET:
            case PRIORPVALUEOPENBRACKET:
            case PROBITOPENBRACKET:
            case REPLICATEPOSTOPENBRACKET:
            case REPLICATEPRIOROPENBRACKET:
            case ROUNDOPENBRACKET:
            case SINHOPENBRACKET:
            case SINOPENBRACKET:
            case SOLUTIONOPENBRACKET:
            case SQRTOPENBRACKET:
            case STEPOPENBRACKET:
            case TANHOPENBRACKET:
            case TANOPENBRACKET:
            case TRUNCOPENBRACKET:
            	{
            		alt16=6;
            	}
                break;
            case INPRODOPENBRACKET:
            case INVERSEOPENBRACKET:
            case MEANOPENBRACKET:
            case SDOPENBRACKET:
            case SUMOPENBRACKET:
            	{
            		alt16=7;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return exp;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto rulelogicalnodeexprAtomEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:330:4: unaryExpression
        	    {
        	        this->followPush(FOLLOW_unaryExpression_in_logicalnodeexprAtom1520);
        	        unaryExpression17=unaryExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->expvalue=unaryExpression17
        	            ; exp
        	            ->type=LCONSTANT; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:331:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_logicalnodeexprAtom1527);
        	        uvNode18=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->uvnode=uvNode18
        	            ; exp
        	            ->type=LNODE; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:332:4: MINUS uvNode
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_logicalnodeexprAtom1534);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_logicalnodeexprAtom1536);
        	        uvNode19=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->uvnode=uvNode19
        	            ; exp
        	            ->uvnode->isunaryminus=true; exp
        	            ->type=LNODE; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:333:4: OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1543);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1547);
        	        e1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1549);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->exp = e1
        	            ; exp
        	            ->type=LEXPRESSION;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:334:4: MINUS OPENBRACKET e1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_logicalnodeexprAtom1556);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_logicalnodeexprAtom1558);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalnodeexprAtom1562);
        	        e1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_logicalnodeexprAtom1564);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->exp = e1
        	            ; exp
        	            ->isunaryminus = true; exp
        	            ->type=LEXPRESSION;
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:335:4: scalarFunctions
        	    {
        	        this->followPush(FOLLOW_scalarFunctions_in_logicalnodeexprAtom1571);
        	        scalarFunctions20=scalarFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->function = scalarFunctions20
        	            ;  exp
        	            ->type=LFUNCTION;
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:336:4: vectorFunctions
        	    {
        	        this->followPush(FOLLOW_vectorFunctions_in_logicalnodeexprAtom1578);
        	        vectorFunctions21=vectorFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->function = vectorFunctions21
        	            ;  exp
        	            ->type=LFUNCTION;
        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:337:4: MINUS scalarFunctions
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_logicalnodeexprAtom1585);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_scalarFunctions_in_logicalnodeexprAtom1587);
        	        scalarFunctions22=scalarFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            scalarFunctions22
        	            ->isunaryminus=true; exp
        	            ->function = scalarFunctions22
        	            ;  exp
        	            ->type=LFUNCTION;
        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:338:4: MINUS vectorFunctions
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_logicalnodeexprAtom1594);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_vectorFunctions_in_logicalnodeexprAtom1596);
        	        vectorFunctions23=vectorFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalnodeexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            vectorFunctions23
        	            ->isunaryminus=true; exp
        	            ->function = vectorFunctions23
        	            ;  exp
        	            ->type=LFUNCTION;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalnodeexprAtomEx; /* Prevent compiler warnings */
    rulelogicalnodeexprAtomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end logicalnodeexprAtom */

/**
 * $ANTLR start uvNode
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:341:1: uvNode returns [UnivariateNode* uvnode = new UnivariateNode()] : NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? ;
 */
UnivariateNode*
BUGSParser::uvNode()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateNode* uvnode;


    const CommonTokenType*    NODENAME24;
    Expression* exp1;
    typedef	Expression* RETURN_TYPE_exp1;

    Expression* exp2;
    typedef	Expression* RETURN_TYPE_exp2;

    /* Initialize rule variables
     */
    uvnode =  new UnivariateNode();


    NODENAME24       = NULL;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:342:2: ( NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:342:4: NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
        {
            NODENAME24 =  this->matchToken(NODENAME, &FOLLOW_NODENAME_in_uvNode1614);
            if  (this->hasException())
            {
                goto ruleuvNodeEx;
            }
            if (this->hasFailed())
            {
                return uvnode;
            }


            if ( this->get_backtracking()==0 )
            {
                uvnode
                ->nodeid = (NODENAME24->getText());
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:343:2: ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case OPENSQUAREBRACKET:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:344:2: OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET
            	    {
            	         this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_uvNode1622);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return uvnode;
            	        }


            	        this->followPush(FOLLOW_expression_in_uvNode1626);
            	        exp1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return uvnode;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            uvnode
            	            ->indices.push_back(exp1
            	            );
            	        }


            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:345:2: ( COMMA exp2= expression )*

            	        for (;;)
            	        {
            	            int alt17=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt17=1;
            	            	}
            	                break;

            	            }

            	            switch (alt17)
            	            {
            	        	case 1:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:346:2: COMMA exp2= expression
            	        	    {
            	        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_uvNode1635);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return uvnode;
            	        	        }


            	        	        this->followPush(FOLLOW_expression_in_uvNode1639);
            	        	        exp2=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return uvnode;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            uvnode
            	        	            ->indices.push_back(exp2
            	        	            );
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop17;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop17: ; /* Jump out to here if this rule does not match */


            	         this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_uvNode1650);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return uvnode;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvNodeEx; /* Prevent compiler warnings */
    ruleuvNodeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uvnode;
}
/* $ANTLR end uvNode */

/**
 * $ANTLR start mvNode
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:351:1: mvNode returns [MultivariateNode* mvnode = new MultivariateNode()] : NODENAME OPENSQUAREBRACKET mi= multiIndices CLOSESQUAREBRACKET ;
 */
MultivariateNode*
BUGSParser::mvNode()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateNode* mvnode;


    const CommonTokenType*    NODENAME25;
    vector<MultiDimExpression* > mi;
    typedef	vector<MultiDimExpression* > RETURN_TYPE_mi;

    /* Initialize rule variables
     */
    mvnode =  new MultivariateNode();


    NODENAME25       = NULL;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:352:2: ( NODENAME OPENSQUAREBRACKET mi= multiIndices CLOSESQUAREBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:352:4: NODENAME OPENSQUAREBRACKET mi= multiIndices CLOSESQUAREBRACKET
        {
            NODENAME25 =  this->matchToken(NODENAME, &FOLLOW_NODENAME_in_mvNode1669);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return mvnode;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_mvNode1671);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return mvnode;
            }


            this->followPush(FOLLOW_multiIndices_in_mvNode1675);
            mi=multiIndices();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return mvnode;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_mvNode1677);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return mvnode;
            }


            if ( this->get_backtracking()==0 )
            {
                mvnode
                ->nodeid = (NODENAME25->getText()); 
                mvnode
                ->indices=mi
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvNodeEx; /* Prevent compiler warnings */
    rulemvNodeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return mvnode;
}
/* $ANTLR end mvNode */

/**
 * $ANTLR start expression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:356:1: expression returns [Expression* exp] : additiveExpression ;
 */
Expression*
BUGSParser::expression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    Expression* additiveExpression26;
    typedef	Expression* RETURN_TYPE_additiveExpression26;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:357:2: ( additiveExpression )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:357:4: additiveExpression
        {
            this->followPush(FOLLOW_additiveExpression_in_expression1695);
            additiveExpression26=additiveExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpressionEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                exp= 
                additiveExpression26
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end expression */

/**
 * $ANTLR start additiveExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:360:1: additiveExpression returns [Expression* exp] : m1= multExpression ( ( PLUS | MINUS ) m2= multExpression )* ;
 */
Expression*
BUGSParser::additiveExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    Expression* m1;
    typedef	Expression* RETURN_TYPE_m1;

    Expression* m2;
    typedef	Expression* RETURN_TYPE_m2;

    /* Initialize rule variables
     */


    Expression* left;
    Expression* root;
    Expression* right;
    bool rootinit = false;
    Expression* oldroot;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:368:2: (m1= multExpression ( ( PLUS | MINUS ) m2= multExpression )* )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:368:4: m1= multExpression ( ( PLUS | MINUS ) m2= multExpression )*
        {
            this->followPush(FOLLOW_multExpression_in_additiveExpression1718);
            m1=multExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadditiveExpressionEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                left = m1
                ; exp=left;

            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:369:2: ( ( PLUS | MINUS ) m2= multExpression )*

            for (;;)
            {
                int alt20=2;
                switch ( this->LA(1) )
                {
                case MINUS:
                case PLUS:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:369:3: ( PLUS | MINUS ) m2= multExpression
            	    {
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:369:3: ( PLUS | MINUS )
            	        {
            	            int alt19=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS:
            	            	{
            	            		alt19=1;
            	            	}
            	                break;
            	            case MINUS:
            	            	{
            	            		alt19=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return exp;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 19 );
            	                ex->set_state( 0 );


            	                goto ruleadditiveExpressionEx;

            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:369:4: PLUS
            	        	    {
            	        	         this->matchToken(PLUS, &FOLLOW_PLUS_in_additiveExpression1725);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            root = new Expression(); root->op ='+'; root->type=OPERATOR;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:370:3: MINUS
            	        	    {
            	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_additiveExpression1731);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            root = new Expression(); root->op ='-'; root->type=OPERATOR;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_multExpression_in_additiveExpression1740);
            	        m2=multExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            right = m2
            	            ; 
            	            	if(rootinit) 
            	            	{ root->leftchild = oldroot;  oldroot = root; }
            	            	else 
            	            	{root->leftchild = left; oldroot = root; rootinit = true;}
            	            	root->rightchild = right; exp= root;

            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end additiveExpression */

/**
 * $ANTLR start multExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:380:1: multExpression returns [Expression* exp] : e1= exprAtom ( ( MULT | DIV ) e2= exprAtom )* ;
 */
Expression*
BUGSParser::multExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    Expression* e1;
    typedef	Expression* RETURN_TYPE_e1;

    Expression* e2;
    typedef	Expression* RETURN_TYPE_e2;

    /* Initialize rule variables
     */


    Expression* left;
    Expression* root;
    Expression* right;
    bool rootinit = false;
    Expression* oldroot;


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:388:2: (e1= exprAtom ( ( MULT | DIV ) e2= exprAtom )* )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:388:4: e1= exprAtom ( ( MULT | DIV ) e2= exprAtom )*
        {
            this->followPush(FOLLOW_exprAtom_in_multExpression1767);
            e1=exprAtom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultExpressionEx;
            }
            if (this->hasFailed())
            {
                return exp;
            }


            if ( this->get_backtracking()==0 )
            {
                left = e1
                ; exp=left;

            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:389:2: ( ( MULT | DIV ) e2= exprAtom )*

            for (;;)
            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                case DIV:
                case MULT:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:389:3: ( MULT | DIV ) e2= exprAtom
            	    {
            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:389:3: ( MULT | DIV )
            	        {
            	            int alt21=2;
            	            switch ( this->LA(1) )
            	            {
            	            case MULT:
            	            	{
            	            		alt21=1;
            	            	}
            	                break;
            	            case DIV:
            	            	{
            	            		alt21=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return exp;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 21 );
            	                ex->set_state( 0 );


            	                goto rulemultExpressionEx;

            	            }

            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:389:4: MULT
            	        	    {
            	        	         this->matchToken(MULT, &FOLLOW_MULT_in_multExpression1774);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            root = new Expression(); root->op ='*'; root->type=OPERATOR;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:390:4: DIV
            	        	    {
            	        	         this->matchToken(DIV, &FOLLOW_DIV_in_multExpression1781);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultExpressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return exp;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            root = new Expression(); root->op ='/'; root->type=OPERATOR;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_exprAtom_in_multExpression1790);
            	        e2=exprAtom();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultExpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            right = e2
            	            ; 
            	            	if(rootinit) 
            	            	{ root->leftchild = oldroot;  oldroot = root; }
            	            	else 
            	            	{root->leftchild = left; oldroot = root; rootinit = true;}
            	            	root->rightchild = right; exp= root;

            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultExpressionEx; /* Prevent compiler warnings */
    rulemultExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end multExpression */

/**
 * $ANTLR start exprAtom
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:399:1: exprAtom returns [Expression* exp = new Expression()] : ( unaryExpression | uvNode | OPENBRACKET e1= expression CLOSEBRACKET );
 */
Expression*
BUGSParser::exprAtom()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    Expression* e1;
    typedef	Expression* RETURN_TYPE_e1;

    double unaryExpression27;
    typedef	double RETURN_TYPE_unaryExpression27;

    UnivariateNode* uvNode28;
    typedef	UnivariateNode* RETURN_TYPE_uvNode28;

    /* Initialize rule variables
     */
    exp =  new Expression();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:400:2: ( unaryExpression | uvNode | OPENBRACKET e1= expression CLOSEBRACKET )

            ANTLR_UINT32 alt23;

            alt23=3;

            switch ( this->LA(1) )
            {
            case CONSTANTINT:
            case CONSTANTVALUE:
            case MINUS:
            	{
            		alt23=1;
            	}
                break;
            case NODENAME:
            	{
            		alt23=2;
            	}
                break;
            case OPENBRACKET:
            	{
            		alt23=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return exp;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleexprAtomEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:400:4: unaryExpression
        	    {
        	        this->followPush(FOLLOW_unaryExpression_in_exprAtom1810);
        	        unaryExpression27=unaryExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->expvalue=unaryExpression27
        	            ; exp
        	            ->type=CONSTANT; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:401:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_exprAtom1817);
        	        uvNode28=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->uvnode=uvNode28
        	            ; exp
        	            ->type=NODE; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:402:4: OPENBRACKET e1= expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprAtom1824);
        	        if  (this->hasException())
        	        {
        	            goto ruleexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_expression_in_exprAtom1828);
        	        e1=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprAtom1830);
        	        if  (this->hasException())
        	        {
        	            goto ruleexprAtomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->exp = e1
        	            ; exp
        	            ->type=EXPRESSION;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexprAtomEx; /* Prevent compiler warnings */
    ruleexprAtomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end exprAtom */

/**
 * $ANTLR start unaryExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:405:1: unaryExpression returns [double uexpvalue] : ( MINUS CONSTANTVALUE | CONSTANTINT | MINUS CONSTANTINT | CONSTANTVALUE );
 */
double
BUGSParser::unaryExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    double uexpvalue;


    const CommonTokenType*    CONSTANTVALUE29;
    const CommonTokenType*    CONSTANTINT30;
    const CommonTokenType*    CONSTANTINT31;
    const CommonTokenType*    CONSTANTVALUE32;

    /* Initialize rule variables
     */

    CONSTANTVALUE29       = NULL;
    CONSTANTINT30       = NULL;
    CONSTANTINT31       = NULL;
    CONSTANTVALUE32       = NULL;


 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:406:2: ( MINUS CONSTANTVALUE | CONSTANTINT | MINUS CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt24;

            alt24=4;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case CONSTANTVALUE:
            			{
            				alt24=1;
            			}
            		    break;
            		case CONSTANTINT:
            			{
            				alt24=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return uexpvalue;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 24 );
            		    ex->set_state( 1 );


            		    goto ruleunaryExpressionEx;

            		}

            	}
                break;
            case CONSTANTINT:
            	{
            		alt24=2;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt24=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return uexpvalue;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleunaryExpressionEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:406:4: MINUS CONSTANTVALUE
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_unaryExpression1848);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        CONSTANTVALUE29 =  this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression1850);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= -1 * ::atof((CONSTANTVALUE29->getText()).c_str());

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:407:4: CONSTANTINT
        	    {
        	        CONSTANTINT30 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression1857);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atoi((CONSTANTINT30->getText()).c_str());

        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:408:4: MINUS CONSTANTINT
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_unaryExpression1865);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        CONSTANTINT31 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression1867);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= -1 * ::atoi((CONSTANTINT31->getText()).c_str());

        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:409:4: CONSTANTVALUE
        	    {
        	        CONSTANTVALUE32 =  this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression1874);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atof((CONSTANTVALUE32->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uexpvalue;
}
/* $ANTLR end unaryExpression */

/**
 * $ANTLR start multiIndices
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:412:1: multiIndices returns [vector<MultiDimExpression* > indices] : me1= multiDimExpression ( COMMA me2= multiDimExpression )* ;
 */
vector<MultiDimExpression* >
BUGSParser::multiIndices()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MultiDimExpression* > indices;


    MultiDimExpression* me1;
    typedef	MultiDimExpression* RETURN_TYPE_me1;

    MultiDimExpression* me2;
    typedef	MultiDimExpression* RETURN_TYPE_me2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:413:2: (me1= multiDimExpression ( COMMA me2= multiDimExpression )* )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:413:4: me1= multiDimExpression ( COMMA me2= multiDimExpression )*
        {
            this->followPush(FOLLOW_multiDimExpression_in_multiIndices1893);
            me1=multiDimExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiIndicesEx;
            }
            if (this->hasFailed())
            {
                return indices;
            }


            if ( this->get_backtracking()==0 )
            {
                indices
                .push_back(me1
                );
            }


            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:414:3: ( COMMA me2= multiDimExpression )*

            for (;;)
            {
                int alt25=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:414:4: COMMA me2= multiDimExpression
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_multiIndices1900);
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return indices;
            	        }


            	        this->followPush(FOLLOW_multiDimExpression_in_multiIndices1904);
            	        me2=multiDimExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return indices;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            indices
            	            .push_back(me2
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiIndicesEx; /* Prevent compiler warnings */
    rulemultiIndicesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return indices;
}
/* $ANTLR end multiIndices */

/**
 * $ANTLR start multiDimExpression
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:417:1: multiDimExpression returns [MultiDimExpression* exp = new MultiDimExpression()] : (| ( OPENBRACKET expression COLON )=> OPENBRACKET ex1= expression COLON ex2= expression CLOSEBRACKET |ex3= expression ( COLON ex4= expression )? );
 */
MultiDimExpression*
BUGSParser::multiDimExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultiDimExpression* exp;


    Expression* ex1;
    typedef	Expression* RETURN_TYPE_ex1;

    Expression* ex2;
    typedef	Expression* RETURN_TYPE_ex2;

    Expression* ex3;
    typedef	Expression* RETURN_TYPE_ex3;

    Expression* ex4;
    typedef	Expression* RETURN_TYPE_ex4;

    /* Initialize rule variables
     */
    exp =  new MultiDimExpression();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:418:2: (| ( OPENBRACKET expression COLON )=> OPENBRACKET ex1= expression COLON ex2= expression CLOSEBRACKET |ex3= expression ( COLON ex4= expression )? )

            ANTLR_UINT32 alt27;

            alt27=3;

            switch ( this->LA(1) )
            {
            case CLOSESQUAREBRACKET:
            case COMMA:
            	{
            		alt27=1;
            	}
                break;
            case OPENBRACKET:
            	{
            		{
            		    int LA27_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred12_BUGS>() )))
            		    {
            		        alt27=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt27=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return exp;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 27 );
            		        ex->set_state( 3 );


            		        goto rulemultiDimExpressionEx;

            		    }
            		}
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case MINUS:
            case NODENAME:
            	{
            		alt27=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return exp;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto rulemultiDimExpressionEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:419:13: 
        	    {
        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->empty=true;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:420:4: ( OPENBRACKET expression COLON )=> OPENBRACKET ex1= expression COLON ex2= expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_multiDimExpression1943);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1947);
        	        ex1=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1949);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1953);
        	        ex2=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multiDimExpression1955);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->colon=true; exp
        	            ->expbeforecolon=ex1
        	            ; exp
        	            ->expaftercolon=ex2
        	            ; exp
        	            ->empty=false;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:422:4: ex3= expression ( COLON ex4= expression )?
        	    {
        	        this->followPush(FOLLOW_expression_in_multiDimExpression1965);
        	        ex3=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->colon=false; exp
        	            ->expbeforecolon=ex3
        	            ; exp
        	            ->empty=false;
        	        }


        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:423:2: ( COLON ex4= expression )?
        	        {
        	            int alt26=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt26=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:423:3: COLON ex4= expression
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1971);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return exp;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_multiDimExpression1975);
        	        	        ex4=expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return exp;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            exp
        	        	            ->colon=true; exp
        	        	            ->expaftercolon=ex4
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemultiDimExpressionEx; /* Prevent compiler warnings */
    rulemultiDimExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end multiDimExpression */

/**
 * $ANTLR start startFor
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:426:1: startFor returns [string loopvariable, Expression* beginexpression, Expression* endexpression] : FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE ;
 */
BUGSParser_startFor_return
BUGSParser::startFor()
{
    BUGSParser_startFor_return retval(this);


    BUGSParser_loopVariable_return loopVariable33;
    typedef	BUGSParser_loopVariable_return RETURN_TYPE_loopVariable33;

    Expression* loopBegin34;
    typedef	Expression* RETURN_TYPE_loopBegin34;

    Expression* loopEnd35;
    typedef	Expression* RETURN_TYPE_loopEnd35;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:427:2: ( FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:427:4: FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE
        {
             this->matchToken(FORSTART, &FOLLOW_FORSTART_in_startFor1995);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_startFor1997);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopVariable_in_startFor1999);
            loopVariable33=loopVariable();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(IN, &FOLLOW_IN_in_startFor2001);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopBegin_in_startFor2003);
            loopBegin34=loopBegin();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(COLON, &FOLLOW_COLON_in_startFor2005);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopEnd_in_startFor2007);
            loopEnd35=loopEnd();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_startFor2009);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_startFor2011);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.loopvariable= 
                (this->get_strstream()->toStringTT(loopVariable33.start, loopVariable33.stop))
                ;
                 
                	retval.beginexpression= 
                loopBegin34
                ;

                	retval.endexpression= 
                loopEnd35
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestartForEx; /* Prevent compiler warnings */
    rulestartForEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end startFor */

/**
 * $ANTLR start endFor
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:433:1: endFor : CLOSEBRACE ;
 */
void
BUGSParser::endFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:434:2: ( CLOSEBRACE )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:434:4: CLOSEBRACE
        {
             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_endFor2027);
            if  (this->hasException())
            {
                goto ruleendForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendForEx; /* Prevent compiler warnings */
    ruleendForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end endFor */

/**
 * $ANTLR start loopVariable
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:437:1: loopVariable : NODENAME ;
 */
BUGSParser_loopVariable_return
BUGSParser::loopVariable()
{
    BUGSParser_loopVariable_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:438:2: ( NODENAME )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:438:4: NODENAME
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_loopVariable2039);
            if  (this->hasException())
            {
                goto ruleloopVariableEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopVariableEx; /* Prevent compiler warnings */
    ruleloopVariableEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end loopVariable */

/**
 * $ANTLR start loopBegin
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:441:1: loopBegin returns [Expression* expr] : expression ;
 */
Expression*
BUGSParser::loopBegin()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* expr;


    Expression* expression36;
    typedef	Expression* RETURN_TYPE_expression36;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:442:2: ( expression )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:442:4: expression
        {
            this->followPush(FOLLOW_expression_in_loopBegin2055);
            expression36=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleloopBeginEx;
            }
            if (this->hasFailed())
            {
                return expr;
            }


            if ( this->get_backtracking()==0 )
            {
                expr= 
                expression36
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopBeginEx; /* Prevent compiler warnings */
    ruleloopBeginEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return expr;
}
/* $ANTLR end loopBegin */

/**
 * $ANTLR start loopEnd
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:445:1: loopEnd returns [Expression* expr] : expression ;
 */
Expression*
BUGSParser::loopEnd()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* expr;


    Expression* expression37;
    typedef	Expression* RETURN_TYPE_expression37;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:446:2: ( expression )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:446:4: expression
        {
            this->followPush(FOLLOW_expression_in_loopEnd2073);
            expression37=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleloopEndEx;
            }
            if (this->hasFailed())
            {
                return expr;
            }


            if ( this->get_backtracking()==0 )
            {
                expr= 
                expression37
                ;
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopEndEx; /* Prevent compiler warnings */
    ruleloopEndEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return expr;
}
/* $ANTLR end loopEnd */

/**
 * $ANTLR start scalarFunctions
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:469:1: scalarFunctions returns [ScalarFunction* function = new ScalarFunction()] : ( ABSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCCOSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCCOSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCSINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCSINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCTANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | CLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | COSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | COSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | CUMULATIVEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | CUTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | DENSITYOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | DEVIANCEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | EQUALSOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | EXPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | GAMMAPOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | ILOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ICLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | INTEGRALOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET | LOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGFACTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGGAMOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | MAXOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | MINOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | PHIOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | POSTPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | POWOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | PRIORPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | PROBITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | REPLICATEPOSTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | REPLICATEPRIOROPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ROUNDOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SOLUTIONOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET | SQRTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | STEPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TANHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TRUNCOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET );
 */
ScalarFunction*
BUGSParser::scalarFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ScalarFunction* function;


    LogicalNodeExpression* ex1;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex1;

    LogicalNodeExpression* ex2;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex2;

    LogicalNodeExpression* ex3;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex3;

    LogicalNodeExpression* ex4;
    typedef	LogicalNodeExpression* RETURN_TYPE_ex4;

    /* Initialize rule variables
     */
    function =  new ScalarFunction();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:470:2: ( ABSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCCOSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCCOSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCSINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCSINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ARCTANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | CLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | COSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | COSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | CUMULATIVEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | CUTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | DENSITYOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | DEVIANCEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | EQUALSOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | EXPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | GAMMAPOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | ILOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ICLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | INTEGRALOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET | LOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGFACTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGGAMOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | LOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | MAXOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | MINOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | PHIOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | POSTPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | POWOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET | PRIORPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | PROBITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | REPLICATEPOSTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | REPLICATEPRIOROPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | ROUNDOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | SOLUTIONOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET | SQRTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | STEPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TANHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET | TRUNCOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET )

            ANTLR_UINT32 alt28;

            alt28=41;

            switch ( this->LA(1) )
            {
            case ABSOPENBRACKET:
            	{
            		alt28=1;
            	}
                break;
            case ARCCOSOPENBRACKET:
            	{
            		alt28=2;
            	}
                break;
            case ARCCOSHOPENBRACKET:
            	{
            		alt28=3;
            	}
                break;
            case ARCSINOPENBRACKET:
            	{
            		alt28=4;
            	}
                break;
            case ARCSINHOPENBRACKET:
            	{
            		alt28=5;
            	}
                break;
            case ARCTANOPENBRACKET:
            	{
            		alt28=6;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt28=7;
            	}
                break;
            case COSOPENBRACKET:
            	{
            		alt28=8;
            	}
                break;
            case COSHOPENBRACKET:
            	{
            		alt28=9;
            	}
                break;
            case CUMULATIVEOPENBRACKET:
            	{
            		alt28=10;
            	}
                break;
            case CUTOPENBRACKET:
            	{
            		alt28=11;
            	}
                break;
            case DENSITYOPENBRACKET:
            	{
            		alt28=12;
            	}
                break;
            case DEVIANCEOPENBRACKET:
            	{
            		alt28=13;
            	}
                break;
            case EQUALSOPENBRACKET:
            	{
            		alt28=14;
            	}
                break;
            case EXPOPENBRACKET:
            	{
            		alt28=15;
            	}
                break;
            case GAMMAPOPENBRACKET:
            	{
            		alt28=16;
            	}
                break;
            case ILOGITOPENBRACKET:
            	{
            		alt28=17;
            	}
                break;
            case ICLOGLOGOPENBRACKET:
            	{
            		alt28=18;
            	}
                break;
            case INTEGRALOPENBRACKET:
            	{
            		alt28=19;
            	}
                break;
            case LOGOPENBRACKET:
            	{
            		alt28=20;
            	}
                break;
            case LOGFACTOPENBRACKET:
            	{
            		alt28=21;
            	}
                break;
            case LOGGAMOPENBRACKET:
            	{
            		alt28=22;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt28=23;
            	}
                break;
            case MAXOPENBRACKET:
            	{
            		alt28=24;
            	}
                break;
            case MINOPENBRACKET:
            	{
            		alt28=25;
            	}
                break;
            case PHIOPENBRACKET:
            	{
            		alt28=26;
            	}
                break;
            case POSTPVALUEOPENBRACKET:
            	{
            		alt28=27;
            	}
                break;
            case POWOPENBRACKET:
            	{
            		alt28=28;
            	}
                break;
            case PRIORPVALUEOPENBRACKET:
            	{
            		alt28=29;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt28=30;
            	}
                break;
            case REPLICATEPOSTOPENBRACKET:
            	{
            		alt28=31;
            	}
                break;
            case REPLICATEPRIOROPENBRACKET:
            	{
            		alt28=32;
            	}
                break;
            case ROUNDOPENBRACKET:
            	{
            		alt28=33;
            	}
                break;
            case SINOPENBRACKET:
            	{
            		alt28=34;
            	}
                break;
            case SINHOPENBRACKET:
            	{
            		alt28=35;
            	}
                break;
            case SOLUTIONOPENBRACKET:
            	{
            		alt28=36;
            	}
                break;
            case SQRTOPENBRACKET:
            	{
            		alt28=37;
            	}
                break;
            case STEPOPENBRACKET:
            	{
            		alt28=38;
            	}
                break;
            case TANOPENBRACKET:
            	{
            		alt28=39;
            	}
                break;
            case TANHOPENBRACKET:
            	{
            		alt28=40;
            	}
                break;
            case TRUNCOPENBRACKET:
            	{
            		alt28=41;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return function;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulescalarFunctionsEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:471:3: ABSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ABSOPENBRACKET, &FOLLOW_ABSOPENBRACKET_in_scalarFunctions2327);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2331);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2333);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ABS"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:472:4: ARCCOSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ARCCOSOPENBRACKET, &FOLLOW_ARCCOSOPENBRACKET_in_scalarFunctions2340);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2344);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2346);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ARCCOS"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:473:4: ARCCOSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ARCCOSHOPENBRACKET, &FOLLOW_ARCCOSHOPENBRACKET_in_scalarFunctions2353);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2357);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2359);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ARCCOSH"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:474:4: ARCSINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ARCSINOPENBRACKET, &FOLLOW_ARCSINOPENBRACKET_in_scalarFunctions2366);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2370);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2372);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ARCSIN"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:475:4: ARCSINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ARCSINHOPENBRACKET, &FOLLOW_ARCSINHOPENBRACKET_in_scalarFunctions2379);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2383);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2385);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ARCSINH"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:476:4: ARCTANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ARCTANOPENBRACKET, &FOLLOW_ARCTANOPENBRACKET_in_scalarFunctions2392);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2396);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2398);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ARCTAN"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:477:4: CLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_scalarFunctions2405);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2410);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2412);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="CLOGLOG"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:478:4: COSOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(COSOPENBRACKET, &FOLLOW_COSOPENBRACKET_in_scalarFunctions2419);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2423);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2425);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="COS"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:479:4: COSHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(COSHOPENBRACKET, &FOLLOW_COSHOPENBRACKET_in_scalarFunctions2432);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2436);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2438);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="COSH"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 10:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:480:4: CUMULATIVEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(CUMULATIVEOPENBRACKET, &FOLLOW_CUMULATIVEOPENBRACKET_in_scalarFunctions2445);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2449);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2451);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2455);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2457);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="CUMULATIVE"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 11:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:482:4: CUTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(CUTOPENBRACKET, &FOLLOW_CUTOPENBRACKET_in_scalarFunctions2466);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2470);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2472);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="CUT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 12:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:483:4: DENSITYOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(DENSITYOPENBRACKET, &FOLLOW_DENSITYOPENBRACKET_in_scalarFunctions2479);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2483);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2485);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2489);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2491);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="DENSITY"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 13:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:485:4: DEVIANCEOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(DEVIANCEOPENBRACKET, &FOLLOW_DEVIANCEOPENBRACKET_in_scalarFunctions2500);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2504);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2506);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2510);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2512);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="DEVIANCE"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 14:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:487:4: EQUALSOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(EQUALSOPENBRACKET, &FOLLOW_EQUALSOPENBRACKET_in_scalarFunctions2521);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2525);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2527);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2531);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2533);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="EQUALS"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 15:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:489:4: EXPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(EXPOPENBRACKET, &FOLLOW_EXPOPENBRACKET_in_scalarFunctions2542);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2546);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2549);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="EXP"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 16:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:491:4: GAMMAPOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(GAMMAPOPENBRACKET, &FOLLOW_GAMMAPOPENBRACKET_in_scalarFunctions2558);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2562);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2564);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2568);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2571);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="GAMMAP"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 17:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:493:4: ILOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ILOGITOPENBRACKET, &FOLLOW_ILOGITOPENBRACKET_in_scalarFunctions2580);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2584);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2586);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ILOGIT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 18:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:495:4: ICLOGLOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ICLOGLOGOPENBRACKET, &FOLLOW_ICLOGLOGOPENBRACKET_in_scalarFunctions2595);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2599);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2601);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ICLOGLOG"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 19:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:497:4: INTEGRALOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(INTEGRALOPENBRACKET, &FOLLOW_INTEGRALOPENBRACKET_in_scalarFunctions2610);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2614);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2616);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2620);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2624);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2628);
        	        ex3=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2630);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2634);
        	        ex4=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2636);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="INTEGRAL"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ; 
        	            	function
        	            ->parameter3=ex3
        	            ; function
        	            ->parameter4=ex4
        	            ;
        	        }


        	    }
        	    break;
        	case 20:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:501:4: LOGOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_scalarFunctions2645);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2649);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2651);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="LOG"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 21:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:503:4: LOGFACTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(LOGFACTOPENBRACKET, &FOLLOW_LOGFACTOPENBRACKET_in_scalarFunctions2660);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2664);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2666);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="LOGFACT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 22:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:505:4: LOGGAMOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(LOGGAMOPENBRACKET, &FOLLOW_LOGGAMOPENBRACKET_in_scalarFunctions2675);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2679);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2681);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="LOGGAM"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 23:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:507:4: LOGITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_scalarFunctions2690);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2694);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2696);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="LOGIT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 24:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:509:4: MAXOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(MAXOPENBRACKET, &FOLLOW_MAXOPENBRACKET_in_scalarFunctions2705);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2709);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2711);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2715);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2717);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="MAX"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 25:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:511:4: MINOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(MINOPENBRACKET, &FOLLOW_MINOPENBRACKET_in_scalarFunctions2726);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2730);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2732);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2736);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2738);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="MIN"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 26:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:513:4: PHIOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(PHIOPENBRACKET, &FOLLOW_PHIOPENBRACKET_in_scalarFunctions2747);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2751);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2753);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="PHI"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 27:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:515:4: POSTPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(POSTPVALUEOPENBRACKET, &FOLLOW_POSTPVALUEOPENBRACKET_in_scalarFunctions2762);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2766);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2768);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="POSTPVALUE"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 28:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:517:4: POWOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(POWOPENBRACKET, &FOLLOW_POWOPENBRACKET_in_scalarFunctions2777);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2781);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2783);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2787);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2789);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="POW"; function
        	            ->parameter1=ex1
        	            ;  function
        	            ->parameter2=ex2
        	            ;
        	        }


        	    }
        	    break;
        	case 29:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:519:4: PRIORPVALUEOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(PRIORPVALUEOPENBRACKET, &FOLLOW_PRIORPVALUEOPENBRACKET_in_scalarFunctions2798);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2802);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2804);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="PRIORPVALUE"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 30:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:521:4: PROBITOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_scalarFunctions2813);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2817);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2819);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="PROBIT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 31:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:523:4: REPLICATEPOSTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(REPLICATEPOSTOPENBRACKET, &FOLLOW_REPLICATEPOSTOPENBRACKET_in_scalarFunctions2828);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2832);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2834);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="REPLICATEPOST"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 32:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:525:4: REPLICATEPRIOROPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(REPLICATEPRIOROPENBRACKET, &FOLLOW_REPLICATEPRIOROPENBRACKET_in_scalarFunctions2843);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2847);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2849);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="REPLICATEPRIOR"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 33:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:527:4: ROUNDOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(ROUNDOPENBRACKET, &FOLLOW_ROUNDOPENBRACKET_in_scalarFunctions2858);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2862);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2864);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="ROUND"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 34:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:529:4: SINOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(SINOPENBRACKET, &FOLLOW_SINOPENBRACKET_in_scalarFunctions2873);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2877);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2879);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SIN"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 35:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:531:4: SINHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(SINHOPENBRACKET, &FOLLOW_SINHOPENBRACKET_in_scalarFunctions2888);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2892);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2894);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SINH"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 36:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:533:4: SOLUTIONOPENBRACKET ex1= exprWithNodesFunctions COMMA ex2= exprWithNodesFunctions COMMA ex3= exprWithNodesFunctions COMMA ex4= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(SOLUTIONOPENBRACKET, &FOLLOW_SOLUTIONOPENBRACKET_in_scalarFunctions2903);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2907);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2909);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2913);
        	        ex2=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2917);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2921);
        	        ex3=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_scalarFunctions2923);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2927);
        	        ex4=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2929);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SOLUTION"; function
        	            ->parameter1=ex1
        	            ; function
        	            ->parameter2=ex2
        	            ; 
        	            	function
        	            ->parameter3=ex3
        	            ; function
        	            ->parameter4=ex4
        	            ;
        	        }


        	    }
        	    break;
        	case 37:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:537:4: SQRTOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(SQRTOPENBRACKET, &FOLLOW_SQRTOPENBRACKET_in_scalarFunctions2938);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2942);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2944);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SQRT"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 38:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:539:4: STEPOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(STEPOPENBRACKET, &FOLLOW_STEPOPENBRACKET_in_scalarFunctions2953);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2957);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2959);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="STEP"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 39:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:541:4: TANOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(TANOPENBRACKET, &FOLLOW_TANOPENBRACKET_in_scalarFunctions2968);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2972);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2974);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="TAN"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 40:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:543:4: TANHOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(TANHOPENBRACKET, &FOLLOW_TANHOPENBRACKET_in_scalarFunctions2983);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions2987);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions2989);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="TANH"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;
        	case 41:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:545:4: TRUNCOPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
        	    {
        	         this->matchToken(TRUNCOPENBRACKET, &FOLLOW_TRUNCOPENBRACKET_in_scalarFunctions2998);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions3002);
        	        ex1=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions3004);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="TRUNC"; function
        	            ->parameter1=ex1
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulescalarFunctionsEx; /* Prevent compiler warnings */
    rulescalarFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return function;
}
/* $ANTLR end scalarFunctions */

/**
 * $ANTLR start vectorFunctions
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:549:1: vectorFunctions returns [VectorFunction* function = new VectorFunction()] : ( MEANOPENBRACKET mvNode CLOSEBRACKET | INVERSEOPENBRACKET mvNode CLOSEBRACKET | SDOPENBRACKET mvNode CLOSEBRACKET | SUMOPENBRACKET mvNode CLOSEBRACKET | INPRODOPENBRACKET mv1= mvNode COMMA mv2= mvNode CLOSEBRACKET );
 */
VectorFunction*
BUGSParser::vectorFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    VectorFunction* function;


    MultivariateNode* mv1;
    typedef	MultivariateNode* RETURN_TYPE_mv1;

    MultivariateNode* mv2;
    typedef	MultivariateNode* RETURN_TYPE_mv2;

    MultivariateNode* mvNode38;
    typedef	MultivariateNode* RETURN_TYPE_mvNode38;

    MultivariateNode* mvNode39;
    typedef	MultivariateNode* RETURN_TYPE_mvNode39;

    MultivariateNode* mvNode40;
    typedef	MultivariateNode* RETURN_TYPE_mvNode40;

    MultivariateNode* mvNode41;
    typedef	MultivariateNode* RETURN_TYPE_mvNode41;

    /* Initialize rule variables
     */
    function =  new VectorFunction();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:550:2: ( MEANOPENBRACKET mvNode CLOSEBRACKET | INVERSEOPENBRACKET mvNode CLOSEBRACKET | SDOPENBRACKET mvNode CLOSEBRACKET | SUMOPENBRACKET mvNode CLOSEBRACKET | INPRODOPENBRACKET mv1= mvNode COMMA mv2= mvNode CLOSEBRACKET )

            ANTLR_UINT32 alt29;

            alt29=5;

            switch ( this->LA(1) )
            {
            case MEANOPENBRACKET:
            	{
            		alt29=1;
            	}
                break;
            case INVERSEOPENBRACKET:
            	{
            		alt29=2;
            	}
                break;
            case SDOPENBRACKET:
            	{
            		alt29=3;
            	}
                break;
            case SUMOPENBRACKET:
            	{
            		alt29=4;
            	}
                break;
            case INPRODOPENBRACKET:
            	{
            		alt29=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return function;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto rulevectorFunctionsEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:551:4: MEANOPENBRACKET mvNode CLOSEBRACKET
        	    {
        	         this->matchToken(MEANOPENBRACKET, &FOLLOW_MEANOPENBRACKET_in_vectorFunctions3027);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3029);
        	        mvNode38=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions3031);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="MEAN"; function
        	            ->mvnode=mvNode38
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:552:4: INVERSEOPENBRACKET mvNode CLOSEBRACKET
        	    {
        	         this->matchToken(INVERSEOPENBRACKET, &FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions3038);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3040);
        	        mvNode39=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions3042);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="INVERSE"; function
        	            ->mvnode=mvNode39
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:553:4: SDOPENBRACKET mvNode CLOSEBRACKET
        	    {
        	         this->matchToken(SDOPENBRACKET, &FOLLOW_SDOPENBRACKET_in_vectorFunctions3049);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3051);
        	        mvNode40=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions3053);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SD"; function
        	            ->mvnode=mvNode40
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:554:4: SUMOPENBRACKET mvNode CLOSEBRACKET
        	    {
        	         this->matchToken(SUMOPENBRACKET, &FOLLOW_SUMOPENBRACKET_in_vectorFunctions3060);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3062);
        	        mvNode41=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions3064);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="SUM"; function
        	            ->mvnode=mvNode41
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:555:4: INPRODOPENBRACKET mv1= mvNode COMMA mv2= mvNode CLOSEBRACKET
        	    {
        	         this->matchToken(INPRODOPENBRACKET, &FOLLOW_INPRODOPENBRACKET_in_vectorFunctions3071);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3075);
        	        mv1=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_vectorFunctions3077);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        this->followPush(FOLLOW_mvNode_in_vectorFunctions3081);
        	        mv2=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions3083);
        	        if  (this->hasException())
        	        {
        	            goto rulevectorFunctionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return function;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            function
        	            ->name="INPROD"; function
        	            ->mvnode=mv1
        	            ; function
        	            ->mvnode2=mv2
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulevectorFunctionsEx; /* Prevent compiler warnings */
    rulevectorFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return function;
}
/* $ANTLR end vectorFunctions */

/**
 * $ANTLR start uvDistribution
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:558:1: uvDistribution returns [UnivariateDistribution* distribution = new UnivariateDistribution()] : ( discreteUnivariate | continuousUnivariate );
 */
UnivariateDistribution*
BUGSParser::uvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateDistribution* distribution;


    BUGSParser_discreteUnivariate_return discreteUnivariate42;
    typedef	BUGSParser_discreteUnivariate_return RETURN_TYPE_discreteUnivariate42;

    BUGSParser_continuousUnivariate_return continuousUnivariate43;
    typedef	BUGSParser_continuousUnivariate_return RETURN_TYPE_continuousUnivariate43;

    /* Initialize rule variables
     */
    distribution =  new UnivariateDistribution();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:559:2: ( discreteUnivariate | continuousUnivariate )

            ANTLR_UINT32 alt30;

            alt30=2;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            case BINOMIALOPENBRACKET:
            case NCHGOPENBRACKET:
            case NEGATIVEBINOMIALOPENBRACKET:
            case POISSONOPENBRACKET:
            	{
            		alt30=1;
            	}
                break;
            case BETAOPENBRACKET:
            case CHISQUAREDOPENBRACKET:
            case DOUBLEEXPONENTIALOPENBRACKET:
            case EXPONENTIALOPENBRACKET:
            case FLATOPENBRACKET:
            case GAMMAOPENBRACKET:
            case GENFOPENBRACKET:
            case GENGAMMAOPENBRACKET:
            case GENLOGLIKOPENBRACKET:
            case GENPARETOOPENBRACKET:
            case GEVOPENBRACKET:
            case LOGISTICOPENBRACKET:
            case LOGNORMALOPENBRACKET:
            case NORMALOPENBRACKET:
            case PARETOOPENBRACKET:
            case STUDENTTOPENBRACKET:
            case UNIFORMOPENBRACKET:
            case WEIBULLOPENBRACKET:
            	{
            		alt30=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return distribution;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto ruleuvDistributionEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:559:4: discreteUnivariate
        	    {
        	        this->followPush(FOLLOW_discreteUnivariate_in_uvDistribution3101);
        	        discreteUnivariate42=discreteUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return distribution;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            distribution
        	            ->name = discreteUnivariate42.name
        	            ; distribution
        	            ->distributionParameters = discreteUnivariate42.parameters
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:560:4: continuousUnivariate
        	    {
        	        this->followPush(FOLLOW_continuousUnivariate_in_uvDistribution3108);
        	        continuousUnivariate43=continuousUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return distribution;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            distribution
        	            ->name = continuousUnivariate43.name
        	            ; distribution
        	            ->distributionParameters = continuousUnivariate43.parameters
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleuvDistributionEx; /* Prevent compiler warnings */
    ruleuvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return distribution;
}
/* $ANTLR end uvDistribution */

/**
 * $ANTLR start mvDistribution
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:563:1: mvDistribution returns [MultivariateDistribution* distribution = new MultivariateDistribution()] : ( discreteMultivariate | continuousMultivariate );
 */
MultivariateDistribution*
BUGSParser::mvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateDistribution* distribution;


    BUGSParser_discreteMultivariate_return discreteMultivariate44;
    typedef	BUGSParser_discreteMultivariate_return RETURN_TYPE_discreteMultivariate44;

    BUGSParser_continuousMultivariate_return continuousMultivariate45;
    typedef	BUGSParser_continuousMultivariate_return RETURN_TYPE_continuousMultivariate45;

    /* Initialize rule variables
     */
    distribution =  new MultivariateDistribution();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:564:2: ( discreteMultivariate | continuousMultivariate )

            ANTLR_UINT32 alt31;

            alt31=2;

            switch ( this->LA(1) )
            {
            case MUTLTINOMIALOPENBRACKET:
            	{
            		alt31=1;
            	}
                break;
            case DIRICHLET2OPENBRACKET:
            case DIRICHLETOPENBRACKET:
            case MVNORMALOPENBRACKET:
            case MVSTUDENTTOPENBRACKET:
            case WISHARTOPENBRACKET:
            	{
            		alt31=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return distribution;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 31 );
                ex->set_state( 0 );


                goto rulemvDistributionEx;

            }

            switch (alt31)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:564:4: discreteMultivariate
        	    {
        	        this->followPush(FOLLOW_discreteMultivariate_in_mvDistribution3125);
        	        discreteMultivariate44=discreteMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return distribution;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            distribution
        	            ->name = discreteMultivariate44.name
        	            ; distribution
        	            ->distributionParameters = discreteMultivariate44.parameters
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:565:4: continuousMultivariate
        	    {
        	        this->followPush(FOLLOW_continuousMultivariate_in_mvDistribution3132);
        	        continuousMultivariate45=continuousMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return distribution;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            distribution
        	            ->name = continuousMultivariate45.name
        	            ; distribution
        	            ->distributionParameters = continuousMultivariate45.parameters
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvDistributionEx; /* Prevent compiler warnings */
    rulemvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return distribution;
}
/* $ANTLR end mvDistribution */

/**
 * $ANTLR start discreteUnivariate
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:568:1: discreteUnivariate returns [string name, vector<Expression* > parameters] : ( bernoulli | binomial | negativebinomial | poisson | nchg );
 */
BUGSParser_discreteUnivariate_return
BUGSParser::discreteUnivariate()
{
    BUGSParser_discreteUnivariate_return retval(this);


    vector<Expression* > bernoulli46;
    typedef	vector<Expression* > RETURN_TYPE_bernoulli46;

    vector<Expression* > binomial47;
    typedef	vector<Expression* > RETURN_TYPE_binomial47;

    vector<Expression* > negativebinomial48;
    typedef	vector<Expression* > RETURN_TYPE_negativebinomial48;

    vector<Expression* > poisson49;
    typedef	vector<Expression* > RETURN_TYPE_poisson49;

    vector<Expression* > nchg50;
    typedef	vector<Expression* > RETURN_TYPE_nchg50;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:569:2: ( bernoulli | binomial | negativebinomial | poisson | nchg )

            ANTLR_UINT32 alt32;

            alt32=5;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            	{
            		alt32=1;
            	}
                break;
            case BINOMIALOPENBRACKET:
            	{
            		alt32=2;
            	}
                break;
            case NEGATIVEBINOMIALOPENBRACKET:
            	{
            		alt32=3;
            	}
                break;
            case POISSONOPENBRACKET:
            	{
            		alt32=4;
            	}
                break;
            case NCHGOPENBRACKET:
            	{
            		alt32=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto rulediscreteUnivariateEx;

            }

            switch (alt32)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:569:4: bernoulli
        	    {
        	        this->followPush(FOLLOW_bernoulli_in_discreteUnivariate3149);
        	        bernoulli46=bernoulli();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulediscreteUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="BERNOULLI";
        	             retval.parameters=
        	            bernoulli46
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:570:4: binomial
        	    {
        	        this->followPush(FOLLOW_binomial_in_discreteUnivariate3156);
        	        binomial47=binomial();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulediscreteUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="BINOMIAL";
        	             retval.parameters=
        	            binomial47
        	            ;

        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:571:4: negativebinomial
        	    {
        	        this->followPush(FOLLOW_negativebinomial_in_discreteUnivariate3163);
        	        negativebinomial48=negativebinomial();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulediscreteUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="NEGATIVEBINOMIAL";
        	             retval.parameters=
        	            negativebinomial48
        	            ;

        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:572:4: poisson
        	    {
        	        this->followPush(FOLLOW_poisson_in_discreteUnivariate3170);
        	        poisson49=poisson();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulediscreteUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="POISSON";
        	             retval.parameters=
        	            poisson49
        	            ;

        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:573:4: nchg
        	    {
        	        this->followPush(FOLLOW_nchg_in_discreteUnivariate3177);
        	        nchg50=nchg();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulediscreteUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="NCHG";
        	             retval.parameters=
        	            nchg50
        	            ;

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulediscreteUnivariateEx; /* Prevent compiler warnings */
    rulediscreteUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteUnivariate */

/**
 * $ANTLR start continuousUnivariate
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:576:1: continuousUnivariate returns [std::string name, vector<Expression* > parameters] : ( beta | chisquared | ddexp | exp | flat | gamma | gev | genf | gengamma | genpareto | genloglik | lognormal | logistic | normal | pareto | studentt | uniform | weibull );
 */
BUGSParser_continuousUnivariate_return
BUGSParser::continuousUnivariate()
{
    BUGSParser_continuousUnivariate_return retval(this);


    vector<Expression* > beta51;
    typedef	vector<Expression* > RETURN_TYPE_beta51;

    vector<Expression* > chisquared52;
    typedef	vector<Expression* > RETURN_TYPE_chisquared52;

    vector<Expression* > ddexp53;
    typedef	vector<Expression* > RETURN_TYPE_ddexp53;

    vector<Expression* > exp54;
    typedef	vector<Expression* > RETURN_TYPE_exp54;

    vector<Expression* > flat55;
    typedef	vector<Expression* > RETURN_TYPE_flat55;

    vector<Expression* > gamma56;
    typedef	vector<Expression* > RETURN_TYPE_gamma56;

    vector<Expression* > gev57;
    typedef	vector<Expression* > RETURN_TYPE_gev57;

    vector<Expression* > genf58;
    typedef	vector<Expression* > RETURN_TYPE_genf58;

    vector<Expression* > gengamma59;
    typedef	vector<Expression* > RETURN_TYPE_gengamma59;

    vector<Expression* > genpareto60;
    typedef	vector<Expression* > RETURN_TYPE_genpareto60;

    vector<Expression* > genloglik61;
    typedef	vector<Expression* > RETURN_TYPE_genloglik61;

    vector<Expression* > lognormal62;
    typedef	vector<Expression* > RETURN_TYPE_lognormal62;

    vector<Expression* > logistic63;
    typedef	vector<Expression* > RETURN_TYPE_logistic63;

    vector<Expression* > normal64;
    typedef	vector<Expression* > RETURN_TYPE_normal64;

    vector<Expression* > pareto65;
    typedef	vector<Expression* > RETURN_TYPE_pareto65;

    vector<Expression* > studentt66;
    typedef	vector<Expression* > RETURN_TYPE_studentt66;

    vector<Expression* > uniform67;
    typedef	vector<Expression* > RETURN_TYPE_uniform67;

    vector<Expression* > weibull68;
    typedef	vector<Expression* > RETURN_TYPE_weibull68;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:577:2: ( beta | chisquared | ddexp | exp | flat | gamma | gev | genf | gengamma | genpareto | genloglik | lognormal | logistic | normal | pareto | studentt | uniform | weibull )

            ANTLR_UINT32 alt33;

            alt33=18;

            switch ( this->LA(1) )
            {
            case BETAOPENBRACKET:
            	{
            		alt33=1;
            	}
                break;
            case CHISQUAREDOPENBRACKET:
            	{
            		alt33=2;
            	}
                break;
            case DOUBLEEXPONENTIALOPENBRACKET:
            	{
            		alt33=3;
            	}
                break;
            case EXPONENTIALOPENBRACKET:
            	{
            		alt33=4;
            	}
                break;
            case FLATOPENBRACKET:
            	{
            		alt33=5;
            	}
                break;
            case GAMMAOPENBRACKET:
            	{
            		alt33=6;
            	}
                break;
            case GEVOPENBRACKET:
            	{
            		alt33=7;
            	}
                break;
            case GENFOPENBRACKET:
            	{
            		alt33=8;
            	}
                break;
            case GENGAMMAOPENBRACKET:
            	{
            		alt33=9;
            	}
                break;
            case GENPARETOOPENBRACKET:
            	{
            		alt33=10;
            	}
                break;
            case GENLOGLIKOPENBRACKET:
            	{
            		alt33=11;
            	}
                break;
            case LOGNORMALOPENBRACKET:
            	{
            		alt33=12;
            	}
                break;
            case LOGISTICOPENBRACKET:
            	{
            		alt33=13;
            	}
                break;
            case NORMALOPENBRACKET:
            	{
            		alt33=14;
            	}
                break;
            case PARETOOPENBRACKET:
            	{
            		alt33=15;
            	}
                break;
            case STUDENTTOPENBRACKET:
            	{
            		alt33=16;
            	}
                break;
            case UNIFORMOPENBRACKET:
            	{
            		alt33=17;
            	}
                break;
            case WEIBULLOPENBRACKET:
            	{
            		alt33=18;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 33 );
                ex->set_state( 0 );


                goto rulecontinuousUnivariateEx;

            }

            switch (alt33)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:577:4: beta
        	    {
        	        this->followPush(FOLLOW_beta_in_continuousUnivariate3194);
        	        beta51=beta();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="BETA";
        	             retval.parameters=
        	            beta51
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:578:4: chisquared
        	    {
        	        this->followPush(FOLLOW_chisquared_in_continuousUnivariate3201);
        	        chisquared52=chisquared();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="CHISQUARED";
        	             retval.parameters=
        	            chisquared52
        	            ;

        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:579:4: ddexp
        	    {
        	        this->followPush(FOLLOW_ddexp_in_continuousUnivariate3208);
        	        ddexp53=ddexp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="DDEXP";
        	             retval.parameters=
        	            ddexp53
        	            ;

        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:580:4: exp
        	    {
        	        this->followPush(FOLLOW_exp_in_continuousUnivariate3215);
        	        exp54=exp();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="EXP";
        	             retval.parameters=
        	            exp54
        	            ;

        	        }


        	    }
        	    break;
        	case 5:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:581:4: flat
        	    {
        	        this->followPush(FOLLOW_flat_in_continuousUnivariate3222);
        	        flat55=flat();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="FLAT";
        	             retval.parameters=
        	            flat55
        	            ;

        	        }


        	    }
        	    break;
        	case 6:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:582:4: gamma
        	    {
        	        this->followPush(FOLLOW_gamma_in_continuousUnivariate3229);
        	        gamma56=gamma();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GAMMA";
        	             retval.parameters=
        	            gamma56
        	            ;

        	        }


        	    }
        	    break;
        	case 7:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:583:4: gev
        	    {
        	        this->followPush(FOLLOW_gev_in_continuousUnivariate3236);
        	        gev57=gev();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GEV";
        	             retval.parameters=
        	            gev57
        	            ;

        	        }


        	    }
        	    break;
        	case 8:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:584:4: genf
        	    {
        	        this->followPush(FOLLOW_genf_in_continuousUnivariate3243);
        	        genf58=genf();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GENF";
        	             retval.parameters=
        	            genf58
        	            ;

        	        }


        	    }
        	    break;
        	case 9:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:585:4: gengamma
        	    {
        	        this->followPush(FOLLOW_gengamma_in_continuousUnivariate3250);
        	        gengamma59=gengamma();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GENGAMMA";
        	             retval.parameters=
        	            gengamma59
        	            ;

        	        }


        	    }
        	    break;
        	case 10:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:586:4: genpareto
        	    {
        	        this->followPush(FOLLOW_genpareto_in_continuousUnivariate3257);
        	        genpareto60=genpareto();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GENPARETO";
        	             retval.parameters=
        	            genpareto60
        	            ;

        	        }


        	    }
        	    break;
        	case 11:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:587:4: genloglik
        	    {
        	        this->followPush(FOLLOW_genloglik_in_continuousUnivariate3264);
        	        genloglik61=genloglik();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="GENLOGLIK";
        	             retval.parameters=
        	            genloglik61
        	            ;

        	        }


        	    }
        	    break;
        	case 12:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:588:4: lognormal
        	    {
        	        this->followPush(FOLLOW_lognormal_in_continuousUnivariate3271);
        	        lognormal62=lognormal();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="LOGNORMAL";
        	             retval.parameters=
        	            lognormal62
        	            ;

        	        }


        	    }
        	    break;
        	case 13:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:589:4: logistic
        	    {
        	        this->followPush(FOLLOW_logistic_in_continuousUnivariate3278);
        	        logistic63=logistic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="LOGISTIC";
        	             retval.parameters=
        	            logistic63
        	            ;

        	        }


        	    }
        	    break;
        	case 14:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:590:4: normal
        	    {
        	        this->followPush(FOLLOW_normal_in_continuousUnivariate3285);
        	        normal64=normal();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="NORMAL";
        	             retval.parameters=
        	            normal64
        	            ;

        	        }


        	    }
        	    break;
        	case 15:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:591:4: pareto
        	    {
        	        this->followPush(FOLLOW_pareto_in_continuousUnivariate3292);
        	        pareto65=pareto();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="PARETO";
        	             retval.parameters=
        	            pareto65
        	            ;

        	        }


        	    }
        	    break;
        	case 16:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:592:4: studentt
        	    {
        	        this->followPush(FOLLOW_studentt_in_continuousUnivariate3299);
        	        studentt66=studentt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="STUDENTT";
        	             retval.parameters=
        	            studentt66
        	            ;

        	        }


        	    }
        	    break;
        	case 17:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:593:4: uniform
        	    {
        	        this->followPush(FOLLOW_uniform_in_continuousUnivariate3306);
        	        uniform67=uniform();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="UNIFORM";
        	             retval.parameters=
        	            uniform67
        	            ;

        	        }


        	    }
        	    break;
        	case 18:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:594:4: weibull
        	    {
        	        this->followPush(FOLLOW_weibull_in_continuousUnivariate3313);
        	        weibull68=weibull();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousUnivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="WEIBULL";
        	             retval.parameters=
        	            weibull68
        	            ;

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousUnivariateEx; /* Prevent compiler warnings */
    rulecontinuousUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousUnivariate */

/**
 * $ANTLR start discreteMultivariate
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:597:1: discreteMultivariate returns [string name, vector<MVDParameters* > parameters] : multinomial ;
 */
BUGSParser_discreteMultivariate_return
BUGSParser::discreteMultivariate()
{
    BUGSParser_discreteMultivariate_return retval(this);


    vector<MVDParameters* > multinomial69;
    typedef	vector<MVDParameters* > RETURN_TYPE_multinomial69;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:598:2: ( multinomial )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:598:4: multinomial
        {
            this->followPush(FOLLOW_multinomial_in_discreteMultivariate3330);
            multinomial69=multinomial();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteMultivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="MULTINOMIAL";
                 retval.parameters=
                multinomial69
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteMultivariateEx; /* Prevent compiler warnings */
    rulediscreteMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteMultivariate */

/**
 * $ANTLR start continuousMultivariate
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:601:1: continuousMultivariate returns [string name, vector<MVDParameters* > parameters] : ( dirichlet | mvnormal | mvstudentt | wishart );
 */
BUGSParser_continuousMultivariate_return
BUGSParser::continuousMultivariate()
{
    BUGSParser_continuousMultivariate_return retval(this);


    vector<MVDParameters* > dirichlet70;
    typedef	vector<MVDParameters* > RETURN_TYPE_dirichlet70;

    vector<MVDParameters* > mvnormal71;
    typedef	vector<MVDParameters* > RETURN_TYPE_mvnormal71;

    vector<MVDParameters* > mvstudentt72;
    typedef	vector<MVDParameters* > RETURN_TYPE_mvstudentt72;

    vector<MVDParameters* > wishart73;
    typedef	vector<MVDParameters* > RETURN_TYPE_wishart73;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:602:2: ( dirichlet | mvnormal | mvstudentt | wishart )

            ANTLR_UINT32 alt34;

            alt34=4;

            switch ( this->LA(1) )
            {
            case DIRICHLET2OPENBRACKET:
            case DIRICHLETOPENBRACKET:
            	{
            		alt34=1;
            	}
                break;
            case MVNORMALOPENBRACKET:
            	{
            		alt34=2;
            	}
                break;
            case MVSTUDENTTOPENBRACKET:
            	{
            		alt34=3;
            	}
                break;
            case WISHARTOPENBRACKET:
            	{
            		alt34=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 34 );
                ex->set_state( 0 );


                goto rulecontinuousMultivariateEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:602:4: dirichlet
        	    {
        	        this->followPush(FOLLOW_dirichlet_in_continuousMultivariate3347);
        	        dirichlet70=dirichlet();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousMultivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="DIRICHLET";
        	             retval.parameters=
        	            dirichlet70
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:603:4: mvnormal
        	    {
        	        this->followPush(FOLLOW_mvnormal_in_continuousMultivariate3354);
        	        mvnormal71=mvnormal();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousMultivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="MVNORMAL";
        	             retval.parameters=
        	            mvnormal71
        	            ;

        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:604:4: mvstudentt
        	    {
        	        this->followPush(FOLLOW_mvstudentt_in_continuousMultivariate3361);
        	        mvstudentt72=mvstudentt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousMultivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="MVSTUDENTT";
        	             retval.parameters=
        	            mvstudentt72
        	            ;

        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:605:4: wishart
        	    {
        	        this->followPush(FOLLOW_wishart_in_continuousMultivariate3368);
        	        wishart73=wishart();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecontinuousMultivariateEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.name="WISHART";
        	             retval.parameters=
        	            wishart73
        	            ;

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousMultivariateEx; /* Prevent compiler warnings */
    rulecontinuousMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousMultivariate */

/**
 * $ANTLR start distributionParameter
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:608:1: distributionParameter returns [Expression* exp = new Expression()] : ( uvNode | unaryExpression );
 */
Expression*
BUGSParser::distributionParameter()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    UnivariateNode* uvNode74;
    typedef	UnivariateNode* RETURN_TYPE_uvNode74;

    double unaryExpression75;
    typedef	double RETURN_TYPE_unaryExpression75;

    /* Initialize rule variables
     */
    exp =  new Expression();



 
    {
        {
            //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:609:2: ( uvNode | unaryExpression )

            ANTLR_UINT32 alt35;

            alt35=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt35=1;
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case MINUS:
            	{
            		alt35=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return exp;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 35 );
                ex->set_state( 0 );


                goto ruledistributionParameterEx;

            }

            switch (alt35)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:609:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_distributionParameter3386);
        	        uvNode74=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->uvnode=uvNode74
        	            ; exp
        	            ->type=NODE;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:610:4: unaryExpression
        	    {
        	        this->followPush(FOLLOW_unaryExpression_in_distributionParameter3393);
        	        unaryExpression75=unaryExpression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return exp;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            exp
        	            ->expvalue=unaryExpression75
        	            ; exp
        	            ->type=CONSTANT;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledistributionParameterEx; /* Prevent compiler warnings */
    ruledistributionParameterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end distributionParameter */

/**
 * $ANTLR start bernoulli
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:613:1: bernoulli returns [vector<Expression* > parameters] : BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::bernoulli()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* distributionParameter76;
    typedef	Expression* RETURN_TYPE_distributionParameter76;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:614:2: ( BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:614:4: BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(BERNOULLIOPENBRACKET, &FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli3411);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_bernoulli3413);
            distributionParameter76=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_bernoulli3415);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(distributionParameter76
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebernoulliEx; /* Prevent compiler warnings */
    rulebernoulliEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end bernoulli */

/**
 * $ANTLR start binomial
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:617:1: binomial returns [vector<Expression* > parameters] : BINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::binomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:618:2: ( BINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:618:4: BINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(BINOMIALOPENBRACKET, &FOLLOW_BINOMIALOPENBRACKET_in_binomial3432);
            if  (this->hasException())
            {
                goto rulebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_binomial3436);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_binomial3438);
            if  (this->hasException())
            {
                goto rulebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_binomial3442);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_binomial3444);
            if  (this->hasException())
            {
                goto rulebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebinomialEx; /* Prevent compiler warnings */
    rulebinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end binomial */

/**
 * $ANTLR start negativebinomial
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:621:1: negativebinomial returns [vector<Expression* > parameters] : NEGATIVEBINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::negativebinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:622:2: ( NEGATIVEBINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:622:4: NEGATIVEBINOMIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(NEGATIVEBINOMIALOPENBRACKET, &FOLLOW_NEGATIVEBINOMIALOPENBRACKET_in_negativebinomial3462);
            if  (this->hasException())
            {
                goto rulenegativebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_negativebinomial3466);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenegativebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_negativebinomial3468);
            if  (this->hasException())
            {
                goto rulenegativebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_negativebinomial3472);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenegativebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_negativebinomial3474);
            if  (this->hasException())
            {
                goto rulenegativebinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenegativebinomialEx; /* Prevent compiler warnings */
    rulenegativebinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end negativebinomial */

/**
 * $ANTLR start poisson
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:626:1: poisson returns [vector<Expression* > parameters] : POISSONOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::poisson()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* distributionParameter77;
    typedef	Expression* RETURN_TYPE_distributionParameter77;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:627:2: ( POISSONOPENBRACKET distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:627:4: POISSONOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(POISSONOPENBRACKET, &FOLLOW_POISSONOPENBRACKET_in_poisson3493);
            if  (this->hasException())
            {
                goto rulepoissonEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_poisson3495);
            distributionParameter77=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepoissonEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_poisson3497);
            if  (this->hasException())
            {
                goto rulepoissonEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(distributionParameter77
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepoissonEx; /* Prevent compiler warnings */
    rulepoissonEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end poisson */

/**
 * $ANTLR start nchg
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:630:1: nchg returns [vector<Expression* > parameters] : NCHGOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::nchg()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    Expression* dp4;
    typedef	Expression* RETURN_TYPE_dp4;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:631:2: ( NCHGOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:631:4: NCHGOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET
        {
             this->matchToken(NCHGOPENBRACKET, &FOLLOW_NCHGOPENBRACKET_in_nchg3514);
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_nchg3518);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_nchg3523);
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_nchg3527);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_nchg3531);
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_nchg3535);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_nchg3539);
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_nchg3543);
            dp4=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_nchg3547);
            if  (this->hasException())
            {
                goto rulenchgEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
                	parameters
                .push_back(dp3
                );parameters
                .push_back(dp4
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenchgEx; /* Prevent compiler warnings */
    rulenchgEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end nchg */

/**
 * $ANTLR start beta
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:640:1: beta returns [vector<Expression* > parameters] : BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::beta()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:641:2: ( BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:641:4: BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(BETAOPENBRACKET, &FOLLOW_BETAOPENBRACKET_in_beta3567);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta3571);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_beta3574);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta3578);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_beta3580);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebetaEx; /* Prevent compiler warnings */
    rulebetaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end beta */

/**
 * $ANTLR start chisquared
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:644:1: chisquared returns [vector<Expression* > parameters] : CHISQUAREDOPENBRACKET dp1= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::chisquared()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:645:2: ( CHISQUAREDOPENBRACKET dp1= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:645:4: CHISQUAREDOPENBRACKET dp1= distributionParameter CLOSEBRACKET
        {
             this->matchToken(CHISQUAREDOPENBRACKET, &FOLLOW_CHISQUAREDOPENBRACKET_in_chisquared3597);
            if  (this->hasException())
            {
                goto rulechisquaredEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_chisquared3601);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulechisquaredEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_chisquared3603);
            if  (this->hasException())
            {
                goto rulechisquaredEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulechisquaredEx; /* Prevent compiler warnings */
    rulechisquaredEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end chisquared */

/**
 * $ANTLR start ddexp
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:649:1: ddexp returns [vector<Expression* > parameters] : DOUBLEEXPONENTIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::ddexp()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:650:2: ( DOUBLEEXPONENTIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:650:4: DOUBLEEXPONENTIALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(DOUBLEEXPONENTIALOPENBRACKET, &FOLLOW_DOUBLEEXPONENTIALOPENBRACKET_in_ddexp3622);
            if  (this->hasException())
            {
                goto ruleddexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_ddexp3626);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleddexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_ddexp3629);
            if  (this->hasException())
            {
                goto ruleddexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_ddexp3633);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleddexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_ddexp3635);
            if  (this->hasException())
            {
                goto ruleddexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleddexpEx; /* Prevent compiler warnings */
    ruleddexpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end ddexp */

/**
 * $ANTLR start exp
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:654:1: exp returns [vector<Expression* > parameters] : EXPONENTIALOPENBRACKET dp1= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::exp()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:655:2: ( EXPONENTIALOPENBRACKET dp1= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:655:4: EXPONENTIALOPENBRACKET dp1= distributionParameter CLOSEBRACKET
        {
             this->matchToken(EXPONENTIALOPENBRACKET, &FOLLOW_EXPONENTIALOPENBRACKET_in_exp3654);
            if  (this->hasException())
            {
                goto ruleexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_exp3658);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exp3661);
            if  (this->hasException())
            {
                goto ruleexpEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpEx; /* Prevent compiler warnings */
    ruleexpEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end exp */

/**
 * $ANTLR start flat
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:659:1: flat returns [vector<Expression* > parameters] : FLATOPENBRACKET CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::flat()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:660:2: ( FLATOPENBRACKET CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:660:3: FLATOPENBRACKET CLOSEBRACKET
        {
             this->matchToken(FLATOPENBRACKET, &FOLLOW_FLATOPENBRACKET_in_flat3679);
            if  (this->hasException())
            {
                goto ruleflatEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_flat3682);
            if  (this->hasException())
            {
                goto ruleflatEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleflatEx; /* Prevent compiler warnings */
    ruleflatEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end flat */

/**
 * $ANTLR start gamma
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:663:1: gamma returns [vector<Expression* > parameters] : GAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::gamma()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:664:2: ( GAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:664:4: GAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GAMMAOPENBRACKET, &FOLLOW_GAMMAOPENBRACKET_in_gamma3700);
            if  (this->hasException())
            {
                goto rulegammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gamma3704);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_gamma3707);
            if  (this->hasException())
            {
                goto rulegammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gamma3711);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_gamma3713);
            if  (this->hasException())
            {
                goto rulegammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegammaEx; /* Prevent compiler warnings */
    rulegammaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end gamma */

/**
 * $ANTLR start gev
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:668:1: gev returns [vector<Expression* > parameters] : GEVOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::gev()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:669:2: ( GEVOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:669:4: GEVOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GEVOPENBRACKET, &FOLLOW_GEVOPENBRACKET_in_gev3732);
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gev3736);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_gev3739);
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gev3743);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_gev3745);
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gev3751);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_gev3754);
            if  (this->hasException())
            {
                goto rulegevEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );  parameters
                .push_back(dp3
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegevEx; /* Prevent compiler warnings */
    rulegevEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end gev */

/**
 * $ANTLR start genf
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:674:1: genf returns [vector<Expression* > parameters] : GENFOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::genf()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    Expression* dp4;
    typedef	Expression* RETURN_TYPE_dp4;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:675:2: ( GENFOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:675:4: GENFOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter COMMA dp4= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GENFOPENBRACKET, &FOLLOW_GENFOPENBRACKET_in_genf3773);
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genf3777);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_genf3780);
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genf3784);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_genf3786);
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genf3792);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_genf3795);
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genf3799);
            dp4=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_genf3801);
            if  (this->hasException())
            {
                goto rulegenfEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );  parameters
                .push_back(dp3
                ); parameters
                .push_back(dp4
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegenfEx; /* Prevent compiler warnings */
    rulegenfEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end genf */

/**
 * $ANTLR start gengamma
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:680:1: gengamma returns [vector<Expression* > parameters] : GENGAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::gengamma()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:681:2: ( GENGAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:681:4: GENGAMMAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GENGAMMAOPENBRACKET, &FOLLOW_GENGAMMAOPENBRACKET_in_gengamma3820);
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gengamma3824);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_gengamma3827);
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gengamma3831);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_gengamma3833);
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_gengamma3839);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_gengamma3842);
            if  (this->hasException())
            {
                goto rulegengammaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );  parameters
                .push_back(dp3
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegengammaEx; /* Prevent compiler warnings */
    rulegengammaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end gengamma */

/**
 * $ANTLR start genpareto
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:686:1: genpareto returns [vector<Expression* > parameters] : GENPARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::genpareto()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:687:2: ( GENPARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:687:4: GENPARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GENPARETOOPENBRACKET, &FOLLOW_GENPARETOOPENBRACKET_in_genpareto3861);
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genpareto3865);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_genpareto3868);
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genpareto3872);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_genpareto3874);
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genpareto3880);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_genpareto3883);
            if  (this->hasException())
            {
                goto rulegenparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );  parameters
                .push_back(dp3
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegenparetoEx; /* Prevent compiler warnings */
    rulegenparetoEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end genpareto */

/**
 * $ANTLR start genloglik
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:692:1: genloglik returns [vector<Expression* > parameters] : GENLOGLIKOPENBRACKET dp1= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::genloglik()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:693:2: ( GENLOGLIKOPENBRACKET dp1= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:693:4: GENLOGLIKOPENBRACKET dp1= distributionParameter CLOSEBRACKET
        {
             this->matchToken(GENLOGLIKOPENBRACKET, &FOLLOW_GENLOGLIKOPENBRACKET_in_genloglik3903);
            if  (this->hasException())
            {
                goto rulegenloglikEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_genloglik3907);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegenloglikEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_genloglik3910);
            if  (this->hasException())
            {
                goto rulegenloglikEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulegenloglikEx; /* Prevent compiler warnings */
    rulegenloglikEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end genloglik */

/**
 * $ANTLR start lognormal
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:697:1: lognormal returns [vector<Expression* > parameters] : LOGNORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::lognormal()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:698:2: ( LOGNORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:698:4: LOGNORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(LOGNORMALOPENBRACKET, &FOLLOW_LOGNORMALOPENBRACKET_in_lognormal3929);
            if  (this->hasException())
            {
                goto rulelognormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_lognormal3933);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelognormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_lognormal3936);
            if  (this->hasException())
            {
                goto rulelognormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_lognormal3940);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelognormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_lognormal3943);
            if  (this->hasException())
            {
                goto rulelognormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelognormalEx; /* Prevent compiler warnings */
    rulelognormalEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end lognormal */

/**
 * $ANTLR start logistic
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:702:1: logistic returns [vector<Expression* > parameters] : LOGISTICOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::logistic()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:703:2: ( LOGISTICOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:703:4: LOGISTICOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(LOGISTICOPENBRACKET, &FOLLOW_LOGISTICOPENBRACKET_in_logistic3962);
            if  (this->hasException())
            {
                goto rulelogisticEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_logistic3966);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogisticEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_logistic3969);
            if  (this->hasException())
            {
                goto rulelogisticEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_logistic3973);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogisticEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_logistic3976);
            if  (this->hasException())
            {
                goto rulelogisticEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelogisticEx; /* Prevent compiler warnings */
    rulelogisticEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end logistic */

/**
 * $ANTLR start normal
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:707:1: normal returns [vector<Expression* > parameters] : NORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::normal()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:708:2: ( NORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:708:4: NORMALOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(NORMALOPENBRACKET, &FOLLOW_NORMALOPENBRACKET_in_normal3996);
            if  (this->hasException())
            {
                goto rulenormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_normal4000);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_normal4003);
            if  (this->hasException())
            {
                goto rulenormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_normal4007);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulenormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_normal4010);
            if  (this->hasException())
            {
                goto rulenormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulenormalEx; /* Prevent compiler warnings */
    rulenormalEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end normal */

/**
 * $ANTLR start pareto
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:712:1: pareto returns [vector<Expression* > parameters] : PARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::pareto()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:713:2: ( PARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:713:4: PARETOOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(PARETOOPENBRACKET, &FOLLOW_PARETOOPENBRACKET_in_pareto4029);
            if  (this->hasException())
            {
                goto ruleparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_pareto4033);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_pareto4036);
            if  (this->hasException())
            {
                goto ruleparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_pareto4040);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_pareto4043);
            if  (this->hasException())
            {
                goto ruleparetoEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparetoEx; /* Prevent compiler warnings */
    ruleparetoEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end pareto */

/**
 * $ANTLR start studentt
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:717:1: studentt returns [vector<Expression* > parameters] : STUDENTTOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::studentt()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:718:2: ( STUDENTTOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:718:4: STUDENTTOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter COMMA dp3= distributionParameter CLOSEBRACKET
        {
             this->matchToken(STUDENTTOPENBRACKET, &FOLLOW_STUDENTTOPENBRACKET_in_studentt4062);
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_studentt4066);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_studentt4069);
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_studentt4073);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_studentt4075);
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_studentt4081);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_studentt4084);
            if  (this->hasException())
            {
                goto rulestudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                );  parameters
                .push_back(dp3
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestudenttEx; /* Prevent compiler warnings */
    rulestudenttEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end studentt */

/**
 * $ANTLR start uniform
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:723:1: uniform returns [vector<Expression* > parameters] : UNIFORMOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::uniform()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:724:2: ( UNIFORMOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:724:4: UNIFORMOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(UNIFORMOPENBRACKET, &FOLLOW_UNIFORMOPENBRACKET_in_uniform4103);
            if  (this->hasException())
            {
                goto ruleuniformEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_uniform4107);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuniformEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_uniform4110);
            if  (this->hasException())
            {
                goto ruleuniformEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_uniform4114);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuniformEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_uniform4117);
            if  (this->hasException())
            {
                goto ruleuniformEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuniformEx; /* Prevent compiler warnings */
    ruleuniformEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end uniform */

/**
 * $ANTLR start weibull
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:728:1: weibull returns [vector<Expression* > parameters] : WEIBULLOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<Expression* >
BUGSParser::weibull()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Expression* > parameters;


    Expression* dp1;
    typedef	Expression* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:729:2: ( WEIBULLOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:729:4: WEIBULLOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(WEIBULLOPENBRACKET, &FOLLOW_WEIBULLOPENBRACKET_in_weibull4136);
            if  (this->hasException())
            {
                goto ruleweibullEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_weibull4140);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleweibullEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_weibull4143);
            if  (this->hasException())
            {
                goto ruleweibullEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_weibull4147);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleweibullEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_weibull4150);
            if  (this->hasException())
            {
                goto ruleweibullEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back(dp1
                ); parameters
                .push_back(dp2
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleweibullEx; /* Prevent compiler warnings */
    ruleweibullEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end weibull */

/**
 * $ANTLR start multinomial
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:733:1: multinomial returns [vector<MVDParameters* > parameters] : MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<MVDParameters* >
BUGSParser::multinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MVDParameters* > parameters;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:734:2: ( MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:734:4: MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(MUTLTINOMIALOPENBRACKET, &FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial4170);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_multinomial4174);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_multinomial4176);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial4182);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multinomial4184);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                MVDParameters* param1 = new MVDParameters(); param1->type=MVDNODE; param1->mvnode = dp1
                ; parameters
                .push_back(param1);
                	MVDParameters* param2  = new MVDParameters(); param2->type=MVDEXPRESSION; param2->exp = dp2
                ; parameters
                .push_back(param2);
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultinomialEx; /* Prevent compiler warnings */
    rulemultinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end multinomial */

/**
 * $ANTLR start dirichlet
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:740:1: dirichlet returns [vector<MVDParameters* > parameters] : ( DIRICHLETOPENBRACKET | DIRICHLET2OPENBRACKET ) dp1= mvNode CLOSEBRACKET ;
 */
vector<MVDParameters* >
BUGSParser::dirichlet()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MVDParameters* > parameters;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:741:2: ( ( DIRICHLETOPENBRACKET | DIRICHLET2OPENBRACKET ) dp1= mvNode CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:741:4: ( DIRICHLETOPENBRACKET | DIRICHLET2OPENBRACKET ) dp1= mvNode CLOSEBRACKET
        {
            if ( ((this->LA(1) >= DIRICHLET2OPENBRACKET) && (this->LA(1) <= DIRICHLETOPENBRACKET)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return parameters;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruledirichletEx;
            }


            this->followPush(FOLLOW_mvNode_in_dirichlet4211);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_dirichlet4213);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                MVDParameters* param1 = new MVDParameters(); param1->type=MVDNODE; param1->mvnode = dp1
                ; parameters
                .push_back(param1);
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledirichletEx; /* Prevent compiler warnings */
    ruledirichletEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end dirichlet */

/**
 * $ANTLR start mvnormal
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:745:1: mvnormal returns [vector<MVDParameters* > parameters] : MVNORMALOPENBRACKET dp1= mvNode COMMA dp2= mvNode CLOSEBRACKET ;
 */
vector<MVDParameters* >
BUGSParser::mvnormal()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MVDParameters* > parameters;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    MultivariateNode* dp2;
    typedef	MultivariateNode* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:746:2: ( MVNORMALOPENBRACKET dp1= mvNode COMMA dp2= mvNode CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:746:4: MVNORMALOPENBRACKET dp1= mvNode COMMA dp2= mvNode CLOSEBRACKET
        {
             this->matchToken(MVNORMALOPENBRACKET, &FOLLOW_MVNORMALOPENBRACKET_in_mvnormal4232);
            if  (this->hasException())
            {
                goto rulemvnormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_mvnormal4236);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvnormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_mvnormal4238);
            if  (this->hasException())
            {
                goto rulemvnormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_mvnormal4242);
            dp2=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvnormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_mvnormal4244);
            if  (this->hasException())
            {
                goto rulemvnormalEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                MVDParameters* param1 = new MVDParameters(); param1->type=MVDNODE; param1->mvnode = dp1
                ; parameters
                .push_back(param1);
                	MVDParameters* param2 = new MVDParameters(); param2->type=MVDNODE; param2->mvnode = dp2
                ; parameters
                .push_back(param2);
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvnormalEx; /* Prevent compiler warnings */
    rulemvnormalEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end mvnormal */

/**
 * $ANTLR start mvstudentt
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:751:1: mvstudentt returns [vector<MVDParameters* > parameters] : MVSTUDENTTOPENBRACKET dp1= mvNode COMMA dp2= mvNode COMMA dp3= distributionParameter CLOSEBRACKET ;
 */
vector<MVDParameters* >
BUGSParser::mvstudentt()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MVDParameters* > parameters;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    MultivariateNode* dp2;
    typedef	MultivariateNode* RETURN_TYPE_dp2;

    Expression* dp3;
    typedef	Expression* RETURN_TYPE_dp3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:752:2: ( MVSTUDENTTOPENBRACKET dp1= mvNode COMMA dp2= mvNode COMMA dp3= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:752:4: MVSTUDENTTOPENBRACKET dp1= mvNode COMMA dp2= mvNode COMMA dp3= distributionParameter CLOSEBRACKET
        {
             this->matchToken(MVSTUDENTTOPENBRACKET, &FOLLOW_MVSTUDENTTOPENBRACKET_in_mvstudentt4264);
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_mvstudentt4268);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_mvstudentt4270);
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_mvstudentt4274);
            dp2=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_mvstudentt4276);
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_mvstudentt4280);
            dp3=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_mvstudentt4282);
            if  (this->hasException())
            {
                goto rulemvstudenttEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                MVDParameters* param1 = new MVDParameters(); param1->type=MVDNODE; param1->mvnode = dp1
                ; parameters
                .push_back(param1);
                	MVDParameters* param2 = new MVDParameters(); param2->type=MVDNODE; param2->mvnode = dp2
                ; parameters
                .push_back(param2);
                	MVDParameters* param3  = new MVDParameters(); param3->type=MVDEXPRESSION; param3->exp = dp3
                ; parameters
                .push_back(param3);
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvstudenttEx; /* Prevent compiler warnings */
    rulemvstudenttEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end mvstudentt */

/**
 * $ANTLR start wishart
 * /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:758:1: wishart returns [vector<MVDParameters* > parameters] : WISHARTOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
vector<MVDParameters* >
BUGSParser::wishart()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<MVDParameters* > parameters;


    MultivariateNode* dp1;
    typedef	MultivariateNode* RETURN_TYPE_dp1;

    Expression* dp2;
    typedef	Expression* RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:759:2: ( WISHARTOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET )
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:759:4: WISHARTOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(WISHARTOPENBRACKET, &FOLLOW_WISHARTOPENBRACKET_in_wishart4302);
            if  (this->hasException())
            {
                goto rulewishartEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_wishart4306);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewishartEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_wishart4308);
            if  (this->hasException())
            {
                goto rulewishartEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_wishart4312);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewishartEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_wishart4314);
            if  (this->hasException())
            {
                goto rulewishartEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                MVDParameters* param1 = new MVDParameters(); param1->type=MVDNODE; param1->mvnode = dp1
                ; parameters
                .push_back(param1);
                	MVDParameters* param2  = new MVDParameters(); param2->type=MVDEXPRESSION; param2->exp = dp2
                ; parameters
                .push_back(param2);
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulewishartEx; /* Prevent compiler warnings */
    rulewishartEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end wishart */

// $ANTLR start synpred1_BUGS
void BUGSParser::msynpred1_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:163:3: ( uvNode TILDE )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:163:4: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred1_BUGS782);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred1_BUGS784);
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_BUGSEx; /* Prevent compiler warnings */
rulesynpred1_BUGSEx: ;

}
// $ANTLR end synpred1_BUGS

// $ANTLR start synpred2_BUGS
void BUGSParser::msynpred2_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:164:4: ( mvNode TILDE )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:164:5: mvNode TILDE
    {
        this->followPush(FOLLOW_mvNode_in_synpred2_BUGS799);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred2_BUGS801);
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_BUGSEx; /* Prevent compiler warnings */
rulesynpred2_BUGSEx: ;

}
// $ANTLR end synpred2_BUGS

// $ANTLR start synpred3_BUGS
void BUGSParser::msynpred3_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:165:4: ( uvNode LEFTPOINTER )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:165:5: uvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_uvNode_in_synpred3_BUGS816);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred3_BUGS818);
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_BUGSEx; /* Prevent compiler warnings */
rulesynpred3_BUGSEx: ;

}
// $ANTLR end synpred3_BUGS

// $ANTLR start synpred4_BUGS
void BUGSParser::msynpred4_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:166:4: ( mvNode LEFTPOINTER )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:166:5: mvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_mvNode_in_synpred4_BUGS833);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred4_BUGS835);
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_BUGSEx; /* Prevent compiler warnings */
rulesynpred4_BUGSEx: ;

}
// $ANTLR end synpred4_BUGS

// $ANTLR start synpred5_BUGS
void BUGSParser::msynpred5_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:167:4: ( linkFunction LEFTPOINTER )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:167:5: linkFunction LEFTPOINTER
    {
        this->followPush(FOLLOW_linkFunction_in_synpred5_BUGS850);
        linkFunction();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred5_BUGS852);
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_BUGSEx; /* Prevent compiler warnings */
rulesynpred5_BUGSEx: ;

}
// $ANTLR end synpred5_BUGS

// $ANTLR start synpred6_BUGS
void BUGSParser::msynpred6_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:182:2: ( uvNode TILDE categoricaldistribution )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:182:3: uvNode TILDE categoricaldistribution
    {
        this->followPush(FOLLOW_uvNode_in_synpred6_BUGS900);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred6_BUGS902);
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_categoricaldistribution_in_synpred6_BUGS904);
        categoricaldistribution();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_BUGSEx; /* Prevent compiler warnings */
rulesynpred6_BUGSEx: ;

}
// $ANTLR end synpred6_BUGS

// $ANTLR start synpred7_BUGS
void BUGSParser::msynpred7_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:184:4: ( uvNode )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:184:5: uvNode
    {
        this->followPush(FOLLOW_uvNode_in_synpred7_BUGS922);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred7_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred7_BUGSEx; /* Prevent compiler warnings */
rulesynpred7_BUGSEx: ;

}
// $ANTLR end synpred7_BUGS

// $ANTLR start synpred8_BUGS
void BUGSParser::msynpred8_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:202:2: ( uvNode TILDE )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:202:3: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred8_BUGS1008);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred8_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred8_BUGS1010);
        if  (this->hasException())
        {
            goto rulesynpred8_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred8_BUGSEx; /* Prevent compiler warnings */
rulesynpred8_BUGSEx: ;

}
// $ANTLR end synpred8_BUGS

// $ANTLR start synpred9_BUGS
void BUGSParser::msynpred9_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:235:5: ( distributionParameter COMMA )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:235:6: distributionParameter COMMA
    {
        this->followPush(FOLLOW_distributionParameter_in_synpred9_BUGS1102);
        distributionParameter();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred9_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred9_BUGS1104);
        if  (this->hasException())
        {
            goto rulesynpred9_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred9_BUGSEx; /* Prevent compiler warnings */
rulesynpred9_BUGSEx: ;

}
// $ANTLR end synpred9_BUGS

// $ANTLR start synpred10_BUGS
void BUGSParser::msynpred10_BUGS_fragment(  )
{
    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:23: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt36;

        alt36=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt36=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt36=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 36 );
            ex->set_state( 0 );


            goto rulesynpred10_BUGSEx;

        }

        switch (alt36)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:24: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred10_BUGS1157);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred10_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:246:31: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred10_BUGS1159);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred10_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred10_BUGSEx; /* Prevent compiler warnings */
rulesynpred10_BUGSEx: ;

}
// $ANTLR end synpred10_BUGS

// $ANTLR start synpred11_BUGS
void BUGSParser::msynpred11_BUGS_fragment(  )
{
    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:270:4: ( uvNode | linkFunction )

        ANTLR_UINT32 alt37;

        alt37=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt37=1;
        	}
            break;
        case CLOGLOGOPENBRACKET:
        case LOGITOPENBRACKET:
        case LOGOPENBRACKET:
        case PROBITOPENBRACKET:
        	{
        		alt37=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 37 );
            ex->set_state( 0 );


            goto rulesynpred11_BUGSEx;

        }

        switch (alt37)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:270:5: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred11_BUGS1282);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred11_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:270:14: linkFunction
    	    {
    	        this->followPush(FOLLOW_linkFunction_in_synpred11_BUGS1286);
    	        linkFunction();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred11_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred11_BUGSEx; /* Prevent compiler warnings */
rulesynpred11_BUGSEx: ;

}
// $ANTLR end synpred11_BUGS

// $ANTLR start synpred12_BUGS
void BUGSParser::msynpred12_BUGS_fragment(  )
{
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:420:4: ( OPENBRACKET expression COLON )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g:420:5: OPENBRACKET expression COLON
    {
         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_synpred12_BUGS1934);
        if  (this->hasException())
        {
            goto rulesynpred12_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_expression_in_synpred12_BUGS1936);
        expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COLON, &FOLLOW_COLON_in_synpred12_BUGS1938);
        if  (this->hasException())
        {
            goto rulesynpred12_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred12_BUGSEx; /* Prevent compiler warnings */
rulesynpred12_BUGSEx: ;

}
// $ANTLR end synpred12_BUGS
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred5_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred1_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred9_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred7_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred12_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred2_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred11_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred11_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred8_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred3_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred10_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred6_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred4_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
