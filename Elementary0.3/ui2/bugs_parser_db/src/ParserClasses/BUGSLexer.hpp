/** \file
 *  This C++ header file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g
 *     -                            On : 2013-05-06 12:10:39
 *     -                 for the lexer : BUGSLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The lexer 
BUGSLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_BUGSLexer_H
#define _BUGSLexer_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include    <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include <iostream>
using namespace std;




#ifdef	WIN32
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
	namespace BUGS {




     class BUGSLexer; class BUGSParser;

     typedef antlr3::Traits< BUGSLexer, BUGSParser > BUGSLexerTraits;

     typedef BUGSLexerTraits BUGSParserTraits;


typedef BUGSLexerTraits BUGSLexerImplTraits;


class BUGSLexerTokens
{
public:
	/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
	 * \{
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens 
	{
		EOF_TOKEN = BUGSLexerImplTraits::CommonTokenType::TOKEN_EOF
		, ABSOPENBRACKET = 4 
		, ARCCOSHOPENBRACKET = 5 
		, ARCCOSOPENBRACKET = 6 
		, ARCSINHOPENBRACKET = 7 
		, ARCSINOPENBRACKET = 8 
		, ARCTANHOPENBRACKET = 9 
		, ARCTANOPENBRACKET = 10 
		, BERNOULLIOPENBRACKET = 11 
		, BETAOPENBRACKET = 12 
		, BINOMIALOPENBRACKET = 13 
		, CATEGORICALOPENBRACKET = 14 
		, CENSORBEGINWITHC = 15 
		, CENSORBEGINWITHI = 16 
		, CHISQUAREDOPENBRACKET = 17 
		, CLOGLOGOPENBRACKET = 18 
		, CLOSEBRACE = 19 
		, CLOSEBRACKET = 20 
		, CLOSESQUAREBRACKET = 21 
		, COLON = 22 
		, COMMA = 23 
		, CONSTANTINT = 24 
		, CONSTANTVALUE = 25 
		, COSHOPENBRACKET = 26 
		, COSOPENBRACKET = 27 
		, CUMULATIVEOPENBRACKET = 28 
		, CUTOPENBRACKET = 29 
		, DENSITYOPENBRACKET = 30 
		, DEVIANCEOPENBRACKET = 31 
		, DIRICHLET2OPENBRACKET = 32 
		, DIRICHLETOPENBRACKET = 33 
		, DIV = 34 
		, DOT = 35 
		, DOUBLEEXPONENTIALOPENBRACKET = 36 
		, EQUALSOPENBRACKET = 37 
		, EQUALTO = 38 
		, EXPONENTIALOPENBRACKET = 39 
		, EXPOPENBRACKET = 40 
		, FLATOPENBRACKET = 41 
		, FORSTART = 42 
		, GAMMAOPENBRACKET = 43 
		, GAMMAPOPENBRACKET = 44 
		, GENFOPENBRACKET = 45 
		, GENGAMMAOPENBRACKET = 46 
		, GENLOGLIKOPENBRACKET = 47 
		, GENPARETOOPENBRACKET = 48 
		, GEVOPENBRACKET = 49 
		, HASH = 50 
		, ICLOGLOGOPENBRACKET = 51 
		, ILOGITOPENBRACKET = 52 
		, IN = 53 
		, INPRODOPENBRACKET = 54 
		, INTEGRALOPENBRACKET = 55 
		, INVERSEOPENBRACKET = 56 
		, LEFTPOINTER = 57 
		, LOGFACTOPENBRACKET = 58 
		, LOGGAMOPENBRACKET = 59 
		, LOGISTICOPENBRACKET = 60 
		, LOGITOPENBRACKET = 61 
		, LOGNORMALOPENBRACKET = 62 
		, LOGOPENBRACKET = 63 
		, MAXOPENBRACKET = 64 
		, MEANOPENBRACKET = 65 
		, MINOPENBRACKET = 66 
		, MINUS = 67 
		, MODEL = 68 
		, MULT = 69 
		, MUTLTINOMIALOPENBRACKET = 70 
		, MVNORMALOPENBRACKET = 71 
		, MVSTUDENTTOPENBRACKET = 72 
		, NCHGOPENBRACKET = 73 
		, NEGATIVEBINOMIALOPENBRACKET = 74 
		, NEWLINE = 75 
		, NODENAME = 76 
		, NORMALOPENBRACKET = 77 
		, OPENBRACE = 78 
		, OPENBRACKET = 79 
		, OPENSQUAREBRACKET = 80 
		, PARETOOPENBRACKET = 81 
		, PHIOPENBRACKET = 82 
		, PLUS = 83 
		, POISSONOPENBRACKET = 84 
		, POSTPVALUEOPENBRACKET = 85 
		, POWOPENBRACKET = 86 
		, PRIORPVALUEOPENBRACKET = 87 
		, PROBITOPENBRACKET = 88 
		, REPLICATEPOSTOPENBRACKET = 89 
		, REPLICATEPRIOROPENBRACKET = 90 
		, ROUNDOPENBRACKET = 91 
		, SDOPENBRACKET = 92 
		, SINHOPENBRACKET = 93 
		, SINOPENBRACKET = 94 
		, SOLUTIONOPENBRACKET = 95 
		, SQRTOPENBRACKET = 96 
		, STEPOPENBRACKET = 97 
		, STUDENTTOPENBRACKET = 98 
		, SUMOPENBRACKET = 99 
		, TANHOPENBRACKET = 100 
		, TANOPENBRACKET = 101 
		, TILDE = 102 
		, TRUNCATIONBEGIN = 103 
		, TRUNCOPENBRACKET = 104 
		, UNIFORMOPENBRACKET = 105 
		, WEIBULLOPENBRACKET = 106 
		, WHITESPACE = 107 
		, WISHARTOPENBRACKET = 108 
	};

};

/** Context tracking structure for 
BUGSLexer

 */
class BUGSLexer : public 
BUGSLexerImplTraits::BaseLexerType
, public BUGSLexerTokens
{
public:
	typedef BUGSLexerImplTraits ImplTraits;
	typedef BUGSLexer ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef 
BUGSLexerImplTraits::BaseLexerType
 BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
public:
    BUGSLexer(InputType* instream);
    BUGSLexer(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );

    
     void
      mABSOPENBRACKET( );

     void
      mARCCOSHOPENBRACKET( );

     void
      mARCCOSOPENBRACKET( );

     void
      mARCSINHOPENBRACKET( );

     void
      mARCSINOPENBRACKET( );

     void
      mARCTANHOPENBRACKET( );

     void
      mARCTANOPENBRACKET( );

     void
      mBERNOULLIOPENBRACKET( );

     void
      mBETAOPENBRACKET( );

     void
      mBINOMIALOPENBRACKET( );

     void
      mCATEGORICALOPENBRACKET( );

     void
      mCENSORBEGINWITHC( );

     void
      mCENSORBEGINWITHI( );

     void
      mCHISQUAREDOPENBRACKET( );

     void
      mCLOGLOGOPENBRACKET( );

     void
      mCLOSEBRACE( );

     void
      mCLOSEBRACKET( );

     void
      mCLOSESQUAREBRACKET( );

     void
      mCOLON( );

     void
      mCOMMA( );

     void
      mCOSHOPENBRACKET( );

     void
      mCOSOPENBRACKET( );

     void
      mCUMULATIVEOPENBRACKET( );

     void
      mCUTOPENBRACKET( );

     void
      mDENSITYOPENBRACKET( );

     void
      mDEVIANCEOPENBRACKET( );

     void
      mDIRICHLET2OPENBRACKET( );

     void
      mDIRICHLETOPENBRACKET( );

     void
      mDIV( );

     void
      mDOT( );

     void
      mDOUBLEEXPONENTIALOPENBRACKET( );

     void
      mEQUALSOPENBRACKET( );

     void
      mEQUALTO( );

     void
      mEXPONENTIALOPENBRACKET( );

     void
      mEXPOPENBRACKET( );

     void
      mFLATOPENBRACKET( );

     void
      mFORSTART( );

     void
      mGAMMAOPENBRACKET( );

     void
      mGAMMAPOPENBRACKET( );

     void
      mGENFOPENBRACKET( );

     void
      mGENGAMMAOPENBRACKET( );

     void
      mGENLOGLIKOPENBRACKET( );

     void
      mGENPARETOOPENBRACKET( );

     void
      mGEVOPENBRACKET( );

     void
      mHASH( );

     void
      mICLOGLOGOPENBRACKET( );

     void
      mILOGITOPENBRACKET( );

     void
      mIN( );

     void
      mINPRODOPENBRACKET( );

     void
      mINTEGRALOPENBRACKET( );

     void
      mINVERSEOPENBRACKET( );

     void
      mLEFTPOINTER( );

     void
      mLOGFACTOPENBRACKET( );

     void
      mLOGGAMOPENBRACKET( );

     void
      mLOGISTICOPENBRACKET( );

     void
      mLOGITOPENBRACKET( );

     void
      mLOGNORMALOPENBRACKET( );

     void
      mLOGOPENBRACKET( );

     void
      mMAXOPENBRACKET( );

     void
      mMEANOPENBRACKET( );

     void
      mMINOPENBRACKET( );

     void
      mMINUS( );

     void
      mMODEL( );

     void
      mMULT( );

     void
      mMUTLTINOMIALOPENBRACKET( );

     void
      mMVNORMALOPENBRACKET( );

     void
      mMVSTUDENTTOPENBRACKET( );

     void
      mNCHGOPENBRACKET( );

     void
      mNEGATIVEBINOMIALOPENBRACKET( );

     void
      mNORMALOPENBRACKET( );

     void
      mOPENBRACE( );

     void
      mOPENBRACKET( );

     void
      mOPENSQUAREBRACKET( );

     void
      mPARETOOPENBRACKET( );

     void
      mPHIOPENBRACKET( );

     void
      mPLUS( );

     void
      mPOISSONOPENBRACKET( );

     void
      mPOSTPVALUEOPENBRACKET( );

     void
      mPOWOPENBRACKET( );

     void
      mPRIORPVALUEOPENBRACKET( );

     void
      mPROBITOPENBRACKET( );

     void
      mREPLICATEPOSTOPENBRACKET( );

     void
      mREPLICATEPRIOROPENBRACKET( );

     void
      mROUNDOPENBRACKET( );

     void
      mSDOPENBRACKET( );

     void
      mSINHOPENBRACKET( );

     void
      mSINOPENBRACKET( );

     void
      mSOLUTIONOPENBRACKET( );

     void
      mSQRTOPENBRACKET( );

     void
      mSTEPOPENBRACKET( );

     void
      mSTUDENTTOPENBRACKET( );

     void
      mSUMOPENBRACKET( );

     void
      mTANHOPENBRACKET( );

     void
      mTANOPENBRACKET( );

     void
      mTILDE( );

     void
      mTRUNCATIONBEGIN( );

     void
      mTRUNCOPENBRACKET( );

     void
      mUNIFORMOPENBRACKET( );

     void
      mWEIBULLOPENBRACKET( );

     void
      mWISHARTOPENBRACKET( );

     void
      mCONSTANTINT( );

     void
      mNODENAME( );

     void
      mCONSTANTVALUE( );

     void
      mWHITESPACE( );

     void
      mNEWLINE( );

     void
      mTokens( );
    const char *    getGrammarFileName();
    void            reset();
    ~BUGSLexer();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for BUGSLexer
 * =============================================================================
 */
/** } */

	}


#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
