/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g
 *     -                            On : 2013-05-06 12:09:59
 *     -                 for the lexer : BUGSDataLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSDataLexer.hpp"
/* ----------------------------------------- */



	namespace BUGSData {


/** String literals used by BUGSDataLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x44, 0x61, 0x74, 0x61,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x44, 0x69, 0x6D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x6C, 0x69, 0x73, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x4E, 0x41,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x63, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace BUGSData {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



BUGSDataLexer::~BUGSDataLexer()
{
}

void
BUGSDataLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSDataLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called BUGSDataLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pBUGSDataLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSDataLexer::BUGSDataLexer(StreamType* instream)
:BUGSDataLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called BUGSDataLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pBUGSDataLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSDataLexer::BUGSDataLexer(StreamType* instream, RecognizerSharedStateType* state)
:BUGSDataLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void BUGSDataLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in BUGSDataLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 22:14: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSEBRACKET
 *
 * Looks to match the characters the constitute the token CLOSEBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mCLOSEBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSEBRACKET;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:22:14: ( ')' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:22:16: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleCLOSEBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSEBRACKETEx; /* Prevent compiler warnings */
    ruleCLOSEBRACKETEx: ;

}
// $ANTLR end CLOSEBRACKET

//   Comes from: 23:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mCOMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMA;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:23:7: ( ',' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:23:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 24:6: ( 'Data' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DATA
 *
 * Looks to match the characters the constitute the token DATA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mDATA()
{
    ANTLR_UINT32	_type;
      


    _type	    = DATA;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:24:6: ( 'Data' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:24:8: 'Data'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleDATAEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDATAEx; /* Prevent compiler warnings */
    ruleDATAEx: ;

}
// $ANTLR end DATA

//   Comes from: 25:5: ( 'Dim' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIM
 *
 * Looks to match the characters the constitute the token DIM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mDIM()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIM;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:25:5: ( 'Dim' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:25:7: 'Dim'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleDIMEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIMEx; /* Prevent compiler warnings */
    ruleDIMEx: ;

}
// $ANTLR end DIM

//   Comes from: 26:5: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mDOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = DOT;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:26:5: ( '.' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:26:7: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleDOTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 27:9: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQUALTO
 *
 * Looks to match the characters the constitute the token EQUALTO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mEQUALTO()
{
    ANTLR_UINT32	_type;
      


    _type	    = EQUALTO;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:27:9: ( '=' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:27:11: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleEQUALTOEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleEQUALTOEx; /* Prevent compiler warnings */
    ruleEQUALTOEx: ;

}
// $ANTLR end EQUALTO

//   Comes from: 28:6: ( 'list(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LIST
 *
 * Looks to match the characters the constitute the token LIST
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mLIST()
{
    ANTLR_UINT32	_type;
      


    _type	    = LIST;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:28:6: ( 'list(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:28:8: 'list('
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleLISTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLISTEx; /* Prevent compiler warnings */
    ruleLISTEx: ;

}
// $ANTLR end LIST

//   Comes from: 29:4: ( 'NA' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NA
 *
 * Looks to match the characters the constitute the token NA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mNA()
{
    ANTLR_UINT32	_type;
      


    _type	    = NA;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:29:4: ( 'NA' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:29:6: 'NA'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleNAEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNAEx; /* Prevent compiler warnings */
    ruleNAEx: ;

}
// $ANTLR end NA

//   Comes from: 30:16: ( 'structure(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRUCTUREBEGIN
 *
 * Looks to match the characters the constitute the token STRUCTUREBEGIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mSTRUCTUREBEGIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRUCTUREBEGIN;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:30:16: ( 'structure(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:30:18: 'structure('
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleSTRUCTUREBEGINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRUCTUREBEGINEx; /* Prevent compiler warnings */
    ruleSTRUCTUREBEGINEx: ;

}
// $ANTLR end STRUCTUREBEGIN

//   Comes from: 31:13: ( 'c(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VECTORBEGIN
 *
 * Looks to match the characters the constitute the token VECTORBEGIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mVECTORBEGIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = VECTORBEGIN;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:31:13: ( 'c(' )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:31:15: 'c('
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleVECTORBEGINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleVECTORBEGINEx; /* Prevent compiler warnings */
    ruleVECTORBEGINEx: ;

}
// $ANTLR end VECTORBEGIN

//   Comes from: 91:2: ( ( '+' | '-' )? ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '+' | '-' )? ( DOT ( '0' .. '9' )+ ) ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTANTVALUE
 *
 * Looks to match the characters the constitute the token CONSTANTVALUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mCONSTANTVALUE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTANTVALUE;


    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:2: ( ( '+' | '-' )? ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? | ( '+' | '-' )? ( DOT ( '0' .. '9' )+ ) ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? )

        ANTLR_UINT32 alt13;

        alt13=2;

        switch ( this->LA(1) )
        {
        case '+':
        case '-':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        			{
        				alt13=1;
        			}
        		    break;
        		case '.':
        			{
        				alt13=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSDataLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 13 );
        		    ex->set_state( 1 );


        		    goto ruleCONSTANTVALUEEx;

        		}

        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt13=1;
        	}
            break;
        case '.':
        	{
        		alt13=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< BUGSDataLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 13 );
            ex->set_state( 0 );


            goto ruleCONSTANTVALUEEx;

        }

        switch (alt13)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:5: ( '+' | '-' )? ( '0' .. '9' )+ ( DOT ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
    	    {
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:5: ( '+' | '-' )?
    	        {
    	            int alt1=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '+':
    	                case '-':
    	                	{
    	                		alt1=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt1)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	    {
    	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:16: ( '0' .. '9' )+
    	        {
    	            int cnt2=0;

    	            for (;;)
    	            {
    	                int alt2=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt2=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt2)
    	        	{
    	        	    case 1:
    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleCONSTANTVALUEEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt2 >= 1 )
    	        		{
    	        		    goto loop2;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleCONSTANTVALUEEx;
    	        	}
    	        	cnt2++;
    	            }
    	            loop2: ;	/* Jump to here if this rule does not match */
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:27: ( DOT ( '0' .. '9' )+ )?
    	        {
    	            int alt4=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '.':
    	                	{
    	                		alt4=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt4)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:28: DOT ( '0' .. '9' )+
    	        	    {
    	        	        /* 91:28: DOT ( '0' .. '9' )+ */
    	        	        mDOT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }



    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:31: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt3=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt3=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt3=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt3)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt3 >= 1 )
    	        	        		{
    	        	        		    goto loop3;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt3++;
    	        	            }
    	        	            loop3: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:44: ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
    	        {
    	            int alt7=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                	{
    	                		alt7=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt7)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:45: 'E' ( '+' | '-' )? ( '0' .. '9' )+
    	        	    {
    	        	         this->matchc('E');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:48: ( '+' | '-' )?
    	        	        {
    	        	            int alt5=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt5=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt5)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleCONSTANTVALUEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:91:58: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt6=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt6=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt6=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt6)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt6 >= 1 )
    	        	        		{
    	        	        		    goto loop6;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt6++;
    	        	            }
    	        	            loop6: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:5: ( '+' | '-' )? ( DOT ( '0' .. '9' )+ ) ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
    	    {
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:5: ( '+' | '-' )?
    	        {
    	            int alt8=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '+':
    	                case '-':
    	                	{
    	                		alt8=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt8)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	    {
    	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:16: ( DOT ( '0' .. '9' )+ )
    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:17: DOT ( '0' .. '9' )+
    	        {
    	            /* 92:17: DOT ( '0' .. '9' )+ */
    	            mDOT();
    	            if  (this->hasException())
    	            {
    	                goto ruleCONSTANTVALUEEx;
    	            }



    	            // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:20: ( '0' .. '9' )+
    	            {
    	                int cnt9=0;

    	                for (;;)
    	                {
    	                    int alt9=2;
    	            	switch ( this->LA(1) )
    	            	{
    	            	case '0':
    	            	case '1':
    	            	case '2':
    	            	case '3':
    	            	case '4':
    	            	case '5':
    	            	case '6':
    	            	case '7':
    	            	case '8':
    	            	case '9':
    	            		{
    	            			alt9=1;
    	            		}
    	            	    break;

    	            	}

    	            	switch (alt9)
    	            	{
    	            	    case 1:
    	            	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	            	        {
    	            	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	            	            {
    	            	                this->consume();
    	            	            }
    	            	            else
    	            	            {
    	            	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            	                this->recover();
    	            	                goto ruleCONSTANTVALUEEx;
    	            	            }


    	            	        }
    	            	        break;

    	            	    default:

    	            		if ( cnt9 >= 1 )
    	            		{
    	            		    goto loop9;
    	            		}
    	            		/* mismatchedSetEx()
    	            		 */
    	            		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	            		goto ruleCONSTANTVALUEEx;
    	            	}
    	            	cnt9++;
    	                }
    	                loop9: ;	/* Jump to here if this rule does not match */
    	            }

    	        }


    	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:32: ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
    	        {
    	            int alt12=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                	{
    	                		alt12=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt12)
    	            {
    	        	case 1:
    	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:33: 'E' ( '+' | '-' )? ( '0' .. '9' )+
    	        	    {
    	        	         this->matchc('E');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCONSTANTVALUEEx;
    	        	        }


    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:36: ( '+' | '-' )?
    	        	        {
    	        	            int alt10=2;
    	        	            switch ( this->LA(1) )
    	        	            {
    	        	                case '+':
    	        	                case '-':
    	        	                	{
    	        	                		alt10=1;
    	        	                	}
    	        	                    break;
    	        	            }

    	        	            switch (alt10)
    	        	            {
    	        	        	case 1:
    	        	        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        	    {
    	        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
    	        	        	        {
    	        	        	            this->consume();
    	        	        	        }
    	        	        	        else
    	        	        	        {
    	        	        	            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	            this->recover();
    	        	        	            goto ruleCONSTANTVALUEEx;
    	        	        	        }


    	        	        	    }
    	        	        	    break;

    	        	            }
    	        	        }

    	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:92:46: ( '0' .. '9' )+
    	        	        {
    	        	            int cnt11=0;

    	        	            for (;;)
    	        	            {
    	        	                int alt11=2;
    	        	        	switch ( this->LA(1) )
    	        	        	{
    	        	        	case '0':
    	        	        	case '1':
    	        	        	case '2':
    	        	        	case '3':
    	        	        	case '4':
    	        	        	case '5':
    	        	        	case '6':
    	        	        	case '7':
    	        	        	case '8':
    	        	        	case '9':
    	        	        		{
    	        	        			alt11=1;
    	        	        		}
    	        	        	    break;

    	        	        	}

    	        	        	switch (alt11)
    	        	        	{
    	        	        	    case 1:
    	        	        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
    	        	        	        {
    	        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        	            {
    	        	        	                this->consume();
    	        	        	            }
    	        	        	            else
    	        	        	            {
    	        	        	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	        	                this->recover();
    	        	        	                goto ruleCONSTANTVALUEEx;
    	        	        	            }


    	        	        	        }
    	        	        	        break;

    	        	        	    default:

    	        	        		if ( cnt11 >= 1 )
    	        	        		{
    	        	        		    goto loop11;
    	        	        		}
    	        	        		/* mismatchedSetEx()
    	        	        		 */
    	        	        		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        	        		goto ruleCONSTANTVALUEEx;
    	        	        	}
    	        	        	cnt11++;
    	        	            }
    	        	            loop11: ;	/* Jump to here if this rule does not match */
    	        	        }

    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTANTVALUEEx; /* Prevent compiler warnings */
    ruleCONSTANTVALUEEx: ;

}
// $ANTLR end CONSTANTVALUE

//   Comes from: 96:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NODENAME
 *
 * Looks to match the characters the constitute the token NODENAME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mNODENAME()
{
    ANTLR_UINT32	_type;
      


    _type	    = NODENAME;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:96:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:96:3: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleNODENAMEEx;
        }


        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:96:24: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*

        for (;;)
        {
            int alt14=2;
            switch ( this->LA(1) )
            {
            case '.':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt14=1;
            	}
                break;

            }

            switch (alt14)
            {
        	case 1:
        	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
        	    {
        	        if ( this->LA(1) == '.' || ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleNODENAMEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop14;	/* break out of the loop */
        	    break;
            }
        }
        loop14: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNODENAMEEx; /* Prevent compiler warnings */
    ruleNODENAMEEx: ;

}
// $ANTLR end NODENAME

//   Comes from: 99:12: ( ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSDataLexer::mWHITESPACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = WHITESPACE;


    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:99:12: ( ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+ )
    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:99:14: ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+
    {
        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:99:14: ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+
        {
            int cnt15=0;

            for (;;)
            {
                int alt15=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\f':
        	case '\r':
        	case ' ':
        	case ';':
        		{
        			alt15=1;
        		}
        	    break;

        	}

        	switch (alt15)
        	{
        	    case 1:
        	        // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || ((this->LA(1) >= '\f') && (this->LA(1) <= '\r')) || this->LA(1) == ' ' || this->LA(1) == ';' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSDataLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWHITESPACEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt15 >= 1 )
        		{
        		    goto loop15;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSDataLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWHITESPACEEx;
        	}
        	cnt15++;
            }
            loop15: ;	/* Jump to here if this rule does not match */
        }

        {
             this->get_state()->get_channel() = HIDDEN; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
BUGSDataLexer::mTokens()
{
    {
        //  /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:8: ( CLOSEBRACKET | COMMA | DATA | DIM | DOT | EQUALTO | LIST | NA | STRUCTUREBEGIN | VECTORBEGIN | CONSTANTVALUE | NODENAME | WHITESPACE )

        ANTLR_UINT32 alt16;

        alt16=13;

        switch ( this->LA(1) )
        {
        case ')':
        	{
        		alt16=1;
        	}
            break;
        case ',':
        	{
        		alt16=2;
        	}
            break;
        case 'D':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case '.':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt16=12;
        									}
        								    break;

        								default:
        								    alt16=3;
        								}

        							}
        						    break;

        						default:
        						    alt16=12;
        						}

        					}
        				    break;

        				default:
        				    alt16=12;
        				}

        			}
        		    break;
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'm':
        					{
        						switch ( this->LA(4) )
        						{
        						case '.':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt16=12;
        							}
        						    break;

        						default:
        						    alt16=4;
        						}

        					}
        				    break;

        				default:
        				    alt16=12;
        				}

        			}
        		    break;

        		default:
        		    alt16=12;
        		}

        	}
            break;
        case '.':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        			{
        				alt16=11;
        			}
        		    break;

        		default:
        		    alt16=5;
        		}

        	}
            break;
        case '=':
        	{
        		alt16=6;
        	}
            break;
        case 'l':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case '(':
        									{
        										alt16=7;
        									}
        								    break;

        								default:
        								    alt16=12;
        								}

        							}
        						    break;

        						default:
        						    alt16=12;
        						}

        					}
        				    break;

        				default:
        				    alt16=12;
        				}

        			}
        		    break;

        		default:
        		    alt16=12;
        		}

        	}
            break;
        case 'N':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'A':
        			{
        				switch ( this->LA(3) )
        				{
        				case '.':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt16=12;
        					}
        				    break;

        				default:
        				    alt16=8;
        				}

        			}
        		    break;

        		default:
        		    alt16=12;
        		}

        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 't':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'u':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'c':
        									{
        										switch ( this->LA(6) )
        										{
        										case 't':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'u':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'r':
        															{
        																switch ( this->LA(9) )
        																{
        																case 'e':
        																	{
        																		switch ( this->LA(10) )
        																		{
        																		case '(':
        																			{
        																				alt16=9;
        																			}
        																		    break;

        																		default:
        																		    alt16=12;
        																		}

        																	}
        																    break;

        																default:
        																    alt16=12;
        																}

        															}
        														    break;

        														default:
        														    alt16=12;
        														}

        													}
        												    break;

        												default:
        												    alt16=12;
        												}

        											}
        										    break;

        										default:
        										    alt16=12;
        										}

        									}
        								    break;

        								default:
        								    alt16=12;
        								}

        							}
        						    break;

        						default:
        						    alt16=12;
        						}

        					}
        				    break;

        				default:
        				    alt16=12;
        				}

        			}
        		    break;

        		default:
        		    alt16=12;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case '(':
        			{
        				alt16=10;
        			}
        		    break;

        		default:
        		    alt16=12;
        		}

        	}
            break;
        case '+':
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt16=11;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case 'a':
        case 'b':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt16=12;
        	}
            break;
        case '\t':
        case '\n':
        case '\f':
        case '\r':
        case ' ':
        case ';':
        	{
        		alt16=13;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< BUGSDataLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 16 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt16)
        {
    	case 1:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:10: CLOSEBRACKET
    	    {
    	        /* 1:10: CLOSEBRACKET */
    	        mCLOSEBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:23: COMMA
    	    {
    	        /* 1:23: COMMA */
    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:29: DATA
    	    {
    	        /* 1:29: DATA */
    	        mDATA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:34: DIM
    	    {
    	        /* 1:34: DIM */
    	        mDIM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:38: DOT
    	    {
    	        /* 1:38: DOT */
    	        mDOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:42: EQUALTO
    	    {
    	        /* 1:42: EQUALTO */
    	        mEQUALTO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:50: LIST
    	    {
    	        /* 1:50: LIST */
    	        mLIST();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:55: NA
    	    {
    	        /* 1:55: NA */
    	        mNA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:58: STRUCTUREBEGIN
    	    {
    	        /* 1:58: STRUCTUREBEGIN */
    	        mSTRUCTUREBEGIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:73: VECTORBEGIN
    	    {
    	        /* 1:73: VECTORBEGIN */
    	        mVECTORBEGIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:85: CONSTANTVALUE
    	    {
    	        /* 1:85: CONSTANTVALUE */
    	        mCONSTANTVALUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:99: NODENAME
    	    {
    	        /* 1:99: NODENAME */
    	        mNODENAME();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGSData.g:1:108: WHITESPACE
    	    {
    	        /* 1:108: WHITESPACE */
    	        mWHITESPACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
