/** \file
 *  This C++ header file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/hazygroup/trunk/elementary/0.3/Elementary0.3/ui2/bugs_parser_db/antlrparser/BUGS.g
 *     -                            On : 2013-05-06 12:10:38
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The parser 
BUGSParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_BUGSParser_H
#define _BUGSParser_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include    <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include "BUGSLexer.hpp"
#include "../ModelClasses/Program.hpp"
#include "../ModelClasses/StochasticNodeStatement.hpp"
#include "../ModelClasses/StochasticNodeLimitation.hpp"
#include "../ModelClasses/LogicalNodeStatement.hpp"
#include "../ModelClasses/ForStatement.hpp"

#include "../ModelClasses/UnivariateNode.hpp"
#include "../ModelClasses/MultivariateNode.hpp"
#include "../ModelClasses/LinkFunctionNode.hpp"

#include "../ModelClasses/UnivariateDistribution.hpp"
#include "../ModelClasses/MultivariateDistribution.hpp"
#include "../ModelClasses/MVDParameters.hpp"

#include "../ModelClasses/Expression.hpp"
#include "../ModelClasses/MultiDimExpression.hpp"
#include "../ModelClasses/LogicalNodeExpression.hpp"

#include "../ModelClasses/ScalarFunction.hpp"
#include "../ModelClasses/VectorFunction.hpp"




#ifdef	WIN32
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

	namespace BUGS {


typedef BUGSParserTraits BUGSParserImplTraits;

 struct synpred1_BUGS {}; 
 struct synpred2_BUGS {}; 
 struct synpred3_BUGS {}; 
 struct synpred4_BUGS {}; 
 struct synpred5_BUGS {}; 
 struct synpred6_BUGS {}; 
 struct synpred7_BUGS {}; 
 struct synpred8_BUGS {}; 
 struct synpred9_BUGS {}; 
 struct synpred10_BUGS {}; 
 struct synpred11_BUGS {}; 
 struct synpred12_BUGS {}; 

struct BUGSParser_uvStochasticNodeExpr_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    UnivariateNode* uvnode;
    UnivariateDistribution* uvdistribution;

    
    BUGSParser_uvStochasticNodeExpr_return()
    {
    }

    BUGSParser_uvStochasticNodeExpr_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_uvStochasticNodeExpr_return( const BUGSParser_uvStochasticNodeExpr_return& n )
    : BaseType(n)
    , uvnode(n.uvnode) ,uvdistribution(n.uvdistribution) 
    {
    }

    BUGSParser_uvStochasticNodeExpr_return&
    operator=( const BUGSParser_uvStochasticNodeExpr_return& n )
    {
    	BaseType::operator=( n );
    	uvnode = n.uvnode; 
    	uvdistribution = n.uvdistribution; 
    	return *this;
    }

};





struct BUGSParser_mvStochasticNodeExpr_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    MultivariateNode* mvnode;
    MultivariateDistribution* mvdistribution;

    
    BUGSParser_mvStochasticNodeExpr_return()
    {
    }

    BUGSParser_mvStochasticNodeExpr_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_mvStochasticNodeExpr_return( const BUGSParser_mvStochasticNodeExpr_return& n )
    : BaseType(n)
    , mvnode(n.mvnode) ,mvdistribution(n.mvdistribution) 
    {
    }

    BUGSParser_mvStochasticNodeExpr_return&
    operator=( const BUGSParser_mvStochasticNodeExpr_return& n )
    {
    	BaseType::operator=( n );
    	mvnode = n.mvnode; 
    	mvdistribution = n.mvdistribution; 
    	return *this;
    }

};





struct BUGSParser_lowerWithOptionalUpper_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    OptionalComponent optional;
    Expression* lowerlimit;
    Expression* upperlimit;

    
    BUGSParser_lowerWithOptionalUpper_return()
    {
    }

    BUGSParser_lowerWithOptionalUpper_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_lowerWithOptionalUpper_return( const BUGSParser_lowerWithOptionalUpper_return& n )
    : BaseType(n)
    , optional(n.optional) ,lowerlimit(n.lowerlimit) ,upperlimit(n.upperlimit) 
    {
    }

    BUGSParser_lowerWithOptionalUpper_return&
    operator=( const BUGSParser_lowerWithOptionalUpper_return& n )
    {
    	BaseType::operator=( n );
    	optional = n.optional; 
    	lowerlimit = n.lowerlimit; 
    	upperlimit = n.upperlimit; 
    	return *this;
    }

};





struct BUGSParser_upperWithOptionalLower_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    OptionalComponent optional;
    Expression* lowerlimit;
    Expression* upperlimit;

    
    BUGSParser_upperWithOptionalLower_return()
    {
    }

    BUGSParser_upperWithOptionalLower_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_upperWithOptionalLower_return( const BUGSParser_upperWithOptionalLower_return& n )
    : BaseType(n)
    , optional(n.optional) ,lowerlimit(n.lowerlimit) ,upperlimit(n.upperlimit) 
    {
    }

    BUGSParser_upperWithOptionalLower_return&
    operator=( const BUGSParser_upperWithOptionalLower_return& n )
    {
    	BaseType::operator=( n );
    	optional = n.optional; 
    	lowerlimit = n.lowerlimit; 
    	upperlimit = n.upperlimit; 
    	return *this;
    }

};





struct BUGSParser_startFor_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    string loopvariable;
    Expression* beginexpression;
    Expression* endexpression;

    
    BUGSParser_startFor_return()
    {
    }

    BUGSParser_startFor_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_startFor_return( const BUGSParser_startFor_return& n )
    : BaseType(n)
    , loopvariable(n.loopvariable) ,beginexpression(n.beginexpression) ,endexpression(n.endexpression) 
    {
    }

    BUGSParser_startFor_return&
    operator=( const BUGSParser_startFor_return& n )
    {
    	BaseType::operator=( n );
    	loopvariable = n.loopvariable; 
    	beginexpression = n.beginexpression; 
    	endexpression = n.endexpression; 
    	return *this;
    }

};





struct BUGSParser_loopVariable_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;

    
    BUGSParser_loopVariable_return()
    {
    }

    BUGSParser_loopVariable_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_loopVariable_return( const BUGSParser_loopVariable_return& n )
    : BaseType(n)
    {
    }

    BUGSParser_loopVariable_return&
    operator=( const BUGSParser_loopVariable_return& n )
    {
    	BaseType::operator=( n );
    	return *this;
    }

};





struct BUGSParser_discreteUnivariate_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    string name;
    vector<Expression* > parameters;

    
    BUGSParser_discreteUnivariate_return()
    {
    }

    BUGSParser_discreteUnivariate_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_discreteUnivariate_return( const BUGSParser_discreteUnivariate_return& n )
    : BaseType(n)
    , name(n.name) ,parameters(n.parameters) 
    {
    }

    BUGSParser_discreteUnivariate_return&
    operator=( const BUGSParser_discreteUnivariate_return& n )
    {
    	BaseType::operator=( n );
    	name = n.name; 
    	parameters = n.parameters; 
    	return *this;
    }

};





struct BUGSParser_continuousUnivariate_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    std::string name;
    vector<Expression* > parameters;

    
    BUGSParser_continuousUnivariate_return()
    {
    }

    BUGSParser_continuousUnivariate_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_continuousUnivariate_return( const BUGSParser_continuousUnivariate_return& n )
    : BaseType(n)
    , name(n.name) ,parameters(n.parameters) 
    {
    }

    BUGSParser_continuousUnivariate_return&
    operator=( const BUGSParser_continuousUnivariate_return& n )
    {
    	BaseType::operator=( n );
    	name = n.name; 
    	parameters = n.parameters; 
    	return *this;
    }

};





struct BUGSParser_discreteMultivariate_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    string name;
    vector<MVDParameters* > parameters;

    
    BUGSParser_discreteMultivariate_return()
    {
    }

    BUGSParser_discreteMultivariate_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_discreteMultivariate_return( const BUGSParser_discreteMultivariate_return& n )
    : BaseType(n)
    , name(n.name) ,parameters(n.parameters) 
    {
    }

    BUGSParser_discreteMultivariate_return&
    operator=( const BUGSParser_discreteMultivariate_return& n )
    {
    	BaseType::operator=( n );
    	name = n.name; 
    	parameters = n.parameters; 
    	return *this;
    }

};





struct BUGSParser_continuousMultivariate_return : public BUGSParserImplTraits::RuleReturnValueType
{
public:
	typedef BUGSParserImplTraits::RuleReturnValueType BaseType;
    string name;
    vector<MVDParameters* > parameters;

    
    BUGSParser_continuousMultivariate_return()
    {
    }

    BUGSParser_continuousMultivariate_return( BaseParserType* parser )
        : BaseType(parser)
    {
    }

    BUGSParser_continuousMultivariate_return( const BUGSParser_continuousMultivariate_return& n )
    : BaseType(n)
    , name(n.name) ,parameters(n.parameters) 
    {
    }

    BUGSParser_continuousMultivariate_return&
    operator=( const BUGSParser_continuousMultivariate_return& n )
    {
    	BaseType::operator=( n );
    	name = n.name; 
    	parameters = n.parameters; 
    	return *this;
    }

};






class BUGSParserTokens
{
public:
	/** Symbolic definitions of all the tokens that the 
parser
 will work with.
	 * \{
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens 
	{
		EOF_TOKEN = BUGSParserImplTraits::CommonTokenType::TOKEN_EOF
		, ABSOPENBRACKET = 4 
		, ARCCOSHOPENBRACKET = 5 
		, ARCCOSOPENBRACKET = 6 
		, ARCSINHOPENBRACKET = 7 
		, ARCSINOPENBRACKET = 8 
		, ARCTANHOPENBRACKET = 9 
		, ARCTANOPENBRACKET = 10 
		, BERNOULLIOPENBRACKET = 11 
		, BETAOPENBRACKET = 12 
		, BINOMIALOPENBRACKET = 13 
		, CATEGORICALOPENBRACKET = 14 
		, CENSORBEGINWITHC = 15 
		, CENSORBEGINWITHI = 16 
		, CHISQUAREDOPENBRACKET = 17 
		, CLOGLOGOPENBRACKET = 18 
		, CLOSEBRACE = 19 
		, CLOSEBRACKET = 20 
		, CLOSESQUAREBRACKET = 21 
		, COLON = 22 
		, COMMA = 23 
		, CONSTANTINT = 24 
		, CONSTANTVALUE = 25 
		, COSHOPENBRACKET = 26 
		, COSOPENBRACKET = 27 
		, CUMULATIVEOPENBRACKET = 28 
		, CUTOPENBRACKET = 29 
		, DENSITYOPENBRACKET = 30 
		, DEVIANCEOPENBRACKET = 31 
		, DIRICHLET2OPENBRACKET = 32 
		, DIRICHLETOPENBRACKET = 33 
		, DIV = 34 
		, DOT = 35 
		, DOUBLEEXPONENTIALOPENBRACKET = 36 
		, EQUALSOPENBRACKET = 37 
		, EQUALTO = 38 
		, EXPONENTIALOPENBRACKET = 39 
		, EXPOPENBRACKET = 40 
		, FLATOPENBRACKET = 41 
		, FORSTART = 42 
		, GAMMAOPENBRACKET = 43 
		, GAMMAPOPENBRACKET = 44 
		, GENFOPENBRACKET = 45 
		, GENGAMMAOPENBRACKET = 46 
		, GENLOGLIKOPENBRACKET = 47 
		, GENPARETOOPENBRACKET = 48 
		, GEVOPENBRACKET = 49 
		, HASH = 50 
		, ICLOGLOGOPENBRACKET = 51 
		, ILOGITOPENBRACKET = 52 
		, IN = 53 
		, INPRODOPENBRACKET = 54 
		, INTEGRALOPENBRACKET = 55 
		, INVERSEOPENBRACKET = 56 
		, LEFTPOINTER = 57 
		, LOGFACTOPENBRACKET = 58 
		, LOGGAMOPENBRACKET = 59 
		, LOGISTICOPENBRACKET = 60 
		, LOGITOPENBRACKET = 61 
		, LOGNORMALOPENBRACKET = 62 
		, LOGOPENBRACKET = 63 
		, MAXOPENBRACKET = 64 
		, MEANOPENBRACKET = 65 
		, MINOPENBRACKET = 66 
		, MINUS = 67 
		, MODEL = 68 
		, MULT = 69 
		, MUTLTINOMIALOPENBRACKET = 70 
		, MVNORMALOPENBRACKET = 71 
		, MVSTUDENTTOPENBRACKET = 72 
		, NCHGOPENBRACKET = 73 
		, NEGATIVEBINOMIALOPENBRACKET = 74 
		, NEWLINE = 75 
		, NODENAME = 76 
		, NORMALOPENBRACKET = 77 
		, OPENBRACE = 78 
		, OPENBRACKET = 79 
		, OPENSQUAREBRACKET = 80 
		, PARETOOPENBRACKET = 81 
		, PHIOPENBRACKET = 82 
		, PLUS = 83 
		, POISSONOPENBRACKET = 84 
		, POSTPVALUEOPENBRACKET = 85 
		, POWOPENBRACKET = 86 
		, PRIORPVALUEOPENBRACKET = 87 
		, PROBITOPENBRACKET = 88 
		, REPLICATEPOSTOPENBRACKET = 89 
		, REPLICATEPRIOROPENBRACKET = 90 
		, ROUNDOPENBRACKET = 91 
		, SDOPENBRACKET = 92 
		, SINHOPENBRACKET = 93 
		, SINOPENBRACKET = 94 
		, SOLUTIONOPENBRACKET = 95 
		, SQRTOPENBRACKET = 96 
		, STEPOPENBRACKET = 97 
		, STUDENTTOPENBRACKET = 98 
		, SUMOPENBRACKET = 99 
		, TANHOPENBRACKET = 100 
		, TANOPENBRACKET = 101 
		, TILDE = 102 
		, TRUNCATIONBEGIN = 103 
		, TRUNCOPENBRACKET = 104 
		, UNIFORMOPENBRACKET = 105 
		, WEIBULLOPENBRACKET = 106 
		, WHITESPACE = 107 
		, WISHARTOPENBRACKET = 108 
	};

};

/** Context tracking structure for 
BUGSParser

 */
class BUGSParser : public 
BUGSParserImplTraits::BaseParserType
, public BUGSParserTokens
{
public:
	typedef BUGSParserImplTraits ImplTraits;
	typedef BUGSParser ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef 
BUGSParserImplTraits::BaseParserType
 BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
public:
    BUGSParser(InputType* instream);
    BUGSParser(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );

     
     Program*
     prog (); 
     
     list<IStatement* >
     statements (); 
     
     StochasticNodeStatement*
     stochasticNodeExpr (); 
     
     BUGSParser_uvStochasticNodeExpr_return
     uvStochasticNodeExpr (); 
     
     BUGSParser_mvStochasticNodeExpr_return
     mvStochasticNodeExpr (); 
     
     MultivariateDistribution*
     categoricaldistribution (); 
     
     StochasticNodeLimitation*
     censor (); 
     
     StochasticNodeLimitation*
     truncation (); 
     
     BUGSParser_lowerWithOptionalUpper_return
     lowerWithOptionalUpper (); 
     
     BUGSParser_upperWithOptionalLower_return
     upperWithOptionalLower (); 
     
     LogicalNodeStatement*
     logicalNodeExpr (); 
     
     LinkFunctionNode*
     linkFunction (); 
     
     LogicalNodeExpression*
     exprWithNodesFunctions (); 
     
     LogicalNodeExpression*
     logicalnodeadditiveExpression (); 
     
     LogicalNodeExpression*
     logicalnodemultExpression (); 
     
     LogicalNodeExpression*
     logicalnodeexprAtom (); 
     
     UnivariateNode*
     uvNode (); 
     
     MultivariateNode*
     mvNode (); 
     
     Expression*
     expression (); 
     
     Expression*
     additiveExpression (); 
     
     Expression*
     multExpression (); 
     
     Expression*
     exprAtom (); 
     
     double
     unaryExpression (); 
     
     vector<MultiDimExpression* >
     multiIndices (); 
     
     MultiDimExpression*
     multiDimExpression (); 
     
     BUGSParser_startFor_return
     startFor (); 
     
     void
     endFor (); 
     
     BUGSParser_loopVariable_return
     loopVariable (); 
     
     Expression*
     loopBegin (); 
     
     Expression*
     loopEnd (); 
     
     ScalarFunction*
     scalarFunctions (); 
     
     VectorFunction*
     vectorFunctions (); 
     
     UnivariateDistribution*
     uvDistribution (); 
     
     MultivariateDistribution*
     mvDistribution (); 
     
     BUGSParser_discreteUnivariate_return
     discreteUnivariate (); 
     
     BUGSParser_continuousUnivariate_return
     continuousUnivariate (); 
     
     BUGSParser_discreteMultivariate_return
     discreteMultivariate (); 
     
     BUGSParser_continuousMultivariate_return
     continuousMultivariate (); 
     
     Expression*
     distributionParameter (); 
     
     vector<Expression* >
     bernoulli (); 
     
     vector<Expression* >
     binomial (); 
     
     vector<Expression* >
     negativebinomial (); 
     
     vector<Expression* >
     poisson (); 
     
     vector<Expression* >
     nchg (); 
     
     vector<Expression* >
     beta (); 
     
     vector<Expression* >
     chisquared (); 
     
     vector<Expression* >
     ddexp (); 
     
     vector<Expression* >
     exp (); 
     
     vector<Expression* >
     flat (); 
     
     vector<Expression* >
     gamma (); 
     
     vector<Expression* >
     gev (); 
     
     vector<Expression* >
     genf (); 
     
     vector<Expression* >
     gengamma (); 
     
     vector<Expression* >
     genpareto (); 
     
     vector<Expression* >
     genloglik (); 
     
     vector<Expression* >
     lognormal (); 
     
     vector<Expression* >
     logistic (); 
     
     vector<Expression* >
     normal (); 
     
     vector<Expression* >
     pareto (); 
     
     vector<Expression* >
     studentt (); 
     
     vector<Expression* >
     uniform (); 
     
     vector<Expression* >
     weibull (); 
     
     vector<MVDParameters* >
     multinomial (); 
     
     vector<MVDParameters* >
     dirichlet (); 
     
     vector<MVDParameters* >
     mvnormal (); 
     
     vector<MVDParameters* >
     mvstudentt (); 
     
     vector<MVDParameters* >
     wishart (); 












      
     bool
     msynpred( antlr3::ClassForwarder< synpred1_BUGS > );
        void msynpred1_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred2_BUGS > );
        void msynpred2_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred3_BUGS > );
        void msynpred3_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred4_BUGS > );
        void msynpred4_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred5_BUGS > );
        void msynpred5_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred6_BUGS > );
        void msynpred6_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred7_BUGS > );
        void msynpred7_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred8_BUGS > );
        void msynpred8_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred9_BUGS > );
        void msynpred9_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred10_BUGS > );
        void msynpred10_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred11_BUGS > );
        void msynpred11_BUGS_fragment ();
      
     bool
     msynpred( antlr3::ClassForwarder< synpred12_BUGS > );
        void msynpred12_BUGS_fragment ();
    // Delegated rules

    const char *    getGrammarFileName();
    void            reset();
    ~BUGSParser();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for BUGSParser
 * =============================================================================
 */
/** } */

	}


#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
